import src.tolua as tolua
import src.formatter as formatter
import json
import os
import shutil

with open("./projects/fmcs-template/project.hidden.json", "r") as f:
    data = json.load(f)["content"]

# Get absolute path of the script's directory
script_dir = os.path.dirname(os.path.abspath(__file__))

save_path = os.path.join(script_dir, "mod_out")
save_prefix = "fmcs-auto-"

# Remove existing directory if it exists
shutil.rmtree(save_path, ignore_errors=True)

# Create all required directories in one call
os.makedirs(os.path.join(save_path, "prototypes", "autogen"), exist_ok=True)
os.makedirs(os.path.join(save_path, "controls", "autogen"), exist_ok=True)


def process_recipes():
    recipes = data["recipes"]

    result_recipes = []

    for recipe in recipes:
        recipe_lua = tolua.lua_recipe(recipe)
        result_recipes.append(recipe_lua)

    data_extend_block = tolua.lua_data_extend(result_recipes)
    formatted_out = formatter.format_lua(data_extend_block)

    with open(os.path.join(save_path, "prototypes", "autogen", f"{save_prefix}recipes.lua"), "w") as f:
        f.write(formatted_out)


def process_items():
    items = data["items"]

    result_items = []

    for item in items:
        item_lua = tolua.lua_item(item)
        result_items.append(item_lua)

    data_extend_block = tolua.lua_data_extend(result_items)
    formatted_out = formatter.format_lua(data_extend_block)

    with open(os.path.join(save_path, "prototypes", "autogen", f"{save_prefix}items.lua"), "w") as f:
        f.write(formatted_out)


def process_tech():
    technologies = data["tech"]

    result_technologies = []

    for technology in technologies:
        technology_lua = tolua.lua_technology(technology)
        result_technologies.append(technology_lua)

    data_extend_block = tolua.lua_data_extend(result_technologies)

    formatted_out = formatter.format_lua(data_extend_block)

    with open(os.path.join(save_path, "prototypes", "autogen", f"{save_prefix}technologies.lua"), "w") as f:
        f.write(formatted_out)

def process_command_control():
    commands = data["commands"]

    result_commands = []

    for command in commands:
        command_lua = tolua.lua_command(command)
        result_commands.append(command_lua)
        

    final_lua = "\n".join(result_commands)
    formatted_out = formatter.format_lua(final_lua)

    with open(os.path.join(save_path, "controls", "autogen", f"{save_prefix}commands.lua"), "w") as f:
        f.write(formatted_out)


def create_main_data():
    content = """--  Auto Generated by FMCS
--  Add custom data to prototypes/data_custom.lua

require("prototypes.autogen.fmcs-auto-items")
require("prototypes.autogen.fmcs-auto-recipes")
require("prototypes.autogen.fmcs-auto-technologies")

require("prototypes.data_custom")"""
    
    with open(os.path.join(save_path, "data.lua"), "w") as f:
        f.write(content)

def create_cust_data():
    content = """--  Add custom data definitions here
--  You can also use the require() syntax shown in data.lua to split custom data into multiple files

data:extend({
    --
});"""
    
    with open(os.path.join(save_path, "prototypes", "data_custom.lua"), "w") as f:
        f.write(content)

def create_main_control():
    content = """--  Auto Generated by FMCS
--  Add custom control code to controls/control_custom.lua

-- Contains runtime scripting (event-driven logic),
-- like on_tick, on_built_entity, etc. It only runs in-game,
-- not during mod loading.

require("controls.autogen.fmcs-auto-commands")

require("controls.control_custom")"""
    
    with open(os.path.join(save_path, "control.lua"), "w") as f:
        f.write(content)

def create_cust_control():
    content = """--  Add custom control code here
--  You can also use the require() syntax shown in control.lua to split custom control code into multiple files"""
    
    with open(os.path.join(save_path, "controls", "control_custom.lua"), "w") as f:
        f.write(content)

#DATA.LUA
process_recipes()
process_items()
process_tech()
create_main_data()
create_cust_data()

#CONTROL.LUA
process_command_control()
create_main_control()
create_cust_control()