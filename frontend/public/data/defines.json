{
  "alert_type": {
    "type": "define",
    "properties": {
      "entity_destroyed": {
        "type": "define",
        "name": "defines.alert_type.entity_destroyed"
      },
      "entity_under_attack": {
        "type": "define",
        "name": "defines.alert_type.entity_under_attack"
      },
      "not_enough_construction_robots": {
        "type": "define",
        "name": "defines.alert_type.not_enough_construction_robots"
      },
      "no_material_for_construction": {
        "type": "define",
        "name": "defines.alert_type.no_material_for_construction"
      },
      "not_enough_repair_packs": {
        "type": "define",
        "name": "defines.alert_type.not_enough_repair_packs"
      },
      "turret_fire": {
        "type": "define",
        "name": "defines.alert_type.turret_fire"
      },
      "custom": {
        "type": "define",
        "name": "defines.alert_type.custom"
      },
      "no_storage": {
        "type": "define",
        "name": "defines.alert_type.no_storage"
      },
      "train_out_of_fuel": {
        "type": "define",
        "name": "defines.alert_type.train_out_of_fuel"
      },
      "fluid_mixing": {
        "type": "define",
        "name": "defines.alert_type.fluid_mixing"
      }
    }
  },
  "behavior_result": {
    "type": "define",
    "properties": {
      "in_progress": {
        "type": "define",
        "name": "defines.behavior_result.in_progress"
      },
      "fail": {
        "type": "define",
        "name": "defines.behavior_result.fail"
      },
      "success": {
        "type": "define",
        "name": "defines.behavior_result.success"
      },
      "deleted": {
        "type": "define",
        "name": "defines.behavior_result.deleted"
      }
    }
  },
  "build_check_type": {
    "type": "define",
    "properties": {
      "script": {
        "type": "define",
        "name": "defines.build_check_type.script"
      },
      "manual": {
        "type": "define",
        "name": "defines.build_check_type.manual"
      },
      "ghost_place": {
        "type": "define",
        "name": "defines.build_check_type.ghost_place"
      },
      "ghost_revive": {
        "type": "define",
        "name": "defines.build_check_type.ghost_revive"
      }
    }
  },
  "chain_signal_state": {
    "type": "define",
    "properties": {
      "none": {
        "type": "define",
        "name": "defines.chain_signal_state.none"
      },
      "all_open": {
        "type": "define",
        "name": "defines.chain_signal_state.all_open"
      },
      "partially_open": {
        "type": "define",
        "name": "defines.chain_signal_state.partially_open"
      },
      "none_open": {
        "type": "define",
        "name": "defines.chain_signal_state.none_open"
      }
    }
  },
  "chunk_generated_status": {
    "type": "define",
    "properties": {
      "nothing": {
        "type": "define",
        "name": "defines.chunk_generated_status.nothing"
      },
      "custom_tiles": {
        "type": "define",
        "name": "defines.chunk_generated_status.custom_tiles"
      },
      "basic_tiles": {
        "type": "define",
        "name": "defines.chunk_generated_status.basic_tiles"
      },
      "corrected_tiles": {
        "type": "define",
        "name": "defines.chunk_generated_status.corrected_tiles"
      },
      "tiles": {
        "type": "define",
        "name": "defines.chunk_generated_status.tiles"
      },
      "entities": {
        "type": "define",
        "name": "defines.chunk_generated_status.entities"
      }
    }
  },
  "circuit_condition_index": {
    "type": "define",
    "properties": {
      "inserter_circuit": {
        "type": "define",
        "name": "defines.circuit_condition_index.inserter_circuit"
      },
      "inserter_logistic": {
        "type": "define",
        "name": "defines.circuit_condition_index.inserter_logistic"
      },
      "lamp": {
        "type": "define",
        "name": "defines.circuit_condition_index.lamp"
      },
      "arithmetic_combinator": {
        "type": "define",
        "name": "defines.circuit_condition_index.arithmetic_combinator"
      },
      "decider_combinator": {
        "type": "define",
        "name": "defines.circuit_condition_index.decider_combinator"
      },
      "constant_combinator": {
        "type": "define",
        "name": "defines.circuit_condition_index.constant_combinator"
      },
      "offshore_pump": {
        "type": "define",
        "name": "defines.circuit_condition_index.offshore_pump"
      },
      "pump": {
        "type": "define",
        "name": "defines.circuit_condition_index.pump"
      }
    }
  },
  "circuit_connector_id": {
    "type": "define",
    "properties": {
      "accumulator": {
        "type": "define",
        "name": "defines.circuit_connector_id.accumulator"
      },
      "constant_combinator": {
        "type": "define",
        "name": "defines.circuit_connector_id.constant_combinator"
      },
      "container": {
        "type": "define",
        "name": "defines.circuit_connector_id.container"
      },
      "programmable_speaker": {
        "type": "define",
        "name": "defines.circuit_connector_id.programmable_speaker"
      },
      "rail_signal": {
        "type": "define",
        "name": "defines.circuit_connector_id.rail_signal"
      },
      "rail_chain_signal": {
        "type": "define",
        "name": "defines.circuit_connector_id.rail_chain_signal"
      },
      "roboport": {
        "type": "define",
        "name": "defines.circuit_connector_id.roboport"
      },
      "storage_tank": {
        "type": "define",
        "name": "defines.circuit_connector_id.storage_tank"
      },
      "wall": {
        "type": "define",
        "name": "defines.circuit_connector_id.wall"
      },
      "electric_pole": {
        "type": "define",
        "name": "defines.circuit_connector_id.electric_pole"
      },
      "inserter": {
        "type": "define",
        "name": "defines.circuit_connector_id.inserter"
      },
      "lamp": {
        "type": "define",
        "name": "defines.circuit_connector_id.lamp"
      },
      "combinator_input": {
        "type": "define",
        "name": "defines.circuit_connector_id.combinator_input"
      },
      "combinator_output": {
        "type": "define",
        "name": "defines.circuit_connector_id.combinator_output"
      },
      "offshore_pump": {
        "type": "define",
        "name": "defines.circuit_connector_id.offshore_pump"
      },
      "pump": {
        "type": "define",
        "name": "defines.circuit_connector_id.pump"
      }
    }
  },
  "command": {
    "type": "define",
    "properties": {
      "attack": {
        "type": "define",
        "name": "defines.command.attack",
        "doc": "Attack another entity."
      },
      "go_to_location": {
        "type": "define",
        "name": "defines.command.go_to_location",
        "doc": "Go to a specific position."
      },
      "compound": {
        "type": "define",
        "name": "defines.command.compound",
        "doc": "Chain commands together, see defines.compound_command."
      },
      "group": {
        "type": "define",
        "name": "defines.command.group",
        "doc": "Do what your group wants you to do."
      },
      "attack_area": {
        "type": "define",
        "name": "defines.command.attack_area",
        "doc": "Go to a place and attack what you see."
      },
      "wander": {
        "type": "define",
        "name": "defines.command.wander",
        "doc": "Chill."
      },
      "flee": {
        "type": "define",
        "name": "defines.command.flee",
        "doc": "Flee from another entity."
      },
      "stop": {
        "type": "define",
        "name": "defines.command.stop",
        "doc": "Stop moving and stay where you are."
      },
      "build_base": {
        "type": "define",
        "name": "defines.command.build_base",
        "doc": "Go to a position and build a base there."
      }
    }
  },
  "compound_command": {
    "type": "define",
    "properties": {
      "logical_and": {
        "type": "define",
        "name": "defines.compound_command.logical_and",
        "doc": "Fail on first failure. Only succeeds if all commands (executed one after another) succeed."
      },
      "logical_or": {
        "type": "define",
        "name": "defines.compound_command.logical_or",
        "doc": "Succeed on first success. Only fails if all commands (executed one after another) fail."
      },
      "return_last": {
        "type": "define",
        "name": "defines.compound_command.return_last",
        "doc": "Execute all commands in sequence and fail or succeed depending on the return status of the last command."
      }
    }
  },
  "control_behavior": {
    "type": "define",
    "properties": {
      "inserter": {
        "type": "define",
        "properties": {
          "circuit_mode_of_operation": {
            "type": "define",
            "properties": {
              "none": {
                "type": "define",
                "name": "defines.control_behavior.inserter.circuit_mode_of_operation.none"
              },
              "enable_disable": {
                "type": "define",
                "name": "defines.control_behavior.inserter.circuit_mode_of_operation.enable_disable"
              },
              "set_filters": {
                "type": "define",
                "name": "defines.control_behavior.inserter.circuit_mode_of_operation.set_filters"
              },
              "read_hand_contents": {
                "type": "define",
                "name": "defines.control_behavior.inserter.circuit_mode_of_operation.read_hand_contents"
              },
              "set_stack_size": {
                "type": "define",
                "name": "defines.control_behavior.inserter.circuit_mode_of_operation.set_stack_size"
              }
            }
          },
          "hand_read_mode": {
            "type": "define",
            "properties": {
              "hold": {
                "type": "define",
                "name": "defines.control_behavior.inserter.hand_read_mode.hold"
              },
              "pulse": {
                "type": "define",
                "name": "defines.control_behavior.inserter.hand_read_mode.pulse"
              }
            }
          }
        }
      },
      "logistic_container": {
        "type": "define",
        "properties": {
          "circuit_mode_of_operation": {
            "type": "define",
            "properties": {
              "send_contents": {
                "type": "define",
                "name": "defines.control_behavior.logistic_container.circuit_mode_of_operation.send_contents"
              },
              "set_requests": {
                "type": "define",
                "name": "defines.control_behavior.logistic_container.circuit_mode_of_operation.set_requests"
              }
            }
          }
        }
      },
      "lamp": {
        "type": "define",
        "properties": {
          "circuit_mode_of_operation": {
            "type": "define",
            "properties": {
              "use_colors": {
                "type": "define",
                "name": "defines.control_behavior.lamp.circuit_mode_of_operation.use_colors"
              }
            }
          }
        }
      },
      "train_stop": {
        "type": "define",
        "properties": {
          "circuit_mode_of_operation": {
            "type": "define",
            "properties": {
              "enable_disable": {
                "type": "define",
                "name": "defines.control_behavior.train_stop.circuit_mode_of_operation.enable_disable"
              },
              "send_to_train": {
                "type": "define",
                "name": "defines.control_behavior.train_stop.circuit_mode_of_operation.send_to_train"
              },
              "read_from_train": {
                "type": "define",
                "name": "defines.control_behavior.train_stop.circuit_mode_of_operation.read_from_train"
              },
              "read_stopped_train": {
                "type": "define",
                "name": "defines.control_behavior.train_stop.circuit_mode_of_operation.read_stopped_train"
              }
            }
          }
        }
      },
      "roboport": {
        "type": "define",
        "properties": {
          "circuit_mode_of_operation": {
            "type": "define",
            "properties": {
              "read_logistics": {
                "type": "define",
                "name": "defines.control_behavior.roboport.circuit_mode_of_operation.read_logistics"
              },
              "read_robot_stats": {
                "type": "define",
                "name": "defines.control_behavior.roboport.circuit_mode_of_operation.read_robot_stats"
              }
            }
          }
        }
      },
      "mining_drill": {
        "type": "define",
        "properties": {
          "resource_read_mode": {
            "type": "define",
            "properties": {
              "this_miner": {
                "type": "define",
                "name": "defines.control_behavior.mining_drill.resource_read_mode.this_miner"
              },
              "entire_patch": {
                "type": "define",
                "name": "defines.control_behavior.mining_drill.resource_read_mode.entire_patch"
              }
            }
          }
        }
      },
      "transport_belt": {
        "type": "define",
        "properties": {
          "content_read_mode": {
            "type": "define",
            "properties": {
              "pulse": {
                "type": "define",
                "name": "defines.control_behavior.transport_belt.content_read_mode.pulse"
              },
              "hold": {
                "type": "define",
                "name": "defines.control_behavior.transport_belt.content_read_mode.hold"
              }
            }
          }
        }
      },
      "type": {
        "type": "define",
        "properties": {
          "container": {
            "type": "define",
            "name": "defines.control_behavior.type.container",
            "doc": "LuaContainerControlBehavior"
          },
          "generic_on_off": {
            "type": "define",
            "name": "defines.control_behavior.type.generic_on_off",
            "doc": "LuaGenericOnOffControlBehavior"
          },
          "inserter": {
            "type": "define",
            "name": "defines.control_behavior.type.inserter",
            "doc": "LuaInserterControlBehavior"
          },
          "lamp": {
            "type": "define",
            "name": "defines.control_behavior.type.lamp",
            "doc": "LuaLampControlBehavior"
          },
          "logistic_container": {
            "type": "define",
            "name": "defines.control_behavior.type.logistic_container",
            "doc": "LuaLogisticContainerControlBehavior"
          },
          "roboport": {
            "type": "define",
            "name": "defines.control_behavior.type.roboport",
            "doc": "LuaRoboportControlBehavior"
          },
          "storage_tank": {
            "type": "define",
            "name": "defines.control_behavior.type.storage_tank",
            "doc": "LuaStorageTankControlBehavior"
          },
          "train_stop": {
            "type": "define",
            "name": "defines.control_behavior.type.train_stop",
            "doc": "LuaTrainStopControlBehavior"
          },
          "decider_combinator": {
            "type": "define",
            "name": "defines.control_behavior.type.decider_combinator",
            "doc": "LuaDeciderCombinatorControlBehavior"
          },
          "arithmetic_combinator": {
            "type": "define",
            "name": "defines.control_behavior.type.arithmetic_combinator",
            "doc": "LuaArithmeticCombinatorControlBehavior"
          },
          "constant_combinator": {
            "type": "define",
            "name": "defines.control_behavior.type.constant_combinator",
            "doc": "LuaConstantCombinatorControlBehavior"
          },
          "transport_belt": {
            "type": "define",
            "name": "defines.control_behavior.type.transport_belt",
            "doc": "LuaTransportBeltControlBehavior"
          },
          "accumulator": {
            "type": "define",
            "name": "defines.control_behavior.type.accumulator",
            "doc": "LuaAccumulatorControlBehavior"
          },
          "rail_signal": {
            "type": "define",
            "name": "defines.control_behavior.type.rail_signal",
            "doc": "LuaRailSignalControlBehavior"
          },
          "rail_chain_signal": {
            "type": "define",
            "name": "defines.control_behavior.type.rail_chain_signal",
            "doc": "LuaRailChainSignalControlBehavior"
          },
          "wall": {
            "type": "define",
            "name": "defines.control_behavior.type.wall",
            "doc": "LuaWallControlBehavior"
          },
          "mining_drill": {
            "type": "define",
            "name": "defines.control_behavior.type.mining_drill",
            "doc": "LuaMiningDrillControlBehavior"
          },
          "programmable_speaker": {
            "type": "define",
            "name": "defines.control_behavior.type.programmable_speaker",
            "doc": "LuaProgrammableSpeakerControlBehavior"
          }
        }
      }
    }
  },
  "controllers": {
    "type": "define",
    "properties": {
      "ghost": {
        "type": "define",
        "name": "defines.controllers.ghost",
        "doc": "Can't interact with the world, can only observe. Used in the multiplayer waiting-to-respawn screen."
      },
      "character": {
        "type": "define",
        "name": "defines.controllers.character",
        "doc": "The controller controls a character. This is the default controller in freeplay."
      },
      "god": {
        "type": "define",
        "name": "defines.controllers.god",
        "doc": "The controller isn't tied to a character. This is the default controller in sandbox."
      },
      "editor": {
        "type": "define",
        "name": "defines.controllers.editor",
        "doc": "The Editor Controller near ultimate power to do almost anything in the game."
      },
      "cutscene": {
        "type": "define",
        "name": "defines.controllers.cutscene",
        "doc": "The player can't interact with the world, and the camera pans around in a predefined manner."
      },
      "spectator": {
        "type": "define",
        "name": "defines.controllers.spectator",
        "doc": "Can't change anything in the world but can view anything."
      }
    }
  },
  "deconstruction_item": {
    "type": "define",
    "properties": {
      "entity_filter_mode": {
        "type": "define",
        "properties": {
          "whitelist": {
            "type": "define",
            "name": "defines.deconstruction_item.entity_filter_mode.whitelist"
          },
          "blacklist": {
            "type": "define",
            "name": "defines.deconstruction_item.entity_filter_mode.blacklist"
          }
        }
      },
      "tile_filter_mode": {
        "type": "define",
        "properties": {
          "whitelist": {
            "type": "define",
            "name": "defines.deconstruction_item.tile_filter_mode.whitelist"
          },
          "blacklist": {
            "type": "define",
            "name": "defines.deconstruction_item.tile_filter_mode.blacklist"
          }
        }
      },
      "tile_selection_mode": {
        "type": "define",
        "properties": {
          "normal": {
            "type": "define",
            "name": "defines.deconstruction_item.tile_selection_mode.normal"
          },
          "always": {
            "type": "define",
            "name": "defines.deconstruction_item.tile_selection_mode.always"
          },
          "never": {
            "type": "define",
            "name": "defines.deconstruction_item.tile_selection_mode.never"
          },
          "only": {
            "type": "define",
            "name": "defines.deconstruction_item.tile_selection_mode.only"
          }
        }
      }
    }
  },
  "difficulty": {
    "type": "define",
    "properties": {
      "easy": {
        "type": "define",
        "name": "defines.difficulty.easy"
      },
      "normal": {
        "type": "define",
        "name": "defines.difficulty.normal"
      },
      "hard": {
        "type": "define",
        "name": "defines.difficulty.hard"
      }
    }
  },
  "difficulty_settings": {
    "type": "define",
    "properties": {
      "recipe_difficulty": {
        "type": "define",
        "properties": {
          "normal": {
            "type": "define",
            "name": "defines.difficulty_settings.recipe_difficulty.normal"
          },
          "expensive": {
            "type": "define",
            "name": "defines.difficulty_settings.recipe_difficulty.expensive"
          }
        }
      },
      "technology_difficulty": {
        "type": "define",
        "properties": {
          "normal": {
            "type": "define",
            "name": "defines.difficulty_settings.technology_difficulty.normal"
          },
          "expensive": {
            "type": "define",
            "name": "defines.difficulty_settings.technology_difficulty.expensive"
          }
        }
      }
    }
  },
  "direction": {
    "type": "define",
    "properties": {
      "north": {
        "type": "define",
        "name": "defines.direction.north"
      },
      "northeast": {
        "type": "define",
        "name": "defines.direction.northeast"
      },
      "east": {
        "type": "define",
        "name": "defines.direction.east"
      },
      "southeast": {
        "type": "define",
        "name": "defines.direction.southeast"
      },
      "south": {
        "type": "define",
        "name": "defines.direction.south"
      },
      "southwest": {
        "type": "define",
        "name": "defines.direction.southwest"
      },
      "west": {
        "type": "define",
        "name": "defines.direction.west"
      },
      "northwest": {
        "type": "define",
        "name": "defines.direction.northwest"
      }
    }
  },
  "distraction": {
    "type": "define",
    "properties": {
      "none": {
        "type": "define",
        "name": "defines.distraction.none",
        "doc": "Perform command even if someone attacks the unit."
      },
      "by_enemy": {
        "type": "define",
        "name": "defines.distraction.by_enemy",
        "doc": "Attack closer enemy entities with force."
      },
      "by_anything": {
        "type": "define",
        "name": "defines.distraction.by_anything",
        "doc": "Attack closer enemy entities, including entities \"built\" by player (belts, inserters, chests)."
      },
      "by_damage": {
        "type": "define",
        "name": "defines.distraction.by_damage",
        "doc": "Attack when attacked."
      }
    }
  },
  "entity_status": {
    "type": "define",
    "properties": {
      "working": {
        "type": "define",
        "name": "defines.entity_status.working"
      },
      "no_power": {
        "type": "define",
        "name": "defines.entity_status.no_power"
      },
      "no_fuel": {
        "type": "define",
        "name": "defines.entity_status.no_fuel"
      },
      "no_recipe": {
        "type": "define",
        "name": "defines.entity_status.no_recipe"
      },
      "no_input_fluid": {
        "type": "define",
        "name": "defines.entity_status.no_input_fluid"
      },
      "no_research_in_progress": {
        "type": "define",
        "name": "defines.entity_status.no_research_in_progress"
      },
      "no_minable_resources": {
        "type": "define",
        "name": "defines.entity_status.no_minable_resources"
      },
      "low_input_fluid": {
        "type": "define",
        "name": "defines.entity_status.low_input_fluid"
      },
      "low_power": {
        "type": "define",
        "name": "defines.entity_status.low_power"
      },
      "disabled_by_control_behavior": {
        "type": "define",
        "name": "defines.entity_status.disabled_by_control_behavior"
      },
      "disabled_by_script": {
        "type": "define",
        "name": "defines.entity_status.disabled_by_script"
      },
      "fluid_ingredient_shortage": {
        "type": "define",
        "name": "defines.entity_status.fluid_ingredient_shortage"
      },
      "fluid_production_overload": {
        "type": "define",
        "name": "defines.entity_status.fluid_production_overload"
      },
      "item_ingredient_shortage": {
        "type": "define",
        "name": "defines.entity_status.item_ingredient_shortage"
      },
      "item_production_overload": {
        "type": "define",
        "name": "defines.entity_status.item_production_overload"
      },
      "marked_for_deconstruction": {
        "type": "define",
        "name": "defines.entity_status.marked_for_deconstruction"
      },
      "missing_required_fluid": {
        "type": "define",
        "name": "defines.entity_status.missing_required_fluid"
      },
      "missing_science_packs": {
        "type": "define",
        "name": "defines.entity_status.missing_science_packs"
      },
      "waiting_for_source_items": {
        "type": "define",
        "name": "defines.entity_status.waiting_for_source_items"
      },
      "waiting_for_space_in_destination": {
        "type": "define",
        "name": "defines.entity_status.waiting_for_space_in_destination"
      },
      "waiting_to_launch_rocket": {
        "type": "define",
        "name": "defines.entity_status.waiting_to_launch_rocket"
      }
    }
  },
  "events": {
    "type": "define",
    "properties": {
      "on_tick": {
        "name": "on_tick",
        "doc": "It is fired once every tick. Since this event is fired every tick, its handler shouldn  \ninclude performance heavy cod",
        "type": "event"
      },
      "on_gui_click": {
        "name": "on_gui_click",
        "doc": "Called when [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html) is clicke    \n\n**Contains**  \nelement :: [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html): The clicked element.  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player who did the clicking.  \nbutton :: [defines.mouse_button_type](http://lua-api.factorio.com/latest/defines.html#defines.mouse_button_type): The mouse button used if any.  \nalt :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If alt was pressed.  \ncontrol :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If control was pressed.  \nshift :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If shift was pressed.",
        "type": "event"
      },
      "on_gui_text_changed": {
        "name": "on_gui_text_changed",
        "doc": "Called when [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html) text is changed by the play    \n\n**Contains**  \nelement :: [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html): The edited element.  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player who did the edit.",
        "type": "event"
      },
      "on_gui_checked_state_changed": {
        "name": "on_gui_checked_state_changed",
        "doc": "Called when [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html) checked state is changed (related to checkboxes and radio button    \n\n**Contains**  \nelement :: [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html): The element whose checked state changed  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player who did the change.",
        "type": "event"
      },
      "on_entity_died": {
        "name": "on_entity_died",
        "doc": "Called when an entity die    \n\n**Contains**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ncause :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): The entity that did the killing if available.  \nloot :: [LuaInventory](http://lua-api.factorio.com/latest/LuaInventory.html): The loot generated by this entity if any.  \nforce :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) (optional): The force that did the killing if any.",
        "type": "event"
      },
      "on_post_entity_died": {
        "name": "on_post_entity_died",
        "doc": "Called after an entity die    \n\n**Contains**  \nghost :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): The ghost created by the entity dying if any.  \nforce :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) (optional): The force that did the killing if any.  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position where the entity died.  \nprototype :: [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html): The entity prototype of the entity that died.  \ncorpses :: array of [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The corpses created by the entity dying if any.  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The surface the entity was on.",
        "type": "event"
      },
      "on_entity_damaged": {
        "name": "on_entity_damaged",
        "doc": "Called when an entity is damage    \n\n**Contains**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ndamage_type :: [LuaDamagePrototype](http://lua-api.factorio.com/latest/LuaDamagePrototype.html)  \noriginal_damage_amount :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nfinal_damage_amount :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \ncause :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): The entity that did the attacking if available.  \nforce :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) (optional): The force that did the attacking if any.  \n\n**Note: ** This is not called when an entities health is set directly by another mod.",
        "type": "event"
      },
      "on_picked_up_item": {
        "name": "on_picked_up_item",
        "doc": "Called when a player picks up an ite    \n\n**Contains**  \nitem_stack :: [SimpleItemStack](http://lua-api.factorio.com/latest/Concepts.html#SimpleItemStack)  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_built_entity": {
        "name": "on_built_entity",
        "doc": "Called when player builds somethin    \n\n**Contains**  \ncreated_entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nstack :: [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html)  \nitem :: [LuaItemPrototype](http://lua-api.factorio.com/latest/LuaItemPrototype.html) (optional): The item prototype used to build the entity. Note this won't exist in some situations (built from blueprint, undo, etc).",
        "type": "event"
      },
      "on_sector_scanned": {
        "name": "on_sector_scanned",
        "doc": "Called when the radar finishes scanning a secto    \n\n**Contains**  \nradar :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The radar that did the scanning.  \nchunk_position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The chunk scanned.",
        "type": "event"
      },
      "on_player_mined_item": {
        "name": "on_player_mined_item",
        "doc": "Called when the player mines somethin    \n\n**Contains**  \nitem_stack :: [SimpleItemStack](http://lua-api.factorio.com/latest/Concepts.html#SimpleItemStack): The item given to the player  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_put_item": {
        "name": "on_put_item",
        "doc": "Called when players uses an item to build something. Called before [on_built_entity](http://lua-api.factorio.com/latest/events.html#on_built_entity    \n\n**Contains**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the item was placed.  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player who did the placing.  \nshift_build :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Item was placed using shift building.  \nbuilt_by_moving :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Item was placed while moving.  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction): The direction the item was facing when placed.",
        "type": "event"
      },
      "on_rocket_launched": {
        "name": "on_rocket_launched",
        "doc": "Called when the rocket is launche    \n\n**Contains**  \nrocket :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nrocket_silo :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional)  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The player that is riding the rocket, if any.",
        "type": "event"
      },
      "on_pre_player_mined_item": {
        "name": "on_pre_player_mined_item",
        "doc": "Called when the player finishes mining an entity, before the entity is removed from ma    \n\n**Contains**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity being mined  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_chunk_generated": {
        "name": "on_chunk_generated",
        "doc": "Called when a chunk is generate    \n\n**Contains**  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): Area of the chunk  \nsurface :: [LuaSurface](http://lua-api.factorio.com/latest/LuaSurface.html): The surface the chunk is on",
        "type": "event"
      },
      "on_player_crafted_item": {
        "name": "on_player_crafted_item",
        "doc": "Called when the player crafts an item (just before inserting into player's inventory, not clicki  \nthe button to craft). It is called for each item crafted as well as what was clicked.   \n\n**Contains**  \nitem_stack :: [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html): The crafted item  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player who did the crafting  \nrecipe :: [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe that resulted in this item being crafted",
        "type": "event"
      },
      "on_robot_built_entity": {
        "name": "on_robot_built_entity",
        "doc": "Called when a construction robot builds an entit    \n\n**Contains**  \nrobot :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The robot that did the building.  \ncreated_entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity built.  \nstack :: [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html): The item used to do the building.",
        "type": "event"
      },
      "on_robot_pre_mined": {
        "name": "on_robot_pre_mined",
        "doc": "Called before a robot mines an entit    \n\n**Contains**  \nrobot :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The robot that's about to do the mining.  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity which is about to be mined.",
        "type": "event"
      },
      "on_robot_mined": {
        "name": "on_robot_mined",
        "doc": "Called when a robot mines an entit    \n\n**Contains**  \nrobot :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The robot that did the mining.  \nitem_stack :: [SimpleItemStack](http://lua-api.factorio.com/latest/Concepts.html#SimpleItemStack): The entity the robot just picked up.",
        "type": "event"
      },
      "on_research_started": {
        "name": "on_research_started",
        "doc": "Called when a technology research start    \n\n**Contains**  \nresearch :: [LuaTechnology](http://lua-api.factorio.com/latest/LuaTechnology.html): The technology being researched  \nlast_research :: [LuaTechnology](http://lua-api.factorio.com/latest/LuaTechnology.html) (optional)",
        "type": "event"
      },
      "on_research_finished": {
        "name": "on_research_finished",
        "doc": "Called when a research finishe    \n\n**Contains**  \nresearch :: [LuaTechnology](http://lua-api.factorio.com/latest/LuaTechnology.html): The researched technology  \nby_script :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If the technology was researched by script.",
        "type": "event"
      },
      "on_player_rotated_entity": {
        "name": "on_player_rotated_entity",
        "doc": "Called when the player rotates an entity. This event is only fired when the entity actually changes i  \norientation -- pressing the rotate key on an entity that can't be rotated won't fire this even    \n\n**Contains**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The rotated entity.  \nprevious_direction :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction): The previous direction  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_marked_for_deconstruction": {
        "name": "on_marked_for_deconstruction",
        "doc": "Called when an entity is marked for deconstruction with the Deconstruction planner or via scrip    \n\n**Contains**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)",
        "type": "event"
      },
      "on_cancelled_deconstruction": {
        "name": "on_cancelled_deconstruction",
        "doc": "Called when the deconstruction of an entity is cancele    \n\n**Contains**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)",
        "type": "event"
      },
      "on_trigger_created_entity": {
        "name": "on_trigger_created_entity",
        "doc": "Called when an entity with a trigger prototype (such as capsules) create an entity AND th  \ntrigger prototype defined ````\ntrigger_created_entity=\"true\"````    \n\n**Contains**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nsource :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional)",
        "type": "event"
      },
      "on_trigger_fired_artillery": {
        "name": "on_trigger_fired_artillery",
        "doc": "Called when an entity with a trigger prototype (such as capsules) fire an artillery projectile AND th  \ntrigger prototype defined ````\ntrigger_fired_artillery=\"true\"````    \n\n**Contains**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nsource :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional)",
        "type": "event"
      },
      "on_train_changed_state": {
        "name": "on_train_changed_state",
        "doc": "Called when a train changes state (started to stopped and vice vers    \n\n**Contains**  \ntrain :: [LuaTrain](http://lua-api.factorio.com/latest/LuaTrain.html)  \nold_state :: [defines.train_state](http://lua-api.factorio.com/latest/defines.html#defines.train_state)",
        "type": "event"
      },
      "on_player_created": {
        "name": "on_player_created",
        "doc": "Called after the player was create    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_resource_depleted": {
        "name": "on_resource_depleted",
        "doc": "Called when a resource entity reaches 0 or its minimum yield for infinite resource    \n\n**Contains**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)",
        "type": "event"
      },
      "on_player_driving_changed_state": {
        "name": "on_player_driving_changed_state",
        "doc": "Called when the player's driving state has changed, this means a player has eith  \nentered or left a vehicl    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): The vehicle if any.",
        "type": "event"
      },
      "on_force_created": {
        "name": "on_force_created",
        "doc": "Called when a new force is created using ````\ngame.create_force()````  \n\n**Contains**  \nforce :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html): The newly created force.",
        "type": "event"
      },
      "on_forces_merging": {
        "name": "on_forces_merging",
        "doc": "Called when two forces are about to be merged using ````\ngame.merge_forces()````    \n\n**Contains**  \nsource :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html): The force to be destroyed  \ndestination :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html): The force to reassign entities to.",
        "type": "event"
      },
      "on_player_cursor_stack_changed": {
        "name": "on_player_cursor_stack_changed",
        "doc": "Called after a players cursorstack changed in some wa    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_pre_entity_settings_pasted": {
        "name": "on_pre_entity_settings_pasted",
        "doc": "Called before entity copy-paste is don    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nsource :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The source entity settings will be copied from.  \ndestination :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The destination entity settings will be copied to.",
        "type": "event"
      },
      "on_entity_settings_pasted": {
        "name": "on_entity_settings_pasted",
        "doc": "Called after entity copy-paste is don    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nsource :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The source entity settings have been copied from.  \ndestination :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The destination entity settings have been copied to.",
        "type": "event"
      },
      "on_player_main_inventory_changed": {
        "name": "on_player_main_inventory_changed",
        "doc": "Called after a players main inventory changed in some wa    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_player_armor_inventory_changed": {
        "name": "on_player_armor_inventory_changed",
        "doc": "Called after a players armor inventory changed in some wa    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_player_ammo_inventory_changed": {
        "name": "on_player_ammo_inventory_changed",
        "doc": "Called after a players ammo inventory changed in some wa    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_player_gun_inventory_changed": {
        "name": "on_player_gun_inventory_changed",
        "doc": "Called after a players gun inventory changed in some wa    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_player_placed_equipment": {
        "name": "on_player_placed_equipment",
        "doc": "Called after the player puts equipment in an equipment gr    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nequipment :: [LuaEquipment](http://lua-api.factorio.com/latest/LuaEquipment.html): The equipment put in the equipment grid.  \ngrid :: [LuaEquipmentGrid](http://lua-api.factorio.com/latest/LuaEquipmentGrid.html): The equipment grid the equipment was put in.",
        "type": "event"
      },
      "on_player_removed_equipment": {
        "name": "on_player_removed_equipment",
        "doc": "Called after the player removes equipment from an equipment gr    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \ngrid :: [LuaEquipmentGrid](http://lua-api.factorio.com/latest/LuaEquipmentGrid.html): The equipment grid removed from.  \nequipment :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The equipment removed.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count of equipment removed.",
        "type": "event"
      },
      "on_pre_player_died": {
        "name": "on_pre_player_died",
        "doc": "Called before a players die    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \ncause :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional)",
        "type": "event"
      },
      "on_player_died": {
        "name": "on_player_died",
        "doc": "Called after a player die    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \ncause :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional)",
        "type": "event"
      },
      "on_player_respawned": {
        "name": "on_player_respawned",
        "doc": "Called after a player respawn    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nplayer_port :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): The player port used to respawn if one was used.",
        "type": "event"
      },
      "on_player_joined_game": {
        "name": "on_player_joined_game",
        "doc": "Called after a player joins the gam    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_player_left_game": {
        "name": "on_player_left_game",
        "doc": "Called after a player leaves the gam    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_player_built_tile": {
        "name": "on_player_built_tile",
        "doc": "Called after a player builds tile    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The surface the tile(s) were built on.  \ntiles :: array of [OldTileAndPosition](http://lua-api.factorio.com/latest/Concepts.html#OldTileAndPosition): The position data.  \ntile :: [LuaTilePrototype](http://lua-api.factorio.com/latest/LuaTilePrototype.html): The tile prototype that was placed.  \nitem :: [LuaItemPrototype](http://lua-api.factorio.com/latest/LuaItemPrototype.html) (optional): The item type used to build the tiles  \nstack :: [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html) (optional): The stack used to build the tiles (may be empty if all of the items where used to build the tiles).",
        "type": "event"
      },
      "on_player_mined_tile": {
        "name": "on_player_mined_tile",
        "doc": "Called after a player mines tile    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The surface the tile(s) were mined from.  \ntiles :: array of [OldTileAndPosition](http://lua-api.factorio.com/latest/Concepts.html#OldTileAndPosition): The position data.",
        "type": "event"
      },
      "on_robot_built_tile": {
        "name": "on_robot_built_tile",
        "doc": "Called after a robot builds tile    \n\n**Contains**  \nrobot :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The robot.  \ntiles :: array of [OldTileAndPosition](http://lua-api.factorio.com/latest/Concepts.html#OldTileAndPosition): The position data.  \ntile :: [LuaTilePrototype](http://lua-api.factorio.com/latest/LuaTilePrototype.html): The tile prototype that was placed.  \nitem :: [LuaItemPrototype](http://lua-api.factorio.com/latest/LuaItemPrototype.html): The item type used to build the tiles.  \nstack :: [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html): The stack used to build the tiles (may be empty if all of the items where used to build the tiles).  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The surface the tile(s) are build on.",
        "type": "event"
      },
      "on_robot_mined_tile": {
        "name": "on_robot_mined_tile",
        "doc": "Called after a robot mines tile    \n\n**Contains**  \nrobot :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The robot.  \ntiles :: array of [OldTileAndPosition](http://lua-api.factorio.com/latest/Concepts.html#OldTileAndPosition): The position data.  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The surface the tile(s) were mined on.",
        "type": "event"
      },
      "on_player_selected_area": {
        "name": "on_player_selected_area",
        "doc": "Called after a player selects an area with a selection-tool ite    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player doing the selection.  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area selected.  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item used to select the area.  \nentities :: array of [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entities selected.  \ntiles :: array of [LuaTile](http://lua-api.factorio.com/latest/LuaTile.html): The tiles selected.",
        "type": "event"
      },
      "on_player_alt_selected_area": {
        "name": "on_player_alt_selected_area",
        "doc": "Called after a player alt-selects an area with a selection-tool ite    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player doing the selection.  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area selected.  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item used to select the area.  \nentities :: array of [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entities selected.  \ntiles :: array of [LuaTile](http://lua-api.factorio.com/latest/LuaTile.html): The tiles selected.",
        "type": "event"
      },
      "on_player_changed_surface": {
        "name": "on_player_changed_surface",
        "doc": "Called after a player changes surface    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player who changed surfaces.  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The surface index the player was on.  \n\n**Note: ** In the instance a player is moved off a surface due to it being deleted this is not called.",
        "type": "event"
      },
      "on_selected_entity_changed": {
        "name": "on_selected_entity_changed",
        "doc": "Called after the selected entity changes for a given playe    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player whose selected entity changed.  \nlast_entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): The last selected entity if it still exists and there was one.",
        "type": "event"
      },
      "on_market_item_purchased": {
        "name": "on_market_item_purchased",
        "doc": "Called after a player purchases some offer from a Market entit    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player who did the purchasing.  \nmarket :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The market entity.  \noffer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index of the offer purchased.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count of offers purchased.",
        "type": "event"
      },
      "on_player_dropped_item": {
        "name": "on_player_dropped_item",
        "doc": "Called when a player drops an item on the groun    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The item-on-ground entity.",
        "type": "event"
      },
      "on_biter_base_built": {
        "name": "on_biter_base_built",
        "doc": "Called when a biter migration builds a bas    \n\n**Contains**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The built entity.  \n\n**Note: ** This will be called multiple times as each biter in a given migration is sacrificed and builds part of the base.",
        "type": "event"
      },
      "on_player_changed_force": {
        "name": "on_player_changed_force",
        "doc": "Called after a player changes force    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player who changed forces.  \nforce :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html): The old force.",
        "type": "event"
      },
      "on_entity_renamed": {
        "name": "on_entity_renamed",
        "doc": "Called after an entity has been renamed either by the player or through scrip    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): If by_script is true this will not be included  \nby_script :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nold_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)",
        "type": "event"
      },
      "on_gui_selection_state_changed": {
        "name": "on_gui_selection_state_changed",
        "doc": "Called when [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html) selection state is changed (related to drop-downs and listboxe    \n\n**Contains**  \nelement :: [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html): The element whose selection state changed  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player who did the change.",
        "type": "event"
      },
      "on_runtime_mod_setting_changed": {
        "name": "on_runtime_mod_setting_changed",
        "doc": "Called when a runtime mod setting is changed by a playe    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player who changed the setting or ````\nnil````\nif changed by script.  \nsetting :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The setting name that changed  \nsetting_type :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The setting type: \"runtime-per-user\", or \"runtime-global\"",
        "type": "event"
      },
      "on_difficulty_settings_changed": {
        "name": "on_difficulty_settings_changed",
        "doc": "Called when the map difficulty settings are change    \n\n**Contains**  \nold_recipe_difficulty :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nold_technology_difficulty :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n\n**Note: ** It's not guaranteed that both settings are changed - just that at least one has been changed.",
        "type": "event"
      },
      "on_surface_created": {
        "name": "on_surface_created",
        "doc": "Called when a surface is create    \n\n**Contains**  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n\n**Note: ** This is not called when the default surface is created as it will always exist.",
        "type": "event"
      },
      "on_surface_deleted": {
        "name": "on_surface_deleted",
        "doc": "Called after a surface is delete    \n\n**Contains**  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_pre_surface_deleted": {
        "name": "on_pre_surface_deleted",
        "doc": "Called just before a surface is delete    \n\n**Contains**  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_player_mined_entity": {
        "name": "on_player_mined_entity",
        "doc": "Called after the results of an entity being mined are collected just before the entity is destroye  \nAfter this event any items in the buffer will be transferred into the player as if they came from mining the entit    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index of the player doing the mining.  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity that has been mined.  \nbuffer :: [LuaInventory](http://lua-api.factorio.com/latest/LuaInventory.html): The temporary inventory that holds the result of mining the entity.  \n\n**Note: ** The buffer inventory is special in that it's only valid during this event and has a dynamic size expanding as more items are transferred into it.",
        "type": "event"
      },
      "on_robot_mined_entity": {
        "name": "on_robot_mined_entity",
        "doc": "Called after the results of an entity being mined are collected just before the entity is destroye  \nAfter this event any items in the buffer will be transferred into the robot as if they came from mining the entit    \n\n**Contains**  \nrobot :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The robot doing the mining.  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity that has been mined.  \nbuffer :: [LuaInventory](http://lua-api.factorio.com/latest/LuaInventory.html): The temporary inventory that holds the result of mining the entity.  \n\n**Note: ** The buffer inventory is special in that it's only valid during this event and has a dynamic size expanding as more items are transferred into it.",
        "type": "event"
      },
      "on_train_created": {
        "name": "on_train_created",
        "doc": "Called when a new train is created either through disconnecting/connecting an existing one or building a new on    \n\n**Contains**  \ntrain :: [LuaTrain](http://lua-api.factorio.com/latest/LuaTrain.html)  \nold_train_id_1 :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The first old train id when splitting/merging trains.  \nold_train_id_2 :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The second old train id when splitting/merging trains.",
        "type": "event"
      },
      "on_gui_elem_changed": {
        "name": "on_gui_elem_changed",
        "doc": "Called when [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html) element value is changed (related to choose element button    \n\n**Contains**  \nelement :: [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html): The element whose selection state changed  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player who did the change.",
        "type": "event"
      },
      "on_player_setup_blueprint": {
        "name": "on_player_setup_blueprint",
        "doc": "Called when a player selects an area with a blueprin    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player doing the selection.  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area selected.  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item used to select the area.  \nalt :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If normal selection or alt selection was used.",
        "type": "event"
      },
      "on_player_deconstructed_area": {
        "name": "on_player_deconstructed_area",
        "doc": "Called when a player selects an area with a deconstruction planne    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player doing the selection.  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area selected.  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item used to select the area.  \nalt :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If normal selection or alt selection was used.",
        "type": "event"
      },
      "on_player_configured_blueprint": {
        "name": "on_player_configured_blueprint",
        "doc": "Called when a player clicks the \"confirm\" button in the configure Blueprint GU    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player.",
        "type": "event"
      },
      "on_console_chat": {
        "name": "on_console_chat",
        "doc": "Called when someone talks in-game either a player or through the server interfac    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The player if any.  \nmessage :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The chat message.",
        "type": "event"
      },
      "on_console_command": {
        "name": "on_console_command",
        "doc": "Called when someone enters a command-like message regardless of it being a valid comman    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The player if any.  \ncommand :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The command as typed without the preceding forward slash ('/').  \nparameters :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The parameters provided if any.",
        "type": "event"
      },
      "on_player_removed": {
        "name": "on_player_removed",
        "doc": "Called when a player is removed (deleted) from the gam  \nNot to be confused with the player logging of this is different in that the player is deleted as if he never existed in the save fil    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player index that was removed",
        "type": "event"
      },
      "on_pre_player_removed": {
        "name": "on_pre_player_removed",
        "doc": "Called before a player is removed (deleted) from the gam  \nNot to be confused with the player logging of this is different in that the player is deleted as if he never existed in the save fil    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player index that will be removed",
        "type": "event"
      },
      "on_player_used_capsule": {
        "name": "on_player_used_capsule",
        "doc": "Called when a player uses a capsule that results in some game actio    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player.  \nitem :: [LuaItemPrototype](http://lua-api.factorio.com/latest/LuaItemPrototype.html): The capsule item used.  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position the capsule was used.",
        "type": "event"
      },
      "script_raised_built": {
        "name": "script_raised_built",
        "doc": "A static event mods can use to tell other mods they built something with a scrip  \nThis is event is only raised if a mod uses it with script.raise_event() or when 'raise_built' is passed to [LuaSurface::create_entity](http://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.create_entity    \n\n**Contains**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)",
        "type": "event"
      },
      "script_raised_destroy": {
        "name": "script_raised_destroy",
        "doc": "A static event mods can use to tell other mods they destroyed something with a scrip  \nThis is event is only raised if a mod uses it with script.raise_event() or when 'raise_destroy' is passed to [LuaEntity::destroy](http://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.destroy    \n\n**Contains**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)",
        "type": "event"
      },
      "script_raised_revive": {
        "name": "script_raised_revive",
        "doc": "A static event mods can use to tell other mods they revived something with a scrip  \nThis is event is only raised if a mod uses it with script.raise_event() or when 'raise_revive' is passed to [LuaEntity::revive](http://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.revive    \n\n**Contains**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)",
        "type": "event"
      },
      "on_player_promoted": {
        "name": "on_player_promoted",
        "doc": "Called when a player is promote    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player.",
        "type": "event"
      },
      "on_player_demoted": {
        "name": "on_player_demoted",
        "doc": "Called when a player is demote    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player.",
        "type": "event"
      },
      "on_combat_robot_expired": {
        "name": "on_combat_robot_expired",
        "doc": "Called when a combat robot expires through a lack of energy, or timeou    \n\n**Contains**  \nrobot :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nowner :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): The entity that owns the robot if any.",
        "type": "event"
      },
      "on_player_changed_position": {
        "name": "on_player_changed_position",
        "doc": "Called when the tile position a player is located at change    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player.",
        "type": "event"
      },
      "on_mod_item_opened": {
        "name": "on_mod_item_opened",
        "doc": "Called when the player uses the 'Open item GUI' control on an item defined with 'can_be_mod_opened' as tr    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player.  \nitem :: [LuaItemPrototype](http://lua-api.factorio.com/latest/LuaItemPrototype.html): The item clicked on.",
        "type": "event"
      },
      "on_gui_opened": {
        "name": "on_gui_opened",
        "doc": "Called when the player opens a GU    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player.  \ngui_type :: [defines.gui_type](http://lua-api.factorio.com/latest/defines.html#defines.gui_type): The GUI type that was opened.  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): The entity that was opened  \nitem :: [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html) (optional): The item that was opened  \nequipment :: [LuaEquipment](http://lua-api.factorio.com/latest/LuaEquipment.html) (optional): The equipment that was opened  \nother_player :: [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html) (optional): The other player that was opened  \nelement :: [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html) (optional): The custom GUI element that was opened",
        "type": "event"
      },
      "on_gui_closed": {
        "name": "on_gui_closed",
        "doc": "Called when the player closes the GUI they have ope    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player.  \ngui_type :: [defines.gui_type](http://lua-api.factorio.com/latest/defines.html#defines.gui_type): The GUI type that was open.  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): The entity that was open  \nitem :: [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html) (optional): The item that was open  \nequipment :: [LuaEquipment](http://lua-api.factorio.com/latest/LuaEquipment.html) (optional): The equipment that was open  \nother_player :: [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html) (optional): The other player that was open  \nelement :: [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html) (optional): The custom GUI element that was open  \n\n**Note: ** This is only called if the player explicitly closed the GUI.  \n\n**Note: ** It's not advised to open any other GUI during this event because if this is run as a request to open a different GUI the game will force close the new opened GUI without notice to ensure the original requested GUI is opened.",
        "type": "event"
      },
      "on_gui_value_changed": {
        "name": "on_gui_value_changed",
        "doc": "Called when [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html) slider value is changed (related to the slider elemen    \n\n**Contains**  \nelement :: [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html): The element whose value changed  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player who did the change.",
        "type": "event"
      },
      "on_player_muted": {
        "name": "on_player_muted",
        "doc": "Called when a player is mute    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player.",
        "type": "event"
      },
      "on_player_unmuted": {
        "name": "on_player_unmuted",
        "doc": "Called when a player is unmute    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player.",
        "type": "event"
      },
      "on_player_cheat_mode_enabled": {
        "name": "on_player_cheat_mode_enabled",
        "doc": "Called when cheat mode is enabled on a playe    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player.",
        "type": "event"
      },
      "on_player_cheat_mode_disabled": {
        "name": "on_player_cheat_mode_disabled",
        "doc": "Called when cheat mode is disabled on a playe    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player.",
        "type": "event"
      },
      "on_character_corpse_expired": {
        "name": "on_character_corpse_expired",
        "doc": "Called when a character corpse expires due to timeout or all of the items being removed from i    \n\n**Contains**  \ncorpse :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The corpse.  \n\n**Note: ** this is not called if the corpse is mined. See [defines.events.on_pre_player_mined_item](http://lua-api.factorio.com/latest/defines.html#defines.events.on_pre_player_mined_item) to detect that.",
        "type": "event"
      },
      "on_pre_ghost_deconstructed": {
        "name": "on_pre_ghost_deconstructed",
        "doc": "Called before a ghost entity is destroyed as a result of being marked for deconstructio    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The player that did the deconstruction if any.  \nghost :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)",
        "type": "event"
      },
      "on_player_pipette": {
        "name": "on_player_pipette",
        "doc": "Called when a player invokes the \"smart pipette\" over an entit    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player  \nitem :: [LuaItemPrototype](http://lua-api.factorio.com/latest/LuaItemPrototype.html): The item put in the cursor  \nused_cheat_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If cheat mode was used to give a free stack of the item.",
        "type": "event"
      },
      "on_player_display_resolution_changed": {
        "name": "on_player_display_resolution_changed",
        "doc": "Called when the display resolution changes for a given playe    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player  \nold_resolution :: [DisplayResolution](http://lua-api.factorio.com/latest/Concepts.html#DisplayResolution): The old display resolution",
        "type": "event"
      },
      "on_player_display_scale_changed": {
        "name": "on_player_display_scale_changed",
        "doc": "Called when the display scale changes for a given playe    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player  \nold_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The old display scale",
        "type": "event"
      },
      "on_pre_player_crafted_item": {
        "name": "on_pre_player_crafted_item",
        "doc": "Called when a player queues something to be crafte    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player.  \nrecipe :: [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe.  \nitems :: [LuaInventory](http://lua-api.factorio.com/latest/LuaInventory.html): The items removed from the players inventory to do the crafting.",
        "type": "event"
      },
      "on_player_cancelled_crafting": {
        "name": "on_player_cancelled_crafting",
        "doc": "Called when a player cancels craftin    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nitems :: [LuaInventory](http://lua-api.factorio.com/latest/LuaInventory.html)  \nrecipe :: [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html)  \ncancel_count :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_chunk_charted": {
        "name": "on_chunk_charted",
        "doc": "Called when a chunk is charted or re-charte    \n\n**Contains**  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nposition :: [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition)  \nforce :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html)",
        "type": "event"
      },
      "on_technology_effects_reset": {
        "name": "on_technology_effects_reset",
        "doc": "Called when [LuaForce::reset_technology_effects](http://lua-api.factorio.com/latest/LuaForce.html#LuaForce.reset_technology_effects) is finishe    \n\n**Contains**  \nforce :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html)",
        "type": "event"
      },
      "on_land_mine_armed": {
        "name": "on_land_mine_armed",
        "doc": "Called when a land mine is arme    \n\n**Contains**  \nmine :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)",
        "type": "event"
      },
      "on_forces_merged": {
        "name": "on_forces_merged",
        "doc": "Called after two forces have been merged using ````\ngame.merge_forces()````    \n\n**Contains**  \nsource_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The force destroyed.  \ndestination :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html): The force entities where reassigned to.  \n\n**Note: ** The source force is invalidated before this event is called and the name can be re-used in this event if desired.",
        "type": "event"
      },
      "on_player_trash_inventory_changed": {
        "name": "on_player_trash_inventory_changed",
        "doc": "Called after a players trash inventory changed in some wa    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_pre_player_left_game": {
        "name": "on_pre_player_left_game",
        "doc": "Called before a player leaves the gam    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_pre_surface_cleared": {
        "name": "on_pre_surface_cleared",
        "doc": "Called just before a surface is cleared (all entities removed and all chunks deleted    \n\n**Contains**  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_surface_cleared": {
        "name": "on_surface_cleared",
        "doc": "Called just after a surface is cleared (all entities removed and all chunks deleted    \n\n**Contains**  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_chunk_deleted": {
        "name": "on_chunk_deleted",
        "doc": "Called when one or more chunks are deleted using [LuaSurface::delete_chunk](http://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.delete_chunk    \n\n**Contains**  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \npositions :: array of [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition): The chunks deleted.",
        "type": "event"
      },
      "on_pre_chunk_deleted": {
        "name": "on_pre_chunk_deleted",
        "doc": "Called before one or more chunks are deleted using [LuaSurface::delete_chunk](http://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.delete_chunk    \n\n**Contains**  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \npositions :: array of [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition): The chunks to be deleted.",
        "type": "event"
      },
      "on_train_schedule_changed": {
        "name": "on_train_schedule_changed",
        "doc": "Called when a trains schedule is changed either by the player or through scrip    \n\n**Contains**  \ntrain :: [LuaTrain](http://lua-api.factorio.com/latest/LuaTrain.html)  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The player who made the change if any.",
        "type": "event"
      },
      "on_player_banned": {
        "name": "on_player_banned",
        "doc": "Called when a player is banne    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The player banned.  \nplayer_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The banned player name.  \nby_player :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The player that did the banning if any.  \nreason :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The reason given if any.",
        "type": "event"
      },
      "on_player_kicked": {
        "name": "on_player_kicked",
        "doc": "Called when a player is kicke    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player kicked.  \nby_player :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The player that did the kicking if any.  \nreason :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The reason given if any.",
        "type": "event"
      },
      "on_player_unbanned": {
        "name": "on_player_unbanned",
        "doc": "Called when a player is un-banne    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The player un-banned.  \nplayer_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The player name un-banned.  \nby_player :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The player that did the un-banning if any.  \nreason :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The reason the player was banned if any.",
        "type": "event"
      },
      "on_rocket_launch_ordered": {
        "name": "on_rocket_launch_ordered",
        "doc": "Called when a rocket silo is ordered to be launche    \n\n**Contains**  \nrocket :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nrocket_silo :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The player that is riding the rocket, if any.",
        "type": "event"
      },
      "on_script_path_request_finished": {
        "name": "on_script_path_request_finished",
        "doc": "Called when a script path request completes. [LuaSurface::request_path](http://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.request_pat  \nEach Waypoint is a table:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \nneeds_destroy_to_reach :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): true if the path from the previous Waypoint to this one go  \nthrough an entity that must be destroyed.  \npath will be nil if pathfinding faile    \n\n**Contains**  \npath :: array of Waypoint (optional)  \nid :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Handle to associate the callback with a particular call to [LuaSurface::request_path](http://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.request_path).  \ntry_again_later :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Indicates that the pathfinder failed because it is too busy, and you can retry later.",
        "type": "event"
      },
      "on_ai_command_completed": {
        "name": "on_ai_command_completed",
        "doc": "Called when a unit/group completes a comman    \n\n**Contains**  \nunit_number :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): unit_number/group_number of the unit/group which just completed a command.  \nresult :: [defines.behavior_result](http://lua-api.factorio.com/latest/defines.html#defines.behavior_result)",
        "type": "event"
      },
      "on_marked_for_upgrade": {
        "name": "on_marked_for_upgrade",
        "doc": "Called when an entity is marked for upgrade with the Upgrade planner or via scrip    \n\n**Contains**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntarget :: [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html)  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)",
        "type": "event"
      },
      "on_cancelled_upgrade": {
        "name": "on_cancelled_upgrade",
        "doc": "Called when the upgrade of an entity is cancele    \n\n**Contains**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)",
        "type": "event"
      },
      "on_player_toggled_map_editor": {
        "name": "on_player_toggled_map_editor",
        "doc": "Called when a player toggles the map editor on or of    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_entity_cloned": {
        "name": "on_entity_cloned",
        "doc": "Called when an entity is clone    \n\n**Contains**  \nsource :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ndestination :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)",
        "type": "event"
      },
      "on_area_cloned": {
        "name": "on_area_cloned",
        "doc": "Called when an area of the map is clone    \n\n**Contains**  \nsource_surface :: [LuaSurface](http://lua-api.factorio.com/latest/LuaSurface.html)  \nsource_area :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox)  \ndestination_surface :: [LuaSurface](http://lua-api.factorio.com/latest/LuaSurface.html)  \ndestination_area :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox)  \ndestination_force :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) (optional)  \nclone_tiles :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \nclone_entities :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \nclone_decoratives :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \nclear_destination :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)",
        "type": "event"
      },
      "on_game_created_from_scenario": {
        "name": "on_game_created_from_scenario",
        "doc": "Called when a game is created from a scenario.",
        "type": "event"
      },
      "on_surface_imported": {
        "name": "on_surface_imported",
        "doc": "Called after a surface is importe    \n\n**Contains**  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \noriginal_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The original surface name.",
        "type": "event"
      },
      "on_surface_renamed": {
        "name": "on_surface_renamed",
        "doc": "Called when a surface is rename    \n\n**Contains**  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nold_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \nnew_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)",
        "type": "event"
      },
      "on_player_toggled_alt_mode": {
        "name": "on_player_toggled_alt_mode",
        "doc": "Called when a player toggles alt mode, also known as \"show entity info    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "event"
      },
      "on_player_repaired_entity": {
        "name": "on_player_repaired_entity",
        "doc": "Called when a player repairs an entit    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)",
        "type": "event"
      },
      "on_player_fast_transferred": {
        "name": "on_player_fast_transferred",
        "doc": "Called when a player fast-transfers something to or from an entit    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nfrom_player :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If the transfer was from player to entity or entity to player.",
        "type": "event"
      },
      "on_pre_robot_exploded_cliff": {
        "name": "on_pre_robot_exploded_cliff",
        "doc": "Called directly before a robot explodes cliff    \n\n**Contains**  \nrobot :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ncliff :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nitem :: [LuaItemPrototype](http://lua-api.factorio.com/latest/LuaItemPrototype.html): The cliff explosive used.",
        "type": "event"
      },
      "on_robot_exploded_cliff": {
        "name": "on_robot_exploded_cliff",
        "doc": "Called directly after a robot explodes cliff    \n\n**Contains**  \nrobot :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nitem :: [LuaItemPrototype](http://lua-api.factorio.com/latest/LuaItemPrototype.html): The cliff explosive used.",
        "type": "event"
      },
      "on_entity_spawned": {
        "name": "on_entity_spawned",
        "doc": "Called when an entity is spawned by a EnemySpawn    \n\n**Contains**  \nspawner :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)",
        "type": "event"
      },
      "on_cutscene_waypoint_reached": {
        "name": "on_cutscene_waypoint_reached",
        "doc": "Called when a cutscene is playing, each time it reaches a waypoint in that cutscen  \nThis refers to an index in the table previously passed to set_controller which started the cutscene.  \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player index of the player viewing the cutscene.  \nwaypoint_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index of the waypoint we just completed.",
        "type": "event"
      },
      "on_unit_group_created": {
        "name": "on_unit_group_created",
        "doc": "Called when a new unit group is created, before any members are added to i    \n\n**Contains**  \ngroup :: [LuaUnitGroup](http://lua-api.factorio.com/latest/LuaUnitGroup.html)",
        "type": "event"
      },
      "on_unit_added_to_group": {
        "name": "on_unit_added_to_group",
        "doc": "Called when a unit is added to a unit grou    \n\n**Contains**  \nunit :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ngroup :: [LuaUnitGroup](http://lua-api.factorio.com/latest/LuaUnitGroup.html)",
        "type": "event"
      },
      "on_unit_removed_from_group": {
        "name": "on_unit_removed_from_group",
        "doc": "Called when a unit is removed from a unit grou    \n\n**Contains**  \nunit :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ngroup :: [LuaUnitGroup](http://lua-api.factorio.com/latest/LuaUnitGroup.html)",
        "type": "event"
      },
      "on_chart_tag_added": {
        "name": "on_chart_tag_added",
        "doc": "Called when a chart tag is create    \n\n**Contains**  \ntag :: [LuaCustomChartTag](http://lua-api.factorio.com/latest/LuaCustomChartTag.html)  \nforce :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html)  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)",
        "type": "event"
      },
      "on_chart_tag_modified": {
        "name": "on_chart_tag_modified",
        "doc": "Called when a chart tag is modified by a playe    \n\n**Contains**  \ntag :: [LuaCustomChartTag](http://lua-api.factorio.com/latest/LuaCustomChartTag.html)  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \nforce :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html)  \nold_text :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \nold_icon :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID)  \nold_player_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)",
        "type": "event"
      },
      "on_chart_tag_removed": {
        "name": "on_chart_tag_removed",
        "doc": "Called just before a chart tag is delete    \n\n**Contains**  \ntag :: [LuaCustomChartTag](http://lua-api.factorio.com/latest/LuaCustomChartTag.html)  \nforce :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html)  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)",
        "type": "event"
      },
      "on_lua_shortcut": {
        "name": "on_lua_shortcut",
        "doc": "Called when a custom Lua shortcut is presse    \n\n**Contains**  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nprototype_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Shortcut prototype name of the shortcut that was clicked.",
        "type": "event"
      }
    }
  },
  "flow_precision_index": {
    "type": "define",
    "properties": {
      "one_second": {
        "type": "define",
        "name": "defines.flow_precision_index.one_second"
      },
      "one_minute": {
        "type": "define",
        "name": "defines.flow_precision_index.one_minute"
      },
      "ten_minutes": {
        "type": "define",
        "name": "defines.flow_precision_index.ten_minutes"
      },
      "one_hour": {
        "type": "define",
        "name": "defines.flow_precision_index.one_hour"
      },
      "ten_hours": {
        "type": "define",
        "name": "defines.flow_precision_index.ten_hours"
      },
      "fifty_hours": {
        "type": "define",
        "name": "defines.flow_precision_index.fifty_hours"
      },
      "two_hundred_fifty_hours": {
        "type": "define",
        "name": "defines.flow_precision_index.two_hundred_fifty_hours"
      },
      "one_thousand_hours": {
        "type": "define",
        "name": "defines.flow_precision_index.one_thousand_hours"
      }
    }
  },
  "group_state": {
    "type": "define",
    "properties": {
      "gathering": {
        "type": "define",
        "name": "defines.group_state.gathering"
      },
      "moving": {
        "type": "define",
        "name": "defines.group_state.moving"
      },
      "attacking_distraction": {
        "type": "define",
        "name": "defines.group_state.attacking_distraction"
      },
      "attacking_target": {
        "type": "define",
        "name": "defines.group_state.attacking_target"
      },
      "finished": {
        "type": "define",
        "name": "defines.group_state.finished"
      }
    }
  },
  "gui_type": {
    "type": "define",
    "properties": {
      "none": {
        "type": "define",
        "name": "defines.gui_type.none"
      },
      "entity": {
        "type": "define",
        "name": "defines.gui_type.entity"
      },
      "research": {
        "type": "define",
        "name": "defines.gui_type.research"
      },
      "controller": {
        "type": "define",
        "name": "defines.gui_type.controller"
      },
      "production": {
        "type": "define",
        "name": "defines.gui_type.production"
      },
      "item": {
        "type": "define",
        "name": "defines.gui_type.item"
      },
      "bonus": {
        "type": "define",
        "name": "defines.gui_type.bonus"
      },
      "trains": {
        "type": "define",
        "name": "defines.gui_type.trains"
      },
      "achievement": {
        "type": "define",
        "name": "defines.gui_type.achievement"
      },
      "blueprint_library": {
        "type": "define",
        "name": "defines.gui_type.blueprint_library"
      },
      "equipment": {
        "type": "define",
        "name": "defines.gui_type.equipment"
      },
      "logistic": {
        "type": "define",
        "name": "defines.gui_type.logistic"
      },
      "other_player": {
        "type": "define",
        "name": "defines.gui_type.other_player"
      },
      "kills": {
        "type": "define",
        "name": "defines.gui_type.kills"
      },
      "permissions": {
        "type": "define",
        "name": "defines.gui_type.permissions"
      },
      "tutorials": {
        "type": "define",
        "name": "defines.gui_type.tutorials"
      },
      "custom": {
        "type": "define",
        "name": "defines.gui_type.custom"
      },
      "server_management": {
        "type": "define",
        "name": "defines.gui_type.server_management"
      },
      "player_management": {
        "type": "define",
        "name": "defines.gui_type.player_management"
      }
    }
  },
  "input_action": {
    "type": "define",
    "properties": {
      "activate_copy": {
        "type": "define",
        "name": "defines.input_action.activate_copy"
      },
      "activate_cut": {
        "type": "define",
        "name": "defines.input_action.activate_cut"
      },
      "activate_paste": {
        "type": "define",
        "name": "defines.input_action.activate_paste"
      },
      "add_permission_group": {
        "type": "define",
        "name": "defines.input_action.add_permission_group"
      },
      "add_train_station": {
        "type": "define",
        "name": "defines.input_action.add_train_station"
      },
      "admin_action": {
        "type": "define",
        "name": "defines.input_action.admin_action"
      },
      "alt_select_area": {
        "type": "define",
        "name": "defines.input_action.alt_select_area"
      },
      "alt_select_blueprint_entities": {
        "type": "define",
        "name": "defines.input_action.alt_select_blueprint_entities"
      },
      "alternative_copy": {
        "type": "define",
        "name": "defines.input_action.alternative_copy"
      },
      "begin_mining": {
        "type": "define",
        "name": "defines.input_action.begin_mining"
      },
      "begin_mining_terrain": {
        "type": "define",
        "name": "defines.input_action.begin_mining_terrain"
      },
      "build_item": {
        "type": "define",
        "name": "defines.input_action.build_item"
      },
      "build_rail": {
        "type": "define",
        "name": "defines.input_action.build_rail"
      },
      "build_terrain": {
        "type": "define",
        "name": "defines.input_action.build_terrain"
      },
      "cancel_craft": {
        "type": "define",
        "name": "defines.input_action.cancel_craft"
      },
      "cancel_deconstruct": {
        "type": "define",
        "name": "defines.input_action.cancel_deconstruct"
      },
      "cancel_new_blueprint": {
        "type": "define",
        "name": "defines.input_action.cancel_new_blueprint"
      },
      "cancel_research": {
        "type": "define",
        "name": "defines.input_action.cancel_research"
      },
      "cancel_upgrade": {
        "type": "define",
        "name": "defines.input_action.cancel_upgrade"
      },
      "change_active_item_group_for_crafting": {
        "type": "define",
        "name": "defines.input_action.change_active_item_group_for_crafting"
      },
      "change_active_item_group_for_filters": {
        "type": "define",
        "name": "defines.input_action.change_active_item_group_for_filters"
      },
      "change_active_quick_bar": {
        "type": "define",
        "name": "defines.input_action.change_active_quick_bar"
      },
      "change_arithmetic_combinator_parameters": {
        "type": "define",
        "name": "defines.input_action.change_arithmetic_combinator_parameters"
      },
      "change_blueprint_book_record_label": {
        "type": "define",
        "name": "defines.input_action.change_blueprint_book_record_label"
      },
      "change_decider_combinator_parameters": {
        "type": "define",
        "name": "defines.input_action.change_decider_combinator_parameters"
      },
      "change_item_label": {
        "type": "define",
        "name": "defines.input_action.change_item_label"
      },
      "change_multiplayer_config": {
        "type": "define",
        "name": "defines.input_action.change_multiplayer_config"
      },
      "change_picking_state": {
        "type": "define",
        "name": "defines.input_action.change_picking_state"
      },
      "change_programmable_speaker_alert_parameters": {
        "type": "define",
        "name": "defines.input_action.change_programmable_speaker_alert_parameters"
      },
      "change_programmable_speaker_circuit_parameters": {
        "type": "define",
        "name": "defines.input_action.change_programmable_speaker_circuit_parameters"
      },
      "change_programmable_speaker_parameters": {
        "type": "define",
        "name": "defines.input_action.change_programmable_speaker_parameters"
      },
      "change_riding_state": {
        "type": "define",
        "name": "defines.input_action.change_riding_state"
      },
      "change_shooting_state": {
        "type": "define",
        "name": "defines.input_action.change_shooting_state"
      },
      "change_single_blueprint_record_label": {
        "type": "define",
        "name": "defines.input_action.change_single_blueprint_record_label"
      },
      "change_train_stop_station": {
        "type": "define",
        "name": "defines.input_action.change_train_stop_station"
      },
      "change_train_wait_condition": {
        "type": "define",
        "name": "defines.input_action.change_train_wait_condition"
      },
      "change_train_wait_condition_data": {
        "type": "define",
        "name": "defines.input_action.change_train_wait_condition_data"
      },
      "clean_cursor_stack": {
        "type": "define",
        "name": "defines.input_action.clean_cursor_stack"
      },
      "clear_selected_blueprint": {
        "type": "define",
        "name": "defines.input_action.clear_selected_blueprint"
      },
      "clear_selected_deconstruction_item": {
        "type": "define",
        "name": "defines.input_action.clear_selected_deconstruction_item"
      },
      "clear_selected_upgrade_item": {
        "type": "define",
        "name": "defines.input_action.clear_selected_upgrade_item"
      },
      "connect_rolling_stock": {
        "type": "define",
        "name": "defines.input_action.connect_rolling_stock"
      },
      "copy": {
        "type": "define",
        "name": "defines.input_action.copy"
      },
      "copy_entity_settings": {
        "type": "define",
        "name": "defines.input_action.copy_entity_settings"
      },
      "craft": {
        "type": "define",
        "name": "defines.input_action.craft"
      },
      "create_blueprint_like": {
        "type": "define",
        "name": "defines.input_action.create_blueprint_like"
      },
      "cursor_split": {
        "type": "define",
        "name": "defines.input_action.cursor_split"
      },
      "cursor_transfer": {
        "type": "define",
        "name": "defines.input_action.cursor_transfer"
      },
      "custom_input": {
        "type": "define",
        "name": "defines.input_action.custom_input"
      },
      "cycle_blueprint_book_backwards": {
        "type": "define",
        "name": "defines.input_action.cycle_blueprint_book_backwards"
      },
      "cycle_blueprint_book_forwards": {
        "type": "define",
        "name": "defines.input_action.cycle_blueprint_book_forwards"
      },
      "deconstruct": {
        "type": "define",
        "name": "defines.input_action.deconstruct"
      },
      "delete_blueprint_library": {
        "type": "define",
        "name": "defines.input_action.delete_blueprint_library"
      },
      "delete_blueprint_record": {
        "type": "define",
        "name": "defines.input_action.delete_blueprint_record"
      },
      "delete_custom_tag": {
        "type": "define",
        "name": "defines.input_action.delete_custom_tag"
      },
      "delete_permission_group": {
        "type": "define",
        "name": "defines.input_action.delete_permission_group"
      },
      "destroy_opened_item": {
        "type": "define",
        "name": "defines.input_action.destroy_opened_item"
      },
      "disconnect_rolling_stock": {
        "type": "define",
        "name": "defines.input_action.disconnect_rolling_stock"
      },
      "drag_train_schedule": {
        "type": "define",
        "name": "defines.input_action.drag_train_schedule"
      },
      "drag_train_wait_condition": {
        "type": "define",
        "name": "defines.input_action.drag_train_wait_condition"
      },
      "drop_blueprint_record": {
        "type": "define",
        "name": "defines.input_action.drop_blueprint_record"
      },
      "drop_item": {
        "type": "define",
        "name": "defines.input_action.drop_item"
      },
      "drop_to_blueprint_book": {
        "type": "define",
        "name": "defines.input_action.drop_to_blueprint_book"
      },
      "edit_custom_tag": {
        "type": "define",
        "name": "defines.input_action.edit_custom_tag"
      },
      "edit_permission_group": {
        "type": "define",
        "name": "defines.input_action.edit_permission_group"
      },
      "export_blueprint": {
        "type": "define",
        "name": "defines.input_action.export_blueprint"
      },
      "fast_entity_split": {
        "type": "define",
        "name": "defines.input_action.fast_entity_split"
      },
      "fast_entity_transfer": {
        "type": "define",
        "name": "defines.input_action.fast_entity_transfer"
      },
      "go_to_train_station": {
        "type": "define",
        "name": "defines.input_action.go_to_train_station"
      },
      "grab_blueprint_record": {
        "type": "define",
        "name": "defines.input_action.grab_blueprint_record"
      },
      "gui_checked_state_changed": {
        "type": "define",
        "name": "defines.input_action.gui_checked_state_changed"
      },
      "gui_click": {
        "type": "define",
        "name": "defines.input_action.gui_click"
      },
      "gui_elem_changed": {
        "type": "define",
        "name": "defines.input_action.gui_elem_changed"
      },
      "gui_selection_state_changed": {
        "type": "define",
        "name": "defines.input_action.gui_selection_state_changed"
      },
      "gui_text_changed": {
        "type": "define",
        "name": "defines.input_action.gui_text_changed"
      },
      "gui_value_changed": {
        "type": "define",
        "name": "defines.input_action.gui_value_changed"
      },
      "import_blueprint": {
        "type": "define",
        "name": "defines.input_action.import_blueprint"
      },
      "import_blueprint_string": {
        "type": "define",
        "name": "defines.input_action.import_blueprint_string"
      },
      "import_permissions_string": {
        "type": "define",
        "name": "defines.input_action.import_permissions_string"
      },
      "inventory_split": {
        "type": "define",
        "name": "defines.input_action.inventory_split"
      },
      "inventory_transfer": {
        "type": "define",
        "name": "defines.input_action.inventory_transfer"
      },
      "launch_rocket": {
        "type": "define",
        "name": "defines.input_action.launch_rocket"
      },
      "lua_shortcut": {
        "type": "define",
        "name": "defines.input_action.lua_shortcut"
      },
      "map_editor_action": {
        "type": "define",
        "name": "defines.input_action.map_editor_action"
      },
      "market_offer": {
        "type": "define",
        "name": "defines.input_action.market_offer"
      },
      "mod_settings_changed": {
        "type": "define",
        "name": "defines.input_action.mod_settings_changed"
      },
      "open_achievements_gui": {
        "type": "define",
        "name": "defines.input_action.open_achievements_gui"
      },
      "open_blueprint_library_gui": {
        "type": "define",
        "name": "defines.input_action.open_blueprint_library_gui"
      },
      "open_blueprint_record": {
        "type": "define",
        "name": "defines.input_action.open_blueprint_record"
      },
      "open_bonus_gui": {
        "type": "define",
        "name": "defines.input_action.open_bonus_gui"
      },
      "open_character_gui": {
        "type": "define",
        "name": "defines.input_action.open_character_gui"
      },
      "open_equipment": {
        "type": "define",
        "name": "defines.input_action.open_equipment"
      },
      "open_gui": {
        "type": "define",
        "name": "defines.input_action.open_gui"
      },
      "open_item": {
        "type": "define",
        "name": "defines.input_action.open_item"
      },
      "open_kills_gui": {
        "type": "define",
        "name": "defines.input_action.open_kills_gui"
      },
      "open_logistic_gui": {
        "type": "define",
        "name": "defines.input_action.open_logistic_gui"
      },
      "open_mod_item": {
        "type": "define",
        "name": "defines.input_action.open_mod_item"
      },
      "open_production_gui": {
        "type": "define",
        "name": "defines.input_action.open_production_gui"
      },
      "open_technology_gui": {
        "type": "define",
        "name": "defines.input_action.open_technology_gui"
      },
      "open_train_gui": {
        "type": "define",
        "name": "defines.input_action.open_train_gui"
      },
      "open_train_station_gui": {
        "type": "define",
        "name": "defines.input_action.open_train_station_gui"
      },
      "open_trains_gui": {
        "type": "define",
        "name": "defines.input_action.open_trains_gui"
      },
      "open_tutorials_gui": {
        "type": "define",
        "name": "defines.input_action.open_tutorials_gui"
      },
      "paste_entity_settings": {
        "type": "define",
        "name": "defines.input_action.paste_entity_settings"
      },
      "place_equipment": {
        "type": "define",
        "name": "defines.input_action.place_equipment"
      },
      "quick_bar_pick_slot": {
        "type": "define",
        "name": "defines.input_action.quick_bar_pick_slot"
      },
      "quick_bar_set_selected_page": {
        "type": "define",
        "name": "defines.input_action.quick_bar_set_selected_page"
      },
      "quick_bar_set_slot": {
        "type": "define",
        "name": "defines.input_action.quick_bar_set_slot"
      },
      "remove_cables": {
        "type": "define",
        "name": "defines.input_action.remove_cables"
      },
      "remove_train_station": {
        "type": "define",
        "name": "defines.input_action.remove_train_station"
      },
      "reset_assembling_machine": {
        "type": "define",
        "name": "defines.input_action.reset_assembling_machine"
      },
      "rotate_entity": {
        "type": "define",
        "name": "defines.input_action.rotate_entity"
      },
      "select_area": {
        "type": "define",
        "name": "defines.input_action.select_area"
      },
      "select_blueprint_entities": {
        "type": "define",
        "name": "defines.input_action.select_blueprint_entities"
      },
      "select_entity_slot": {
        "type": "define",
        "name": "defines.input_action.select_entity_slot"
      },
      "select_item": {
        "type": "define",
        "name": "defines.input_action.select_item"
      },
      "select_mapper_slot": {
        "type": "define",
        "name": "defines.input_action.select_mapper_slot"
      },
      "select_next_valid_gun": {
        "type": "define",
        "name": "defines.input_action.select_next_valid_gun"
      },
      "select_tile_slot": {
        "type": "define",
        "name": "defines.input_action.select_tile_slot"
      },
      "set_auto_launch_rocket": {
        "type": "define",
        "name": "defines.input_action.set_auto_launch_rocket"
      },
      "set_autosort_inventory": {
        "type": "define",
        "name": "defines.input_action.set_autosort_inventory"
      },
      "set_behavior_mode": {
        "type": "define",
        "name": "defines.input_action.set_behavior_mode"
      },
      "set_car_weapons_control": {
        "type": "define",
        "name": "defines.input_action.set_car_weapons_control"
      },
      "set_circuit_condition": {
        "type": "define",
        "name": "defines.input_action.set_circuit_condition"
      },
      "set_circuit_mode_of_operation": {
        "type": "define",
        "name": "defines.input_action.set_circuit_mode_of_operation"
      },
      "set_deconstruction_item_tile_selection_mode": {
        "type": "define",
        "name": "defines.input_action.set_deconstruction_item_tile_selection_mode"
      },
      "set_deconstruction_item_trees_and_rocks_only": {
        "type": "define",
        "name": "defines.input_action.set_deconstruction_item_trees_and_rocks_only"
      },
      "set_entity_color": {
        "type": "define",
        "name": "defines.input_action.set_entity_color"
      },
      "set_entity_energy_property": {
        "type": "define",
        "name": "defines.input_action.set_entity_energy_property"
      },
      "set_filter": {
        "type": "define",
        "name": "defines.input_action.set_filter"
      },
      "set_heat_interface_mode": {
        "type": "define",
        "name": "defines.input_action.set_heat_interface_mode"
      },
      "set_heat_interface_temperature": {
        "type": "define",
        "name": "defines.input_action.set_heat_interface_temperature"
      },
      "set_infinity_container_filter_item": {
        "type": "define",
        "name": "defines.input_action.set_infinity_container_filter_item"
      },
      "set_infinity_container_remove_unfiltered_items": {
        "type": "define",
        "name": "defines.input_action.set_infinity_container_remove_unfiltered_items"
      },
      "set_infinity_pipe_filter": {
        "type": "define",
        "name": "defines.input_action.set_infinity_pipe_filter"
      },
      "set_inserter_max_stack_size": {
        "type": "define",
        "name": "defines.input_action.set_inserter_max_stack_size"
      },
      "set_inventory_bar": {
        "type": "define",
        "name": "defines.input_action.set_inventory_bar"
      },
      "set_logistic_filter_item": {
        "type": "define",
        "name": "defines.input_action.set_logistic_filter_item"
      },
      "set_logistic_filter_signal": {
        "type": "define",
        "name": "defines.input_action.set_logistic_filter_signal"
      },
      "set_logistic_trash_filter_item": {
        "type": "define",
        "name": "defines.input_action.set_logistic_trash_filter_item"
      },
      "set_request_from_buffers": {
        "type": "define",
        "name": "defines.input_action.set_request_from_buffers"
      },
      "set_research_finished_stops_game": {
        "type": "define",
        "name": "defines.input_action.set_research_finished_stops_game"
      },
      "set_signal": {
        "type": "define",
        "name": "defines.input_action.set_signal"
      },
      "set_single_blueprint_record_icon": {
        "type": "define",
        "name": "defines.input_action.set_single_blueprint_record_icon"
      },
      "set_splitter_priority": {
        "type": "define",
        "name": "defines.input_action.set_splitter_priority"
      },
      "set_train_stopped": {
        "type": "define",
        "name": "defines.input_action.set_train_stopped"
      },
      "setup_assembling_machine": {
        "type": "define",
        "name": "defines.input_action.setup_assembling_machine"
      },
      "setup_blueprint": {
        "type": "define",
        "name": "defines.input_action.setup_blueprint"
      },
      "setup_single_blueprint_record": {
        "type": "define",
        "name": "defines.input_action.setup_single_blueprint_record"
      },
      "smart_pipette": {
        "type": "define",
        "name": "defines.input_action.smart_pipette"
      },
      "stack_split": {
        "type": "define",
        "name": "defines.input_action.stack_split"
      },
      "stack_transfer": {
        "type": "define",
        "name": "defines.input_action.stack_transfer"
      },
      "start_repair": {
        "type": "define",
        "name": "defines.input_action.start_repair"
      },
      "start_research": {
        "type": "define",
        "name": "defines.input_action.start_research"
      },
      "start_walking": {
        "type": "define",
        "name": "defines.input_action.start_walking"
      },
      "stop_building_by_moving": {
        "type": "define",
        "name": "defines.input_action.stop_building_by_moving"
      },
      "switch_connect_to_logistic_network": {
        "type": "define",
        "name": "defines.input_action.switch_connect_to_logistic_network"
      },
      "switch_constant_combinator_state": {
        "type": "define",
        "name": "defines.input_action.switch_constant_combinator_state"
      },
      "switch_inserter_filter_mode_state": {
        "type": "define",
        "name": "defines.input_action.switch_inserter_filter_mode_state"
      },
      "switch_power_switch_state": {
        "type": "define",
        "name": "defines.input_action.switch_power_switch_state"
      },
      "switch_to_rename_stop_gui": {
        "type": "define",
        "name": "defines.input_action.switch_to_rename_stop_gui"
      },
      "take_equipment": {
        "type": "define",
        "name": "defines.input_action.take_equipment"
      },
      "toggle_deconstruction_item_entity_filter_mode": {
        "type": "define",
        "name": "defines.input_action.toggle_deconstruction_item_entity_filter_mode"
      },
      "toggle_deconstruction_item_tile_filter_mode": {
        "type": "define",
        "name": "defines.input_action.toggle_deconstruction_item_tile_filter_mode"
      },
      "toggle_driving": {
        "type": "define",
        "name": "defines.input_action.toggle_driving"
      },
      "toggle_enable_vehicle_logistics_while_moving": {
        "type": "define",
        "name": "defines.input_action.toggle_enable_vehicle_logistics_while_moving"
      },
      "toggle_equipment_movement_bonus": {
        "type": "define",
        "name": "defines.input_action.toggle_equipment_movement_bonus"
      },
      "toggle_map_editor": {
        "type": "define",
        "name": "defines.input_action.toggle_map_editor"
      },
      "toggle_personal_roboport": {
        "type": "define",
        "name": "defines.input_action.toggle_personal_roboport"
      },
      "toggle_show_entity_info": {
        "type": "define",
        "name": "defines.input_action.toggle_show_entity_info"
      },
      "undo": {
        "type": "define",
        "name": "defines.input_action.undo"
      },
      "upgrade": {
        "type": "define",
        "name": "defines.input_action.upgrade"
      },
      "upgrade_opened_blueprint": {
        "type": "define",
        "name": "defines.input_action.upgrade_opened_blueprint"
      },
      "use_artillery_remote": {
        "type": "define",
        "name": "defines.input_action.use_artillery_remote"
      },
      "use_item": {
        "type": "define",
        "name": "defines.input_action.use_item"
      },
      "wire_dragging": {
        "type": "define",
        "name": "defines.input_action.wire_dragging"
      },
      "write_to_console": {
        "type": "define",
        "name": "defines.input_action.write_to_console"
      }
    }
  },
  "inventory": {
    "type": "define",
    "properties": {
      "fuel": {
        "type": "define",
        "name": "defines.inventory.fuel"
      },
      "burnt_result": {
        "type": "define",
        "name": "defines.inventory.burnt_result"
      },
      "chest": {
        "type": "define",
        "name": "defines.inventory.chest"
      },
      "furnace_source": {
        "type": "define",
        "name": "defines.inventory.furnace_source"
      },
      "furnace_result": {
        "type": "define",
        "name": "defines.inventory.furnace_result"
      },
      "furnace_modules": {
        "type": "define",
        "name": "defines.inventory.furnace_modules"
      },
      "character_main": {
        "type": "define",
        "name": "defines.inventory.character_main"
      },
      "character_guns": {
        "type": "define",
        "name": "defines.inventory.character_guns"
      },
      "character_ammo": {
        "type": "define",
        "name": "defines.inventory.character_ammo"
      },
      "character_armor": {
        "type": "define",
        "name": "defines.inventory.character_armor"
      },
      "character_vehicle": {
        "type": "define",
        "name": "defines.inventory.character_vehicle"
      },
      "character_trash": {
        "type": "define",
        "name": "defines.inventory.character_trash"
      },
      "god_main": {
        "type": "define",
        "name": "defines.inventory.god_main"
      },
      "editor_main": {
        "type": "define",
        "name": "defines.inventory.editor_main"
      },
      "editor_guns": {
        "type": "define",
        "name": "defines.inventory.editor_guns"
      },
      "editor_ammo": {
        "type": "define",
        "name": "defines.inventory.editor_ammo"
      },
      "editor_armor": {
        "type": "define",
        "name": "defines.inventory.editor_armor"
      },
      "roboport_robot": {
        "type": "define",
        "name": "defines.inventory.roboport_robot"
      },
      "roboport_material": {
        "type": "define",
        "name": "defines.inventory.roboport_material"
      },
      "robot_cargo": {
        "type": "define",
        "name": "defines.inventory.robot_cargo"
      },
      "robot_repair": {
        "type": "define",
        "name": "defines.inventory.robot_repair"
      },
      "assembling_machine_input": {
        "type": "define",
        "name": "defines.inventory.assembling_machine_input"
      },
      "assembling_machine_output": {
        "type": "define",
        "name": "defines.inventory.assembling_machine_output"
      },
      "assembling_machine_modules": {
        "type": "define",
        "name": "defines.inventory.assembling_machine_modules"
      },
      "lab_input": {
        "type": "define",
        "name": "defines.inventory.lab_input"
      },
      "lab_modules": {
        "type": "define",
        "name": "defines.inventory.lab_modules"
      },
      "mining_drill_modules": {
        "type": "define",
        "name": "defines.inventory.mining_drill_modules"
      },
      "item_main": {
        "type": "define",
        "name": "defines.inventory.item_main"
      },
      "rocket_silo_rocket": {
        "type": "define",
        "name": "defines.inventory.rocket_silo_rocket"
      },
      "rocket_silo_result": {
        "type": "define",
        "name": "defines.inventory.rocket_silo_result"
      },
      "rocket": {
        "type": "define",
        "name": "defines.inventory.rocket"
      },
      "car_trunk": {
        "type": "define",
        "name": "defines.inventory.car_trunk"
      },
      "car_ammo": {
        "type": "define",
        "name": "defines.inventory.car_ammo"
      },
      "cargo_wagon": {
        "type": "define",
        "name": "defines.inventory.cargo_wagon"
      },
      "turret_ammo": {
        "type": "define",
        "name": "defines.inventory.turret_ammo"
      },
      "beacon_modules": {
        "type": "define",
        "name": "defines.inventory.beacon_modules"
      },
      "character_corpse": {
        "type": "define",
        "name": "defines.inventory.character_corpse"
      },
      "artillery_turret_ammo": {
        "type": "define",
        "name": "defines.inventory.artillery_turret_ammo"
      },
      "artillery_wagon_ammo": {
        "type": "define",
        "name": "defines.inventory.artillery_wagon_ammo"
      }
    }
  },
  "logistic_member_index": {
    "type": "define",
    "properties": {
      "logistic_container": {
        "type": "define",
        "name": "defines.logistic_member_index.logistic_container"
      },
      "vehicle_storage": {
        "type": "define",
        "name": "defines.logistic_member_index.vehicle_storage"
      },
      "character_requester": {
        "type": "define",
        "name": "defines.logistic_member_index.character_requester"
      },
      "character_storage": {
        "type": "define",
        "name": "defines.logistic_member_index.character_storage"
      },
      "character_provider": {
        "type": "define",
        "name": "defines.logistic_member_index.character_provider"
      },
      "generic_on_off_behavior": {
        "type": "define",
        "name": "defines.logistic_member_index.generic_on_off_behavior"
      }
    }
  },
  "logistic_mode": {
    "type": "define",
    "properties": {
      "none": {
        "type": "define",
        "name": "defines.logistic_mode.none"
      },
      "active_provider": {
        "type": "define",
        "name": "defines.logistic_mode.active_provider"
      },
      "storage": {
        "type": "define",
        "name": "defines.logistic_mode.storage"
      },
      "requester": {
        "type": "define",
        "name": "defines.logistic_mode.requester"
      },
      "passive_provider": {
        "type": "define",
        "name": "defines.logistic_mode.passive_provider"
      },
      "buffer": {
        "type": "define",
        "name": "defines.logistic_mode.buffer"
      }
    }
  },
  "mouse_button_type": {
    "type": "define",
    "properties": {
      "none": {
        "type": "define",
        "name": "defines.mouse_button_type.none"
      },
      "left": {
        "type": "define",
        "name": "defines.mouse_button_type.left"
      },
      "right": {
        "type": "define",
        "name": "defines.mouse_button_type.right"
      },
      "middle": {
        "type": "define",
        "name": "defines.mouse_button_type.middle"
      }
    }
  },
  "rail_connection_direction": {
    "type": "define",
    "properties": {
      "left": {
        "type": "define",
        "name": "defines.rail_connection_direction.left"
      },
      "straight": {
        "type": "define",
        "name": "defines.rail_connection_direction.straight"
      },
      "right": {
        "type": "define",
        "name": "defines.rail_connection_direction.right"
      },
      "none": {
        "type": "define",
        "name": "defines.rail_connection_direction.none"
      }
    }
  },
  "rail_direction": {
    "type": "define",
    "properties": {
      "front": {
        "type": "define",
        "name": "defines.rail_direction.front"
      },
      "back": {
        "type": "define",
        "name": "defines.rail_direction.back"
      }
    }
  },
  "render_mode": {
    "type": "define",
    "properties": {
      "game": {
        "type": "define",
        "name": "defines.render_mode.game"
      },
      "chart": {
        "type": "define",
        "name": "defines.render_mode.chart"
      },
      "chart_zoomed_in": {
        "type": "define",
        "name": "defines.render_mode.chart_zoomed_in"
      }
    }
  },
  "riding": {
    "type": "define",
    "properties": {
      "acceleration": {
        "type": "define",
        "properties": {
          "nothing": {
            "type": "define",
            "name": "defines.riding.acceleration.nothing"
          },
          "accelerating": {
            "type": "define",
            "name": "defines.riding.acceleration.accelerating"
          },
          "braking": {
            "type": "define",
            "name": "defines.riding.acceleration.braking"
          },
          "reversing": {
            "type": "define",
            "name": "defines.riding.acceleration.reversing"
          }
        }
      },
      "direction": {
        "type": "define",
        "properties": {
          "left": {
            "type": "define",
            "name": "defines.riding.direction.left"
          },
          "straight": {
            "type": "define",
            "name": "defines.riding.direction.straight"
          },
          "right": {
            "type": "define",
            "name": "defines.riding.direction.right"
          }
        }
      }
    }
  },
  "shooting": {
    "type": "define",
    "properties": {
      "not_shooting": {
        "type": "define",
        "name": "defines.shooting.not_shooting"
      },
      "shooting_enemies": {
        "type": "define",
        "name": "defines.shooting.shooting_enemies"
      },
      "shooting_selected": {
        "type": "define",
        "name": "defines.shooting.shooting_selected"
      }
    }
  },
  "signal_state": {
    "type": "define",
    "properties": {
      "open": {
        "type": "define",
        "name": "defines.signal_state.open",
        "doc": "Green."
      },
      "closed": {
        "type": "define",
        "name": "defines.signal_state.closed",
        "doc": "Red."
      },
      "reserved": {
        "type": "define",
        "name": "defines.signal_state.reserved",
        "doc": "Orange."
      },
      "reserved_by_circuit_network": {
        "type": "define",
        "name": "defines.signal_state.reserved_by_circuit_network",
        "doc": "Red - From circuit network."
      }
    }
  },
  "train_state": {
    "type": "define",
    "properties": {
      "on_the_path": {
        "type": "define",
        "name": "defines.train_state.on_the_path",
        "doc": "Normal state -- following the path."
      },
      "path_lost": {
        "type": "define",
        "name": "defines.train_state.path_lost",
        "doc": "Had path and lost it -- must stop."
      },
      "no_schedule": {
        "type": "define",
        "name": "defines.train_state.no_schedule",
        "doc": "Doesn't have anywhere to go."
      },
      "no_path": {
        "type": "define",
        "name": "defines.train_state.no_path",
        "doc": "Has no path and is stopped."
      },
      "arrive_signal": {
        "type": "define",
        "name": "defines.train_state.arrive_signal",
        "doc": "Braking before a rail signal."
      },
      "wait_signal": {
        "type": "define",
        "name": "defines.train_state.wait_signal",
        "doc": "Waiting at a signal."
      },
      "arrive_station": {
        "type": "define",
        "name": "defines.train_state.arrive_station",
        "doc": "Braking before a station."
      },
      "wait_station": {
        "type": "define",
        "name": "defines.train_state.wait_station",
        "doc": "Waiting at a station."
      },
      "manual_control_stop": {
        "type": "define",
        "name": "defines.train_state.manual_control_stop",
        "doc": "Switched to manual control and has to stop."
      },
      "manual_control": {
        "type": "define",
        "name": "defines.train_state.manual_control",
        "doc": "Can move if user explicitly sits in and rides the train."
      }
    }
  },
  "transport_line": {
    "type": "define",
    "properties": {
      "left_line": {
        "type": "define",
        "name": "defines.transport_line.left_line"
      },
      "right_line": {
        "type": "define",
        "name": "defines.transport_line.right_line"
      },
      "left_underground_line": {
        "type": "define",
        "name": "defines.transport_line.left_underground_line"
      },
      "right_underground_line": {
        "type": "define",
        "name": "defines.transport_line.right_underground_line"
      },
      "secondary_left_line": {
        "type": "define",
        "name": "defines.transport_line.secondary_left_line"
      },
      "secondary_right_line": {
        "type": "define",
        "name": "defines.transport_line.secondary_right_line"
      },
      "left_split_line": {
        "type": "define",
        "name": "defines.transport_line.left_split_line"
      },
      "right_split_line": {
        "type": "define",
        "name": "defines.transport_line.right_split_line"
      },
      "secondary_left_split_line": {
        "type": "define",
        "name": "defines.transport_line.secondary_left_split_line"
      },
      "secondary_right_split_line": {
        "type": "define",
        "name": "defines.transport_line.secondary_right_split_line"
      }
    }
  },
  "wire_connection_id": {
    "type": "define",
    "properties": {
      "electric_pole": {
        "type": "define",
        "name": "defines.wire_connection_id.electric_pole"
      },
      "power_switch_left": {
        "type": "define",
        "name": "defines.wire_connection_id.power_switch_left"
      },
      "power_switch_right": {
        "type": "define",
        "name": "defines.wire_connection_id.power_switch_right"
      }
    }
  },
  "wire_type": {
    "type": "define",
    "properties": {
      "red": {
        "type": "define",
        "name": "defines.wire_type.red"
      },
      "green": {
        "type": "define",
        "name": "defines.wire_type.green"
      },
      "copper": {
        "type": "define",
        "name": "defines.wire_type.copper"
      }
    }
  }
}