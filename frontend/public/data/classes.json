{
  "LuaAISettings": {
    "name": "LuaAISettings",
    "type": "LuaAISettings",
    "inherits": [],
    "properties": {
      "allow_destroy_when_commands_fail": {
        "name": "allow_destroy_when_commands_fail",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If enabled, units that repeatedly fail to succeed at commands will be destroye"
      },
      "allow_try_return_to_spawner": {
        "name": "allow_try_return_to_spawner",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If enabled, units that have nothing else to do will attempt to return to a spawne"
      },
      "do_separation": {
        "name": "do_separation",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If enabled, units will try to separate themselves from nearby friendly unit"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "path_resolution_modifier": {
        "name": "path_resolution_modifier",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "The pathing resolution modifie"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Collection of settings for overriding default ai behavior"
  },
  "LuaAccumulatorControlBehavior": {
    "name": "LuaAccumulatorControlBehavior",
    "type": "LuaAccumulatorControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "output_signal": {
        "name": "output_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for accumulators."
  },
  "LuaAmmoCategoryPrototype": {
    "name": "LuaAmmoCategoryPrototype",
    "type": "LuaAmmoCategoryPrototype",
    "inherits": [],
    "properties": {
      "bonus_gui_order": {
        "name": "bonus_gui_order",
        "type": "string",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Prototype of a ammo category."
  },
  "LuaArithmeticCombinatorControlBehavior": {
    "name": "LuaArithmeticCombinatorControlBehavior",
    "type": "LuaArithmeticCombinatorControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity",
      "Inherited from LuaCombinatorControlBehavior: get_signal_last_tick, signals_last_tick"
    ],
    "properties": {
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "get_signal_last_tick": {
        "name": "get_signal_last_tick",
        "type": "function",
        "doc": "Gets the value of a specific signal sent by this combinator behavior last tick or nil if the signal didn't exis    \n\n**Parameters**  \nsignal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID): The signal to get  \n\n**Return value**  \nThe value or ````\nnil````\nif none.",
        "returns": "int",
        "args": {
          "signal": {
            "name": "signal",
            "type": "SignalID",
            "doc": "signal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID): The signal to get"
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "parameters": {
        "name": "parameters",
        "type": "ArithmeticCombinatorParameters",
        "mode": "[RW]",
        "doc": "The arithmetic combinator parameters.   \n\n**Note: ** ````\nparameters````\nmay be ````\nnil````\nin order to clear the parameters."
      },
      "signals_last_tick": {
        "name": "signals_last_tick",
        "type": "array of Signal",
        "mode": "[R]",
        "doc": "The circuit network signals sent by this combinator last tick."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for arithmetic combinators."
  },
  "LuaAutoplaceControlPrototype": {
    "name": "LuaAutoplaceControlPrototype",
    "type": "LuaAutoplaceControlPrototype",
    "inherits": [],
    "properties": {
      "category": {
        "name": "category",
        "type": "string",
        "mode": "[R]",
        "doc": "Category name of this prototype."
      },
      "control_order": {
        "name": "control_order",
        "type": "string",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "richness": {
        "name": "richness",
        "type": "boolean",
        "mode": "[R]"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Prototype of an autoplace control."
  },
  "LuaBootstrap": {
    "name": "LuaBootstrap",
    "type": "LuaBootstrap",
    "inherits": [],
    "properties": {
      "generate_event_name": {
        "name": "generate_event_name",
        "type": "function",
        "doc": "Generate a new, unique event ID.  \n\n**Return value**  \nThe new ID",
        "returns": "uint"
      },
      "get_event_handler": {
        "name": "get_event_handler",
        "doc": "Find the event handler for an event.   \n\n**Parameters**  \nevent :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The event identifier to get a handler for  \n\n**Return value**  \nReference to the function currently registered as the handler.",
        "type": "function",
        "args": {
          "event": {
            "name": "event",
            "type": "uint",
            "doc": "event :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The event identifier to get a handler for"
          }
        }
      },
      "get_event_order": {
        "name": "get_event_order",
        "doc": "Gets the mod event orde  \ntype(string)",
        "type": "function"
      },
      "mod_name": {
        "name": "mod_name",
        "type": "string",
        "mode": "[R]",
        "doc": "The name of the mod from the environment this is used i"
      },
      "on_configuration_changed": {
        "name": "on_configuration_changed",
        "doc": "Register a function to be run when mod configuration change  \nThis is called any time the game version changes, prototypes change, startup mod settings change, and any time mod versions change including adding or removing mod    \n\n**Parameters**  \nf :: function([ConfigurationChangedData](http://lua-api.factorio.com/latest/Concepts.html#ConfigurationChangedData))  \nThe handler for this event. Passing ````\nnil````\nwill unregister the handler.",
        "type": "function",
        "args": {
          "f": {
            "name": "f",
            "type": "function(ConfigurationChangedData)",
            "doc": "f :: function([ConfigurationChangedData](http://lua-api.factorio.com/latest/Concepts.html#ConfigurationChangedData))  \nThe handler for this event. Passing ````\nnil````\nwill unregister the handler."
          }
        }
      },
      "on_event": {
        "name": "on_event",
        "doc": "Register a handler to run on event or event    \n\n**Parameters**  \nevent :: [defines.events](http://lua-api.factorio.com/latest/defines.html#defines.events) or array of [defines.events](http://lua-api.factorio.com/latest/defines.html#defines.events) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The events or custom-input name to invoke the handler on  \nf :: function(Event): The handler to run. Passing nil will unregister the handler. The handl  \nwill receive a table that contains the key ````\nname````\n(of type [defines.events](http://lua-api.factorio.com/latest/defines.html#defines.events)) specifying the na  \nof the event it was called to handle, and ````\ntick````\nthat specifies when the event was created. This table wi  \nalso contain other fields, depending on the type of the event. S  \n[ the list of Factorio events](http://lua-api.factorio.com/latest/events.html) for a listing of these additional fields.  \n\n**Note: ** Events raised by [LuaBootstrap::raise_event](http://lua-api.factorio.com/latest/LuaBootstrap.html#LuaBootstrap.raise_event) contain ````\nmod_name````\nadditionally to the above properties.",
        "type": "function",
        "args": {
          "event": {
            "name": "event",
            "type": "defines.events or array of defines.events or string",
            "doc": "event :: [defines.events](http://lua-api.factorio.com/latest/defines.html#defines.events) or array of [defines.events](http://lua-api.factorio.com/latest/defines.html#defines.events) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The events or custom-input name to invoke the handler on"
          },
          "f": {
            "name": "f",
            "type": "function(Event)",
            "doc": "f :: function(Event): The handler to run. Passing nil will unregister the handler. The handl  \nwill receive a table that contains the key ````\nname````\n(of type [defines.events](http://lua-api.factorio.com/latest/defines.html#defines.events)) specifying the na  \nof the event it was called to handle, and ````\ntick````\nthat specifies when the event was created. This table wi  \nalso contain other fields, depending on the type of the event. S  \n[ the list of Factorio events](http://lua-api.factorio.com/latest/events.html) for a listing of these additional fields."
          }
        }
      },
      "on_init": {
        "name": "on_init",
        "doc": "Register a callback to be run on mod ini  \nThis is called once when a new save game is created or once when a save file is loaded that previously didn't contain the mo  \nThis is always called before other event handlers and is meant for setting up initial values that a mod will use for its lifetim    \n\n**Parameters**  \nf :: function(): The function to call. Passing nil wi  \nunregister the handler.",
        "type": "function",
        "args": {
          "f": {
            "name": "f",
            "type": "function()",
            "doc": "f :: function(): The function to call. Passing nil wi  \nunregister the handler."
          }
        }
      },
      "on_load": {
        "name": "on_load",
        "doc": "Register a function to be run on module loa  \nThis is called every time a save file is loaded *except* for the instance when a mod is loaded into a save file that it previously wasn't part o  \nAdditionally this is called when connecting to any other game in a multiplayer session and should never change the game state. This is meant for 3 specific reasons and only     \nre-register conditional event handlers  \nre-setup meta tables  \ncreate local references to tables stored in the global table  \nIn all other instances the [LuaBootstrap::on_init](http://lua-api.factorio.com/latest/LuaBootstrap.html#LuaBootstrap.on_init), [LuaBootstrap::on_configuration_changed](http://lua-api.factorio.com/latest/LuaBootstrap.html#LuaBootstrap.on_configuration_changed) or migration scripts should be use  \nDoing any other logic when loading a save file can break the replay and cause desync issues if the mod is used in multiplaye    \n\n**Parameters**  \nf :: function(): The function to call. Passing ````\nnil````\nwill unregister the handler.  \n\n**Note: ** [LuaGameScript](http://lua-api.factorio.com/latest/LuaGameScript.html) and [LuaRendering](http://lua-api.factorio.com/latest/LuaRendering.html) are unavailable in this event.",
        "type": "function",
        "args": {
          "f": {
            "name": "f",
            "type": "function()",
            "doc": "f :: function(): The function to call. Passing ````\nnil````\nwill unregister the handler."
          }
        }
      },
      "on_nth_tick": {
        "name": "on_nth_tick",
        "doc": "Register a handler to run on nth tick(s). When the game is on tick 0 it will trigger all registered handler    \n\n**Parameters**  \ntick :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) or array of [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The nth-tick(s) to invoke the handler on. Passing nil will unregister all nth-tick handlers.  \nf :: function([NthTickEvent](http://lua-api.factorio.com/latest/Concepts.html#NthTickEvent)): The handler to run. Passing nil will unregister the handler for the provided ticks.",
        "type": "function",
        "args": {
          "f": {
            "name": "f",
            "type": "function(NthTickEvent)",
            "doc": "f :: function([NthTickEvent](http://lua-api.factorio.com/latest/Concepts.html#NthTickEvent)): The handler to run. Passing nil will unregister the handler for the provided ticks."
          },
          "tick": {
            "name": "tick",
            "type": "uint or array of uint",
            "doc": "tick :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) or array of [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The nth-tick(s) to invoke the handler on. Passing nil will unregister all nth-tick handlers."
          }
        }
      },
      "raise_event": {
        "name": "raise_event",
        "doc": "Raise an even    \n\n**Parameters**  \nevent :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): ID of the event to raise  \ntable: Table with extra data. This table will be passed to the event handler.",
        "type": "function",
        "args": {
          "event": {
            "name": "event",
            "type": "uint",
            "doc": "event :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): ID of the event to raise"
          },
          "table": {
            "name": "table",
            "doc": "table: Table with extra data. This table will be passed to the event handler.",
            "type": "table"
          }
        }
      }
    },
    "doc": "Entry point for registering event handlers. It is accessible through the global object named script."
  },
  "LuaBurner": {
    "name": "LuaBurner",
    "type": "LuaBurner",
    "inherits": [],
    "properties": {
      "burnt_result_inventory": {
        "name": "burnt_result_inventory",
        "type": "LuaInventory",
        "mode": "[R]",
        "doc": "The burnt result inventor"
      },
      "currently_burning": {
        "name": "currently_burning",
        "type": "LuaItemPrototype",
        "mode": "[RW]",
        "doc": "**Note: ** Writing automatically handles correcting [LuaBurner::remaining_burning_fuel](http://lua-api.factorio.com/latest/LuaBurner.html#LuaBurner.remaining_burning_fuel)."
      },
      "fuel_categories": {
        "name": "fuel_categories",
        "type": "dictionary string → boolean",
        "mode": "[R]",
        "doc": "The fuel categories this burner use    \n\n**Note: ** The value in the dictionary is meaningless and exists just to allow the dictionary type for easy lookup."
      },
      "heat": {
        "name": "heat",
        "type": "double",
        "mode": "[RW]"
      },
      "heat_capacity": {
        "name": "heat_capacity",
        "type": "double",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "inventory": {
        "name": "inventory",
        "type": "LuaInventory",
        "mode": "[R]",
        "doc": "The fuel inventor"
      },
      "owner": {
        "name": "owner",
        "type": "LuaEntity or LuaEquipment",
        "mode": "[R]",
        "doc": "The owner of this burner energy sour"
      },
      "remaining_burning_fuel": {
        "name": "remaining_burning_fuel",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** Writing will silently do nothing if there's no [LuaBurner::currently_burning](http://lua-api.factorio.com/latest/LuaBurner.html#LuaBurner.currently_burning) set."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "A reference to the burner energy source owned by a specific LuaEntity or LuaEquipment."
  },
  "LuaBurnerPrototype": {
    "name": "LuaBurnerPrototype",
    "type": "LuaBurnerPrototype",
    "inherits": [],
    "properties": {
      "burnt_inventory_size": {
        "name": "burnt_inventory_size",
        "type": "uint",
        "mode": "[R]"
      },
      "effectivity": {
        "name": "effectivity",
        "type": "double",
        "mode": "[R]"
      },
      "emissions": {
        "name": "emissions",
        "type": "double",
        "mode": "[R]"
      },
      "fuel_categories": {
        "name": "fuel_categories",
        "type": "dictionary string → boolean",
        "mode": "[R]",
        "doc": "**Note: ** The value in the dictionary is meaningless and exists just to allow the dictionary type for easy lookup."
      },
      "fuel_inventory_size": {
        "name": "fuel_inventory_size",
        "type": "uint",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "light_flicker": {
        "name": "light_flicker",
        "type": "table",
        "mode": "[R]",
        "doc": "The light flicker definition for this burner prototype if an  \nTable with the following fields:   \nminimum_intensity :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nmaximum_intensity :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nderivation_change_frequency :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nderivation_change_deviation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nborder_fix_speed :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nminimum_light_size :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nlight_intensity_to_size_coefficient :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)"
      },
      "render_no_network_icon": {
        "name": "render_no_network_icon",
        "type": "boolean",
        "mode": "[R]"
      },
      "render_no_power_icon": {
        "name": "render_no_power_icon",
        "type": "boolean",
        "mode": "[R]"
      },
      "smoke": {
        "name": "smoke",
        "type": "array of table",
        "mode": "[R]",
        "doc": "The smoke sources for this burner prototype if an  \nEach element is a table:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \nfrequency :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \noffset :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \nposition :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \nnorth_position :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \neast_position :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \nsouth_position :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \nwest_position :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \ndeviation :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \nstarting_frame_speed :: [uint16](http://lua-api.factorio.com/latest/Builtin-Types.html#uint16)  \nstarting_frame_speed_deviation :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \nstarting_frame :: [uint16](http://lua-api.factorio.com/latest/Builtin-Types.html#uint16)  \nstarting_frame_deviation :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \nslow_down_factor :: [uint8](http://lua-api.factorio.com/latest/Builtin-Types.html#uint8)  \nheight :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nheight_deviation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nstarting_vertical_speed :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nstarting_vertical_speed_deviation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nvertical_speed_slowdown :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Prototype of a burner energy source."
  },
  "LuaChunkIterator": {
    "name": "LuaChunkIterator",
    "type": "LuaChunkIterator",
    "inherits": [],
    "properties": {
      "()": {
        "name": "()",
        "type": "function",
        "doc": "Get the next chunk position or ````\nnil````\n, and increments the iterator.",
        "returns": "ChunkPosition"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "A chunk iterator can be used for iterating chunks coordinates of a surface."
  },
  "LuaCircuitNetwork": {
    "name": "LuaCircuitNetwork",
    "type": "LuaCircuitNetwork",
    "inherits": [],
    "properties": {
      "circuit_connector_id": {
        "name": "circuit_connector_id",
        "type": "defines.circuit_connector_id",
        "mode": "[R]",
        "doc": "The circuit connector ID on the associated entity this network was gotten from."
      },
      "connected_circuit_count": {
        "name": "connected_circuit_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "The number of circuits connected to this network."
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this circuit network reference is associated with"
      },
      "get_signal": {
        "name": "get_signal",
        "type": "function",
        "returns": "int",
        "args": {
          "signal": {
            "name": "signal",
            "type": "SignalID",
            "doc": "signal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID): The signal to read."
          }
        },
        "doc": "**Parameters**  \nsignal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID): The signal to read.  \n\n**Return value**  \nThe current value of the signal."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "network_id": {
        "name": "network_id",
        "type": "uint",
        "mode": "[R]",
        "doc": "The circuit networks ID."
      },
      "signals": {
        "name": "signals",
        "type": "array of Signal",
        "mode": "[R]",
        "doc": "The circuit network signals last tick. ````\nnil````\nif there are no signals."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "wire_type": {
        "name": "wire_type",
        "type": "defines.wire_type",
        "mode": "[R]",
        "doc": "The wire type this network is associated with."
      }
    },
    "doc": "A circuit network associated with a given entity, connector, and wire type."
  },
  "LuaCombinatorControlBehavior": {
    "name": "LuaCombinatorControlBehavior",
    "type": "LuaCombinatorControlBehavior",
    "inherits": [],
    "properties": {
      "get_signal_last_tick": {
        "name": "get_signal_last_tick",
        "type": "function",
        "doc": "Gets the value of a specific signal sent by this combinator behavior last tick or nil if the signal didn't exis    \n\n**Parameters**  \nsignal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID): The signal to get  \n\n**Return value**  \nThe value or ````\nnil````\nif none.",
        "returns": "int",
        "args": {
          "signal": {
            "name": "signal",
            "type": "SignalID",
            "doc": "signal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID): The signal to get"
          }
        }
      },
      "signals_last_tick": {
        "name": "signals_last_tick",
        "type": "array of Signal",
        "mode": "[R]",
        "doc": "The circuit network signals sent by this combinator last tick."
      }
    },
    "doc": ""
  },
  "LuaCommandProcessor": {
    "name": "LuaCommandProcessor",
    "type": "LuaCommandProcessor",
    "inherits": [],
    "properties": {
      "add_command": {
        "name": "add_command",
        "doc": "Add a command  \nThe function registered to the command is passed a table when the command is invoked. The table contains:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the command.  \ntick :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Tick the command was used.  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The player who used the command.  \nparameter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The parameter passed after the command, separated from the command by 1 space.  \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the command (case sensitive).  \nhelp :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString): The localised help message.  \nfunction :: function: The function that will be called when this command is invoked.  \n\n**Note: ** It is an error if the given command ````\nname````\nis already registered or already exists as a game command.",
        "type": "function",
        "args": {
          "function": {
            "name": "function",
            "type": "function",
            "doc": "function :: function: The function that will be called when this command is invoked."
          },
          "help": {
            "name": "help",
            "type": "LocalisedString",
            "doc": "help :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString): The localised help message."
          },
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the command (case sensitive)."
          }
        }
      },
      "commands": {
        "name": "commands",
        "type": "dictionary string → LocalisedString",
        "mode": "[R]",
        "doc": "Commands registered by scripts through ````\nLuaCommandProcessor````"
      },
      "game_commands": {
        "name": "game_commands",
        "type": "dictionary string → LocalisedString",
        "mode": "[R]",
        "doc": "Builtin commands of the core gam"
      },
      "remove_command": {
        "name": "remove_command",
        "type": "function",
        "doc": "Removes a registered comma    \n\n**Parameters**  \n\n**Return value**  \nIf the command was removed. ````\nFalse````\nif the command didn't exist.",
        "returns": "boolean",
        "args": {
          "undefined": {
            "doc": ""
          }
        }
      }
    },
    "doc": "Custom game console commands. These don't persist through save and load; instead, scripts are expected to\n re-register their commands in LuaBootstrap::on_load."
  },
  "LuaConstantCombinatorControlBehavior": {
    "name": "LuaConstantCombinatorControlBehavior",
    "type": "LuaConstantCombinatorControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "enabled": {
        "name": "enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Turns this constant combinator on and of"
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "get_signal": {
        "name": "get_signal",
        "type": "function",
        "doc": "Gets the signal at the given index. Returned [Signal](http://lua-api.factorio.com/latest/Concepts.html#Signal) will not contain signal if none is set for the inde    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "returns": "Signal",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "parameters": {
        "name": "parameters",
        "type": "ConstantCombinatorParameters",
        "mode": "[RW]",
        "doc": "The constant combinator paramete    \n\n**Note: ** ````\nparameters````\nmay be ````\nnil````\nin order to clear the parameters.  \n\n**Example**  \nbehavior.parameters = {parameters = new_parameter"
      },
      "set_signal": {
        "name": "set_signal",
        "doc": "Sets the signal at the given ind    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nsignal :: [Signal](http://lua-api.factorio.com/latest/Concepts.html#Signal)",
        "type": "function",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          },
          "signal": {
            "name": "signal",
            "type": "Signal",
            "doc": "signal :: [Signal](http://lua-api.factorio.com/latest/Concepts.html#Signal)"
          }
        }
      },
      "signals_count": {
        "name": "signals_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "The number of signals this constant combinator suppor"
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for constant combinators."
  },
  "LuaContainerControlBehavior": {
    "name": "LuaContainerControlBehavior",
    "type": "LuaContainerControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for container entities."
  },
  "LuaControl": {
    "name": "LuaControl",
    "type": "LuaControl",
    "inherits": [],
    "properties": {
      "auto_trash_filters": {
        "name": "auto_trash_filters",
        "type": "dictionary string → uint",
        "mode": "[RW]",
        "doc": "The auto-trash filters. The keys are item prototype names, the values are the slot values.   \n\n**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character)).  \n\n**Example**  \nThis will set the auto-trash slots to keep only at most 20 iron plates and 42 copper wires in the player  \ninventor    \n````\ngame.player.auto_trash_filters = {[\"iron-plate\"] = 20, [\"copper-cable\"] = 42}````"
      },
      "begin_crafting": {
        "name": "begin_crafting",
        "type": "function",
        "doc": "Begins crafting the given count of the given recip    \n\n**Parameters**  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to craft.  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe to craft.  \nsilent :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If false and the recipe can't be crafted the requested number of times printing the failure is skipped.  \n\n**Return value**  \nThe count that was actually started crafting.",
        "returns": "uint",
        "args": {
          "count": {
            "name": "count",
            "type": "uint",
            "doc": "count :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to craft.  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe to craft.  \nsilent :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If false and the recipe can't be crafted the requested number of times printing the failure is skipped."
          }
        }
      },
      "build_distance": {
        "name": "build_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "The build distance of this character or max uint when not a character or player connected to a characte"
      },
      "can_insert": {
        "name": "can_insert",
        "type": "function",
        "doc": "Can at least some items be inserted?   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items that would be inserted.  \n\n**Return value**  \n````\ntrue````\nif at least a part of the given items could be inserted into this inventory.",
        "returns": "boolean",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items that would be inserted."
          }
        }
      },
      "can_reach_entity": {
        "name": "can_reach_entity",
        "type": "function",
        "doc": "Can a given entity be opened or accessed?   \n\n**Parameters**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)",
        "returns": "boolean",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          }
        }
      },
      "cancel_crafting": {
        "name": "cancel_crafting",
        "doc": "Cancels crafting the given count of the given crafting queue index   \n\n**Parameters**  \noptions: :   \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The crafting queue index.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to cancel crafting.",
        "type": "function",
        "args": {
          "options": {
            "name": "options",
            "type": "uint",
            "doc": "options: :   \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The crafting queue index.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to cancel crafting."
          }
        }
      },
      "character_additional_mining_categories": {
        "name": "character_additional_mining_categories",
        "type": "array of string",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_build_distance_bonus": {
        "name": "character_build_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_crafting_speed_modifier": {
        "name": "character_crafting_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_health_bonus": {
        "name": "character_health_bonus",
        "type": "float",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_inventory_slots_bonus": {
        "name": "character_inventory_slots_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_item_drop_distance_bonus": {
        "name": "character_item_drop_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_item_pickup_distance_bonus": {
        "name": "character_item_pickup_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_logistic_slot_count_bonus": {
        "name": "character_logistic_slot_count_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_loot_pickup_distance_bonus": {
        "name": "character_loot_pickup_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_maximum_following_robot_count_bonus": {
        "name": "character_maximum_following_robot_count_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_mining_speed_modifier": {
        "name": "character_mining_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_reach_distance_bonus": {
        "name": "character_reach_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_resource_reach_distance_bonus": {
        "name": "character_resource_reach_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_running_speed": {
        "name": "character_running_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "Gets the current movement speed of this character, including effects from exoskeletons, tiles, stickers and shootin"
      },
      "character_running_speed_modifier": {
        "name": "character_running_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_trash_slot_count_bonus": {
        "name": "character_trash_slot_count_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "cheat_mode": {
        "name": "cheat_mode",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "When ````\ntrue````\nhand crafting is free and instant"
      },
      "clear_gui_arrow": {
        "name": "clear_gui_arrow",
        "doc": "Removes the arrow created by ````\nset_gui_arrow````\n.",
        "type": "function"
      },
      "clear_items_inside": {
        "name": "clear_items_inside",
        "doc": "Remove all items from this entity.",
        "type": "function"
      },
      "clear_selected_entity": {
        "name": "clear_selected_entity",
        "doc": "Unselect any selected entity.",
        "type": "function"
      },
      "crafting_queue": {
        "name": "crafting_queue",
        "mode": "[R]",
        "doc": "Gets the current crafting queue items. Each CraftingQueueItem is a table:   \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The crafting queue index  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The recipe.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count being crafted.",
        "type": "array of CraftingQueueItem"
      },
      "crafting_queue_size": {
        "name": "crafting_queue_size",
        "type": "uint",
        "mode": "[R]",
        "doc": "Size of the crafting queue."
      },
      "cursor_ghost": {
        "name": "cursor_ghost",
        "type": "ItemPrototypeSpecification",
        "mode": "[RW]",
        "doc": "The ghost prototype in the player's curso    \n\n**Note: ** When read, it will be a [LuaItemPrototype](http://lua-api.factorio.com/latest/LuaItemPrototype.html).  \n\n**Note: ** Items in the cursor stack will take priority over the cursor ghost."
      },
      "cursor_stack": {
        "name": "cursor_stack",
        "type": "LuaItemStack",
        "mode": "[R]",
        "doc": "The player's cursor stack."
      },
      "disable_flashlight": {
        "name": "disable_flashlight",
        "doc": "Disable the flashlight.",
        "type": "function"
      },
      "driving": {
        "name": "driving",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the player is in a vehicle. Writing to this attribute puts the player in or out of  \nvehicle."
      },
      "drop_item_distance": {
        "name": "drop_item_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "The item drop distance of this character or max uint when not a character or player connected to a characte"
      },
      "enable_flashlight": {
        "name": "enable_flashlight",
        "doc": "Enable the flashlight.",
        "type": "function"
      },
      "following_robots": {
        "name": "following_robots",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "The current combat robots following the charact    \n\n**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character(see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "force": {
        "name": "force",
        "type": "ForceSpecification",
        "mode": "[RW]",
        "doc": "The force of this entity. Reading will always give a [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html), but it is possible   \nassign either [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) to this attribute to change the forc"
      },
      "get_craftable_count": {
        "name": "get_craftable_count",
        "type": "function",
        "doc": "Gets the count of the given recipe that can be crafted    \n\n**Parameters**  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe.  \n\n**Return value**  \nThe count that can be crafted.",
        "returns": "uint",
        "args": {
          "recipe": {
            "name": "recipe",
            "type": "string or LuaRecipe",
            "doc": "recipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe."
          }
        }
      },
      "get_inventory": {
        "name": "get_inventory",
        "type": "function",
        "doc": "Get an inventory belonging to this entity. This can be either the \"main\" inventory or some auxilia  \none, like the module slots or logistic trash slot    \n\n**Parameters**  \ninventory :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \n\n**Return value**  \nor ````\nnil````\nif this entity doesn't have an inventory with the given index.  \n\n**Note: ** A given [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory) is only meaningful for the corresponding LuaObject type. EG: get_inventory(defines.inventory.character_main) is only meaningful if 'this' is a player character. You may get a value back but if the type of 'this' isn't the type referred to by the [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory) it's almost guaranteed to not be the inventory asked for.",
        "returns": "LuaInventory",
        "args": {
          "inventory": {
            "name": "inventory",
            "type": "defines.inventory",
            "doc": "inventory :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)"
          }
        }
      },
      "get_item_count": {
        "name": "get_item_count",
        "type": "function",
        "doc": "Get the number of all or some items in this entity.   \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items.",
        "returns": "uint",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items."
          }
        }
      },
      "get_main_inventory": {
        "name": "get_main_inventory",
        "type": "function",
        "doc": "Gets the main inventory for this character or player if this is a character or player.   \n\n**Return value**  \nor ````\nnil````\nif this entity is not a character or player.",
        "returns": "LuaInventory"
      },
      "has_items_inside": {
        "name": "has_items_inside",
        "type": "function",
        "doc": "Does this entity have any item inside it?",
        "returns": "boolean"
      },
      "in_combat": {
        "name": "in_combat",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this character entity is in comba"
      },
      "insert": {
        "name": "insert",
        "type": "function",
        "doc": "Insert items into this entity. This works the same way as inserters or shift-clicking: the \"bes  \ninventory is chosen automatically.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert.  \n\n**Return value**  \nNumber of items actually inserted.",
        "returns": "uint",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert."
          }
        }
      },
      "is_player": {
        "name": "is_player",
        "type": "function",
        "doc": "When ````\ntrue````\ncontrol adapter is a LuaPlayer object, ````\nfalse````\nfor entities including characters with players",
        "returns": "boolean"
      },
      "item_pickup_distance": {
        "name": "item_pickup_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The item pickup distance of this character or max double when not a character or player connected to a characte"
      },
      "loot_pickup_distance": {
        "name": "loot_pickup_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The loot pickup distance of this character or max double when not a character or player connected to a characte"
      },
      "mine_entity": {
        "name": "mine_entity",
        "type": "function",
        "doc": "Mines the given entity as if this player (or character) mined i    \n\n**Parameters**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity to mine  \nforce :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Forces mining the entity even if the items can't fit in the player.  \n\n**Return value**  \nIf the mining succeeded.",
        "returns": "boolean",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity to mine"
          },
          "force": {
            "name": "force",
            "type": "boolean",
            "doc": "force :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Forces mining the entity even if the items can't fit in the player."
          }
        }
      },
      "mine_tile": {
        "name": "mine_tile",
        "type": "function",
        "doc": "Mines the given tile as if this player (or character) mined i    \n\n**Parameters**  \ntile :: [LuaTile](http://lua-api.factorio.com/latest/LuaTile.html): The tile to mine.  \n\n**Return value**  \nIf the mining succeeded.",
        "returns": "boolean",
        "args": {
          "tile": {
            "name": "tile",
            "type": "LuaTile",
            "doc": "tile :: [LuaTile](http://lua-api.factorio.com/latest/LuaTile.html): The tile to mine."
          }
        }
      },
      "mining_state": {
        "name": "mining_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current mining stat  \nIt is a table with two fields:   \nmining :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Whether the player is mining at all  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): What tiles the player is mining; only used when the player is mining tiles (holding a tile in the cursor).  \n\n**Note: ** When the player isn't mining tiles the player will mine what ever entity is currently selected. See [LuaControl::selected](http://lua-api.factorio.com/latest/LuaControl.html#LuaControl.selected) and [LuaControl::update_selected_entity](http://lua-api.factorio.com/latest/LuaControl.html#LuaControl.update_selected_entity)."
      },
      "open_technology_gui": {
        "name": "open_technology_gui",
        "doc": "Open the technology GUI and select a given technolog    \n\n**Parameters**  \ntechnology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional): The technology to select after opening the GUI.",
        "type": "function",
        "args": {
          "technology": {
            "name": "technology",
            "type": "TechnologySpecification",
            "doc": "technology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional): The technology to select after opening the GUI."
          }
        }
      },
      "opened": {
        "name": "opened",
        "type": "LuaEntity or LuaItemStack or LuaEquipment or LuaEquipmentGrid or LuaPlayer or LuaGuiElement or defines.gui_type",
        "mode": "[RW]",
        "doc": "The GUI target the player currently has open; ````\nnil````\nif non    \n\n**Note: ** Write supports any of the types. Read will return the entity, equipment, element or nil."
      },
      "opened_gui_type": {
        "name": "opened_gui_type",
        "type": "defines.gui_type",
        "mode": "[R]",
        "doc": "Returns the [defines.gui_type](http://lua-api.factorio.com/latest/defines.html#defines.gui_type) or ````\nnil````\n."
      },
      "picking_state": {
        "name": "picking_state",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Current item-picking stat"
      },
      "position": {
        "name": "position",
        "type": "Position",
        "mode": "[R]",
        "doc": "Current position of the entity."
      },
      "reach_distance": {
        "name": "reach_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "The reach distance of this character or max uint when not a character or player connected to a characte"
      },
      "remove_item": {
        "name": "remove_item",
        "type": "function",
        "doc": "Remove items from this entity.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove.  \n\n**Return value**  \nNumber of items actually removed.",
        "returns": "uint",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove."
          }
        }
      },
      "repair_state": {
        "name": "repair_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current repair stat  \nIt is a table with two fields:   \nrepairing :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): The current state  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position being repaired"
      },
      "resource_reach_distance": {
        "name": "resource_reach_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The resource reach distance of this character or max double when not a character or player connected to a characte"
      },
      "riding_state": {
        "name": "riding_state",
        "type": "RidingState",
        "mode": "[RW]",
        "doc": "Current riding state of this car or the vehicle this player is riding i"
      },
      "selected": {
        "name": "selected",
        "type": "LuaEntity",
        "mode": "[RW]",
        "doc": "The currently selected entity; ````\nnil````\nif none. Assigning an entity will select it if selectable otherwise clears selection."
      },
      "set_gui_arrow": {
        "name": "set_gui_arrow",
        "doc": "Create an arrow which points at this entity. This is used in the tutorial. For examples, see ````\ncontrol.lua````  \nin the campaign missions.   \n\n**Parameters**  \nTable with the following fields:   \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Where to point to. This field determines what other fields are mandator  \nMay be ````\n\"nowhere\"````\n, ````\n\"goal\"````\n, ````\n\"entity_info\"````\n, ````\n\"active_window\"````\n, ````\n\"entity\"````\n, ````\n\"position\"````  \n````\n\"crafting_queue\"````\n, or ````\n\"item_stack\"````\n.  \nAdditional ````\ntype````\n-specific parameters  \nentity  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nposition  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \ncrafting_queue  \ncrafting_queueindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nitem_stack  \ninventory_index :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \nitem_stack_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nsource :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): May be either ````\n\"player\"````\nor ````\n\"target\"````\n.",
        "type": "function",
        "args": {
          "type": {
            "name": "type",
            "type": "string",
            "doc": "Table with the following fields:   \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Where to point to. This field determines what other fields are mandator  \nMay be ````\n\"nowhere\"````\n, ````\n\"goal\"````\n, ````\n\"entity_info\"````\n, ````\n\"active_window\"````\n, ````\n\"entity\"````\n, ````\n\"position\"````  \n````\n\"crafting_queue\"````\n, or ````\n\"item_stack\"````\n.  \nAdditional ````\ntype````\n-specific parameters  \nentity  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nposition  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \ncrafting_queue  \ncrafting_queueindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nitem_stack  \ninventory_index :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \nitem_stack_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nsource :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): May be either ````\n\"player\"````\nor ````\n\"target\"````\n."
          }
        }
      },
      "shooting_state": {
        "name": "shooting_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current shooting stat  \nIt is a table with two fields:   \nstate :: [defines.shooting](http://lua-api.factorio.com/latest/defines.html#defines.shooting): The current state  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position being shot at"
      },
      "surface": {
        "name": "surface",
        "type": "LuaSurface",
        "mode": "[R]",
        "doc": "The surface this entity is currently on."
      },
      "teleport": {
        "name": "teleport",
        "type": "function",
        "doc": "Teleport the entity to a given position, possibly on another surface    \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to teleport to.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Surface to teleport to. If not given, will telepo  \nto the entity's current surface.  \n\n**Return value**  \n````\ntrue````\nwhen the entity was successfully teleported.  \n\n**Note: ** Some entities may not be teleported. For instance, rail signa  \nwon't allow teleportation and this method will always return ````\nfalse````\nwhen used on any such entity.  \n\n**Note: ** You can also pass 1 or 2 numbers as the parameters and they will be used as relative teleport coordinat  \n````\n'teleport(0, 1)'````\nto move the entity 1 tile positive   \n````\n'teleport(4)'````\nto move the entity 4 tiles to the positive x.",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to teleport to."
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Surface to teleport to. If not given, will telepo  \nto the entity's current surface."
          }
        }
      },
      "update_selected_entity": {
        "name": "update_selected_entity",
        "doc": "Select an entity, as if by hovering the mouse above it.   \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position of the entity to select",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position of the entity to select"
          }
        }
      },
      "vehicle": {
        "name": "vehicle",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The vehicle the player is currently sitting in; ````\nnil````\nif none."
      },
      "walking_state": {
        "name": "walking_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current walking stat  \nIt is a table with two fields:   \nwalking :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If ````\nfalse````\n, the player is currently not walking; otherwise it's going somewhere  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction): Direction where the player is walking  \n\n**Example**  \nMake the player go north. Note that a one-shot action like this will only make the player walk for one tic    \n````\ngame.player.walking_state = {walking = true, direction = defines.direction.north}````"
      }
    },
    "doc": "This is an abstract base class containing the common functionality between LuaPlayer and character entities\n (see LuaEntity). When accessing these members through a LuaEntity, it must refer to a character\n entity."
  },
  "LuaControlBehavior": {
    "name": "LuaControlBehavior",
    "type": "LuaControlBehavior",
    "inherits": [],
    "properties": {
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      }
    },
    "doc": "The control behavior for an entity. Inserters have logistic network and circuit network behavior logic, lamps have circuit logic and so on. This is an abstract base class that concrete control behaviors inherit."
  },
  "LuaCustomChartTag": {
    "name": "LuaCustomChartTag",
    "type": "LuaCustomChartTag",
    "inherits": [],
    "properties": {
      "destroy": {
        "name": "destroy",
        "doc": "Destroys this tag.",
        "type": "function"
      },
      "force": {
        "name": "force",
        "type": "LuaForce",
        "mode": "[R]",
        "doc": "The force this tag belongs t"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "icon": {
        "name": "icon",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "last_user": {
        "name": "last_user",
        "type": "LuaPlayer",
        "mode": "[RW]",
        "doc": "The player who last edited this ta"
      },
      "position": {
        "name": "position",
        "type": "Position",
        "mode": "[R]",
        "doc": "The position of this ta"
      },
      "surface": {
        "name": "surface",
        "type": "LuaSurface",
        "mode": "[R]",
        "doc": "The surface this tag belongs t"
      },
      "tag_number": {
        "name": "tag_number",
        "type": "uint",
        "mode": "[R]",
        "doc": "The unique ID for this tag on this forc"
      },
      "text": {
        "name": "text",
        "type": "string",
        "mode": "[RW]"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "A custom tag that shows on the map view."
  },
  "LuaCustomInputPrototype": {
    "name": "LuaCustomInputPrototype",
    "type": "LuaCustomInputPrototype",
    "inherits": [],
    "properties": {
      "alternative_key_sequence": {
        "name": "alternative_key_sequence",
        "type": "string",
        "mode": "[R]",
        "doc": "The default alternative key sequence for this custom input. ````\nnil````\nwhen not define"
      },
      "consuming": {
        "name": "consuming",
        "type": "string",
        "mode": "[R]",
        "doc": "The consuming type: ````\n\"none\"````\nor ````\n\"game-only\"````"
      },
      "enabled": {
        "name": "enabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this custom input is enabled. Disabled custom inputs exist but are not used by the gam"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "key_sequence": {
        "name": "key_sequence",
        "type": "string",
        "mode": "[R]",
        "doc": "The default key sequence for this custom inpu"
      },
      "linked_game_control": {
        "name": "linked_game_control",
        "type": "string",
        "mode": "[R]",
        "doc": "The linked game control name or ````\nnil````"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Prototype of a custom input."
  },
  "LuaCustomTable": {
    "name": "LuaCustomTable",
    "type": "LuaCustomTable",
    "inherits": [],
    "properties": {
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "operator []": {
        "name": "operator []",
        "mode": "[RW]",
        "doc": "Access an element of this custom table."
      },
      "operator #": {
        "name": "operator #",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of elements in this table."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Lazily evaluated table.\n For performance reasons, we sometimes return a custom table-like type instead of a native Lua table. This custom\n type lazily constructs the necessary Lua wrappers of the corresponding C++ objects, therefore preventing their\n unnecessary construction in some cases."
  },
  "LuaDamagePrototype": {
    "name": "LuaDamagePrototype",
    "type": "LuaDamagePrototype",
    "inherits": [],
    "properties": {
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "hidden": {
        "name": "hidden",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Whether this damage type is hidden from entity tooltip"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Prototype of a damage."
  },
  "LuaDeciderCombinatorControlBehavior": {
    "name": "LuaDeciderCombinatorControlBehavior",
    "type": "LuaDeciderCombinatorControlBehavior",
    "inherits": [
      "Inherited from LuaCombinatorControlBehavior: get_signal_last_tick, signals_last_tick",
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "get_signal_last_tick": {
        "name": "get_signal_last_tick",
        "type": "function",
        "doc": "Gets the value of a specific signal sent by this combinator behavior last tick or nil if the signal didn't exis    \n\n**Parameters**  \nsignal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID): The signal to get  \n\n**Return value**  \nThe value or ````\nnil````\nif none.",
        "returns": "int",
        "args": {
          "signal": {
            "name": "signal",
            "type": "SignalID",
            "doc": "signal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID): The signal to get"
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "parameters": {
        "name": "parameters",
        "type": "DeciderCombinatorParameters",
        "mode": "[RW]",
        "doc": "The decider combinator parameters   \n\n**Note: ** ````\nparameters````\nmay be ````\nnil````\nin order to clear the parameters."
      },
      "signals_last_tick": {
        "name": "signals_last_tick",
        "type": "array of Signal",
        "mode": "[R]",
        "doc": "The circuit network signals sent by this combinator last tick."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for decider combinators."
  },
  "LuaDecorativePrototype": {
    "name": "LuaDecorativePrototype",
    "type": "LuaDecorativePrototype",
    "inherits": [],
    "properties": {
      "autoplace_specification": {
        "name": "autoplace_specification",
        "type": "AutoplaceSpecification",
        "mode": "[R]",
        "doc": "Autoplace specification for this decorative prototype. ````\nnil````\nif non"
      },
      "collision_box": {
        "name": "collision_box",
        "type": "BoundingBox",
        "mode": "[R]",
        "doc": "The bounding box used for collision checking."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Prototype of an optimized decorative."
  },
  "LuaElectricEnergySourcePrototype": {
    "name": "LuaElectricEnergySourcePrototype",
    "type": "LuaElectricEnergySourcePrototype",
    "inherits": [],
    "properties": {
      "buffer_capacity": {
        "name": "buffer_capacity",
        "type": "double",
        "mode": "[R]"
      },
      "drain": {
        "name": "drain",
        "type": "double",
        "mode": "[R]"
      },
      "emissions": {
        "name": "emissions",
        "type": "double",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "input_flow_limit": {
        "name": "input_flow_limit",
        "type": "double",
        "mode": "[R]"
      },
      "output_flow_limit": {
        "name": "output_flow_limit",
        "type": "double",
        "mode": "[R]"
      },
      "render_no_network_icon": {
        "name": "render_no_network_icon",
        "type": "boolean",
        "mode": "[R]"
      },
      "render_no_power_icon": {
        "name": "render_no_power_icon",
        "type": "boolean",
        "mode": "[R]"
      },
      "usage_priority": {
        "name": "usage_priority",
        "type": "string",
        "mode": "[R]"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Prototype of an electric energy source."
  },
  "LuaEntity": {
    "name": "LuaEntity",
    "type": "LuaEntity",
    "inherits": [
      "Inherited from LuaControl: get_inventory, get_main_inventory, can_insert, insert, set_gui_arrow, clear_gui_arrow, get_item_count, has_items_inside, can_reach_entity, clear_items_inside, remove_item, teleport, update_selected_entity, clear_selected_entity, disable_flashlight, enable_flashlight, get_craftable_count, begin_crafting, cancel_crafting, mine_entity, mine_tile, is_player, open_technology_gui, surface, position, vehicle, force, selected, opened, crafting_queue_size, walking_state, riding_state, mining_state, shooting_state, picking_state, repair_state, cursor_stack, cursor_ghost, driving, crafting_queue, following_robots, cheat_mode, character_crafting_speed_modifier, character_mining_speed_modifier, character_additional_mining_categories, character_running_speed_modifier, character_build_distance_bonus, character_item_drop_distance_bonus, character_reach_distance_bonus, character_resource_reach_distance_bonus, character_item_pickup_distance_bonus, character_loot_pickup_distance_bonus, character_inventory_slots_bonus, character_logistic_slot_count_bonus, character_trash_slot_count_bonus, character_maximum_following_robot_count_bonus, character_health_bonus, auto_trash_filters, opened_gui_type, build_distance, drop_item_distance, reach_distance, item_pickup_distance, loot_pickup_distance, resource_reach_distance, in_combat, character_running_speed"
    ],
    "properties": {
      "active": {
        "name": "active",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Deactivating an entity will stop all its operations (car will stop moving, inserte  \nwill stop working, fish will stop moving etc)    \n\n**Note: ** Entities that are not active naturally can't be set to be active (setti  \nit to be active will do nothing)  \n\n**Note: ** Ghosts, simple smoke, and corpses can't be modified at this time.  \n\n**Note: ** It is even possible to set the character to not be active, so he can't move a  \nperform most of the tasks."
      },
      "add_market_item": {
        "name": "add_market_item",
        "doc": "Offer a thing on the marke    \n\n**Parameters**  \noffer :: [Offer](http://lua-api.factorio.com/latest/Concepts.html#Offer)  \n\n**Example**  \nAdds market offer, 1 copper ore for 10 iron or    \n````\nmarket.add_market_item{price={{\"iron-ore\", 10}}, offer={type=\"give-item\", item=\"copper-ore\"}}````  \n\n**Example**  \nAdds market offer, 1 copper ore for 5 iron ore and 5 stone or    \n````\nmarket.add_market_item{price={{\"iron-ore\", 5}, {\"stone\", 5}}, offer={type=\"give-item\", item=\"copper-ore\"}}````  \n_Can only be used if this is Market_",
        "type": "function",
        "args": {
          "offer": {
            "name": "offer",
            "type": "Offer",
            "doc": "offer :: [Offer](http://lua-api.factorio.com/latest/Concepts.html#Offer)"
          }
        }
      },
      "ai_settings": {
        "name": "ai_settings",
        "type": "LuaAISettings",
        "mode": "[R]",
        "doc": "The ai settings of this uni    \n_Can only be used if this is Unit_"
      },
      "alert_parameters": {
        "name": "alert_parameters",
        "type": "ProgrammableSpeakerAlertParameters",
        "mode": "[RW]",
        "doc": "_Can only be used if this is ProgrammableSpeaker_"
      },
      "allow_dispatching_robots": {
        "name": "allow_dispatching_robots",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Whether this character's personal roboports are allowed to dispatch robot    \n_Can only be used if this is Character_"
      },
      "amount": {
        "name": "amount",
        "type": "uint",
        "mode": "[RW]",
        "doc": "Count of resource units containe    \n_Can only be used if this is ResourceEntity_"
      },
      "armed": {
        "name": "armed",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this land mine is arme    \n_Can only be used if this is LandMine_"
      },
      "associated_player": {
        "name": "associated_player",
        "type": "LuaPlayer",
        "mode": "[RW]",
        "doc": "The player this character is associated with or ````\nnil````\nif non  \nWhen the player logs off in multiplayer all of the associated characters will be logged off with hi    \n\n**Note: ** A character associated with a player is not directly controlled by any player.  \n\n**Note: ** Set to ````\nnil````\nto clear. The player will be automatically disassociated when a controller is set on the character.  \n_Can only be used if this is Character_"
      },
      "auto_launch": {
        "name": "auto_launch",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Whether this rocket silo automatically launches the rocket when cargo is inserte    \n_Can only be used if this is RocketSilo_"
      },
      "auto_trash_filters": {
        "name": "auto_trash_filters",
        "type": "dictionary string → uint",
        "mode": "[RW]",
        "doc": "The auto-trash filters. The keys are item prototype names, the values are the slot values.   \n\n**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character)).  \n\n**Example**  \nThis will set the auto-trash slots to keep only at most 20 iron plates and 42 copper wires in the player  \ninventor    \n````\ngame.player.auto_trash_filters = {[\"iron-plate\"] = 20, [\"copper-cable\"] = 42}````"
      },
      "backer_name": {
        "name": "backer_name",
        "type": "string",
        "mode": "[RW]",
        "doc": "The name of a backer (of Factorio) assigned to a lab or train station / sto    \n\n**Note: ** Only useable on entities that support backer names. Returns ````\nnil````\nwhen the entity doesn't support a backer name."
      },
      "begin_crafting": {
        "name": "begin_crafting",
        "type": "function",
        "doc": "Begins crafting the given count of the given recip    \n\n**Parameters**  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to craft.  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe to craft.  \nsilent :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If false and the recipe can't be crafted the requested number of times printing the failure is skipped.  \n\n**Return value**  \nThe count that was actually started crafting.",
        "returns": "uint",
        "args": {
          "count": {
            "name": "count",
            "type": "uint",
            "doc": "count :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to craft.  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe to craft.  \nsilent :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If false and the recipe can't be crafted the requested number of times printing the failure is skipped."
          }
        }
      },
      "belt_to_ground_type": {
        "name": "belt_to_ground_type",
        "type": "string",
        "mode": "[R]",
        "doc": "````\n\"input\"````\nor ````\n\"output\"````\n, depending on whether this underground belt goes down or u    \n_Can only be used if this is TransportBeltToGround_"
      },
      "bonus_mining_progress": {
        "name": "bonus_mining_progress",
        "type": "double",
        "mode": "[RW]",
        "doc": "The bonus mining progress for this mining drill or ````\nnil````\nif this isn't a mining drill. Read yields a number in range [0, mining_target.prototype.mineable_properties.mining_tim"
      },
      "bonus_progress": {
        "name": "bonus_progress",
        "type": "double",
        "mode": "[RW]",
        "doc": "The current productivity bonus progress, as a number in range [0, 1    \n_Can only be used if this is CraftingMachine_"
      },
      "bounding_box": {
        "name": "bounding_box",
        "type": "BoundingBox",
        "mode": "[R]"
      },
      "build_distance": {
        "name": "build_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "The build distance of this character or max uint when not a character or player connected to a characte"
      },
      "burner": {
        "name": "burner",
        "type": "LuaBurner",
        "mode": "[R]",
        "doc": "The burner energy source for this entity or ````\nnil````\nif there isn't on"
      },
      "can_be_destroyed": {
        "name": "can_be_destroyed",
        "type": "function",
        "doc": "Checks if the entity can be destroy    \n\n**Return value**  \nif the entity can be destroyed.",
        "returns": "boolean"
      },
      "can_insert": {
        "name": "can_insert",
        "type": "function",
        "doc": "Can at least some items be inserted?   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items that would be inserted.  \n\n**Return value**  \n````\ntrue````\nif at least a part of the given items could be inserted into this inventory.",
        "returns": "boolean",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items that would be inserted."
          }
        }
      },
      "can_reach_entity": {
        "name": "can_reach_entity",
        "type": "function",
        "doc": "Can a given entity be opened or accessed?   \n\n**Parameters**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)",
        "returns": "boolean",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          }
        }
      },
      "cancel_crafting": {
        "name": "cancel_crafting",
        "doc": "Cancels crafting the given count of the given crafting queue index   \n\n**Parameters**  \noptions: :   \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The crafting queue index.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to cancel crafting.",
        "type": "function",
        "args": {
          "options": {
            "name": "options",
            "type": "uint",
            "doc": "options: :   \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The crafting queue index.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to cancel crafting."
          }
        }
      },
      "cancel_deconstruction": {
        "name": "cancel_deconstruction",
        "doc": "Cancels deconstruction if it is scheduled, does nothing otherwis    \n\n**Parameters**  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force who did the deconstruction order.  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any.",
        "type": "function",
        "args": {
          "force": {
            "name": "force",
            "type": "ForceSpecification",
            "doc": "force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force who did the deconstruction order."
          },
          "player": {
            "name": "player",
            "type": "PlayerSpecification",
            "doc": "player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any."
          }
        }
      },
      "cancel_upgrade": {
        "name": "cancel_upgrade",
        "type": "function",
        "doc": "Cancels upgrade if it is scheduled, does nothing otherwis    \n\n**Parameters**  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force who did the upgrade order.  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any.  \n\n**Return value**  \nIf the cancel was successful.",
        "returns": "boolean",
        "args": {
          "force": {
            "name": "force",
            "type": "ForceSpecification",
            "doc": "force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force who did the upgrade order."
          },
          "player": {
            "name": "player",
            "type": "PlayerSpecification",
            "doc": "player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any."
          }
        }
      },
      "chain_signal_state": {
        "name": "chain_signal_state",
        "type": "defines.chain_signal_state",
        "mode": "[R]",
        "doc": "The state of this chain signa    \n_Can only be used if this is RailChainSignal_"
      },
      "character_additional_mining_categories": {
        "name": "character_additional_mining_categories",
        "type": "array of string",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_build_distance_bonus": {
        "name": "character_build_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_corpse_death_cause": {
        "name": "character_corpse_death_cause",
        "type": "LocalisedString",
        "mode": "[RW]",
        "doc": "The reason this character corpse character died (if any    \n_Can only be used if this is CharacterCorpse_"
      },
      "character_corpse_player_index": {
        "name": "character_corpse_player_index",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The player index associated with this character corps    \n\n**Note: ** The index is not guaranteed to be valid so it should always be checked first if a player with that index actually exists.  \n_Can only be used if this is CharacterCorpse_"
      },
      "character_corpse_tick_of_death": {
        "name": "character_corpse_tick_of_death",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The tick this character corpse died a    \n_Can only be used if this is CharacterCorpse_"
      },
      "character_crafting_speed_modifier": {
        "name": "character_crafting_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_health_bonus": {
        "name": "character_health_bonus",
        "type": "float",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_inventory_slots_bonus": {
        "name": "character_inventory_slots_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_item_drop_distance_bonus": {
        "name": "character_item_drop_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_item_pickup_distance_bonus": {
        "name": "character_item_pickup_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_logistic_slot_count_bonus": {
        "name": "character_logistic_slot_count_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_loot_pickup_distance_bonus": {
        "name": "character_loot_pickup_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_maximum_following_robot_count_bonus": {
        "name": "character_maximum_following_robot_count_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_mining_speed_modifier": {
        "name": "character_mining_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_reach_distance_bonus": {
        "name": "character_reach_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_resource_reach_distance_bonus": {
        "name": "character_resource_reach_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_running_speed": {
        "name": "character_running_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "Gets the current movement speed of this character, including effects from exoskeletons, tiles, stickers and shootin"
      },
      "character_running_speed_modifier": {
        "name": "character_running_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_trash_slot_count_bonus": {
        "name": "character_trash_slot_count_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "cheat_mode": {
        "name": "cheat_mode",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "When ````\ntrue````\nhand crafting is free and instant"
      },
      "circuit_connected_entities": {
        "name": "circuit_connected_entities",
        "type": "table",
        "mode": "[R]",
        "doc": "Entities connected to this entity via the circuit networ  \nIt is a table:   \nred :: array of [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): Entities connected via the red wire.  \ngreen :: array of [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): Entities connected via the green wire."
      },
      "circuit_connection_definitions": {
        "name": "circuit_connection_definitions",
        "mode": "[R]",
        "doc": "The connection definition for entities connected to this entity via the circuit networ  \nEach CircuitConnectionDefinition is a table:   \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color, either [defines.wire_type.red](http://lua-api.factorio.com/latest/defines.html#defines.wire_type.red)   \n[defines.wire_type.green](http://lua-api.factorio.com/latest/defines.html#defines.wire_type.green).  \ntarget_entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nsource_circuit_id :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \ntarget_circuit_id :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "array of CircuitConnectionDefinition"
      },
      "clear_fluid_inside": {
        "name": "clear_fluid_inside",
        "doc": "Remove all fluids from this entity.",
        "type": "function"
      },
      "clear_gui_arrow": {
        "name": "clear_gui_arrow",
        "doc": "Removes the arrow created by ````\nset_gui_arrow````\n.",
        "type": "function"
      },
      "clear_items_inside": {
        "name": "clear_items_inside",
        "doc": "Remove all items from this entity.",
        "type": "function"
      },
      "clear_market_items": {
        "name": "clear_market_items",
        "doc": "Removes all offers from a marke    \n_Can only be used if this is Market_",
        "type": "function"
      },
      "clear_request_slot": {
        "name": "clear_request_slot",
        "doc": "Clear a logistic requester slot.   \n\n**Parameters**  \nslot :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot index.  \n\n**Note: ** Useable only on entities that have requester slots.",
        "type": "function",
        "args": {
          "slot": {
            "name": "slot",
            "type": "uint",
            "doc": "slot :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot index."
          }
        }
      },
      "clear_selected_entity": {
        "name": "clear_selected_entity",
        "doc": "Unselect any selected entity.",
        "type": "function"
      },
      "cliff_orientation": {
        "name": "cliff_orientation",
        "type": "string",
        "mode": "[R]",
        "doc": "The orientation of this clif"
      },
      "clone": {
        "name": "clone",
        "type": "function",
        "doc": "Clones this entit    \n\n**Parameters**  \nTable with the following fields:   \nposition :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The destination position  \nsurface :: [LuaSurface](http://lua-api.factorio.com/latest/LuaSurface.html) (optional): The destination surface  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)  \n\n**Return value**  \nThe cloned entity or ````\nnil````\nif this entity can't be cloned/can't be cloned to the given location.  \n\n**Note: ** [defines.events.on_entity_cloned](http://lua-api.factorio.com/latest/defines.html#defines.events.on_entity_cloned) is raised.",
        "returns": "LuaEntity",
        "args": {
          "position": {
            "name": "position",
            "type": "LuaEntity",
            "doc": "Table with the following fields:   \nposition :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The destination position  \nsurface :: [LuaSurface](http://lua-api.factorio.com/latest/LuaSurface.html) (optional): The destination surface  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)"
          }
        }
      },
      "color": {
        "name": "color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "The character, rolling stock, train stop, flying text, or simple-entity-with-owner color. Returns ````\nnil````\nif this entity doesn't use custom color"
      },
      "connect_neighbour": {
        "name": "connect_neighbour",
        "type": "function",
        "doc": "Connect two devices with wire or cable.   \n\n**Parameters**  \ntarget :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [table](http://lua-api.factorio.com/latest/Builtin-Types.html#table)    \nTo connect two electric poles, target has to be a [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) specifying anoth  \nelectric pole. This will connect them with copper cable.  \nTo connect two devices with wire, this parameter is a tabl    \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color, either [defines.wire_type.red](http://lua-api.factorio.com/latest/defines.html#defines.wire_type.red)   \n[defines.wire_type.green](http://lua-api.factorio.com/latest/defines.html#defines.wire_type.green).  \ntarget_entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity to connect the wire to  \nsource_circuit_id :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): Mandatory if the source entity has more than o  \ncircuit connector.  \ntarget_circuit_id :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): Mandatory if the target entity has more than o  \ncircuit connector.  \n\n**Return value**  \nWhether the connection was formed.",
        "returns": "boolean",
        "args": {
          "target": {
            "name": "target",
            "type": "LuaEntity or table",
            "doc": "target :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [table](http://lua-api.factorio.com/latest/Builtin-Types.html#table)    \nTo connect two electric poles, target has to be a [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) specifying anoth  \nelectric pole. This will connect them with copper cable.  \nTo connect two devices with wire, this parameter is a tabl    \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color, either [defines.wire_type.red](http://lua-api.factorio.com/latest/defines.html#defines.wire_type.red)   \n[defines.wire_type.green](http://lua-api.factorio.com/latest/defines.html#defines.wire_type.green).  \ntarget_entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity to connect the wire to  \nsource_circuit_id :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): Mandatory if the source entity has more than o  \ncircuit connector.  \ntarget_circuit_id :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): Mandatory if the target entity has more than o  \ncircuit connector."
          }
        }
      },
      "connect_rolling_stock": {
        "name": "connect_rolling_stock",
        "type": "function",
        "doc": "Connects the rolling stock in the given directio    \n\n**Parameters**  \ndirection :: [defines.rail_direction](http://lua-api.factorio.com/latest/defines.html#defines.rail_direction)  \n\n**Return value**  \nIf any connection was made",
        "returns": "boolean",
        "args": {
          "direction": {
            "name": "direction",
            "type": "defines.rail_direction",
            "doc": "direction :: [defines.rail_direction](http://lua-api.factorio.com/latest/defines.html#defines.rail_direction)"
          }
        }
      },
      "connected_rail": {
        "name": "connected_rail",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The rail entity this train stop is connected to or ````\nnil````\nif there is non    \n_Can only be used if this is TrainStop_"
      },
      "consumption_modifier": {
        "name": "consumption_modifier",
        "type": "float",
        "mode": "[RW]",
        "doc": "Multiplies the energy consumptio    \n_Can only be used if this is Car_"
      },
      "copy_settings": {
        "name": "copy_settings",
        "type": "function",
        "doc": "Copies settings from the given entity onto this entit    \n\n**Parameters**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \n\n**Return value**  \nAny items removed from this entity as a result of copying the settings.",
        "returns": "dictionary string → uint",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          }
        }
      },
      "crafting_progress": {
        "name": "crafting_progress",
        "type": "float",
        "mode": "[RW]",
        "doc": "The current crafting progress, as a number in range [0, 1    \n_Can only be used if this is CraftingMachine_"
      },
      "crafting_queue": {
        "name": "crafting_queue",
        "mode": "[R]",
        "doc": "Gets the current crafting queue items. Each CraftingQueueItem is a table:   \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The crafting queue index  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The recipe.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count being crafted.",
        "type": "array of CraftingQueueItem"
      },
      "crafting_queue_size": {
        "name": "crafting_queue_size",
        "type": "uint",
        "mode": "[R]",
        "doc": "Size of the crafting queue."
      },
      "crafting_speed": {
        "name": "crafting_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "The current crafting speed, including speed bonuses from modules and beacon    \n_Can only be used if this is CraftingMachine_"
      },
      "create_build_effect_smoke": {
        "name": "create_build_effect_smoke",
        "doc": "Creates the same smoke that is created when you place a building by han  \nYou can play the building sound to go with it by using [LuaSurface::play_sound](http://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.play_sound), e  \nentity.surface.play_sound{path=\"entity-build/\"..entity.prototype.name, position=entity.position}",
        "type": "function"
      },
      "cursor_ghost": {
        "name": "cursor_ghost",
        "type": "ItemPrototypeSpecification",
        "mode": "[RW]",
        "doc": "The ghost prototype in the player's curso    \n\n**Note: ** When read, it will be a [LuaItemPrototype](http://lua-api.factorio.com/latest/LuaItemPrototype.html).  \n\n**Note: ** Items in the cursor stack will take priority over the cursor ghost."
      },
      "cursor_stack": {
        "name": "cursor_stack",
        "type": "LuaItemStack",
        "mode": "[R]",
        "doc": "The player's cursor stack."
      },
      "damage": {
        "name": "damage",
        "type": "function",
        "doc": "Damages the entit    \n\n**Parameters**  \ndamage :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): The amount of damage to be done  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force that will be doing the damage.  \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The type of damage to be done.  \n\n**Return value**  \nthe total damage actually applied after resistances.  \n_Can only be used if this is EntityWithHealth_",
        "returns": "float",
        "args": {
          "damage": {
            "name": "damage",
            "type": "float",
            "doc": "damage :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): The amount of damage to be done"
          },
          "force": {
            "name": "force",
            "type": "ForceSpecification",
            "doc": "force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force that will be doing the damage."
          },
          "type": {
            "name": "type",
            "type": "string",
            "doc": "type :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The type of damage to be done."
          }
        }
      },
      "damage_dealt": {
        "name": "damage_dealt",
        "type": "double",
        "mode": "[RW]",
        "doc": "The damage dealt by this turret, artillery turret, or artillery wago    \n_Can only be used if this is Turret_"
      },
      "destroy": {
        "name": "destroy",
        "type": "function",
        "doc": "Destroys the entit    \n\n**Parameters**  \nopts (optional): Table with the following fields:   \ndo_cliff_correction :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If neighbouring cliffs should be corrected. Defaults to false.  \nraise_destroy :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If true; [defines.events.script_raised_destroy](http://lua-api.factorio.com/latest/defines.html#defines.events.script_raised_destroy) will be called.  \n\n**Return value**  \nif the entity was actually destroyed.  \n\n**Note: ** Not all entities can be destroyed - things such as rails under trains cannot be destroyed until the train is moved or destroyed.",
        "returns": "boolean",
        "args": {
          "opts": {
            "name": "opts",
            "type": "boolean",
            "doc": "opts (optional): Table with the following fields:   \ndo_cliff_correction :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If neighbouring cliffs should be corrected. Defaults to false.  \nraise_destroy :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If true; [defines.events.script_raised_destroy](http://lua-api.factorio.com/latest/defines.html#defines.events.script_raised_destroy) will be called."
          }
        }
      },
      "destructible": {
        "name": "destructible",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "When the entity is not destructible it can't be damaged    \n\n**Note: ** An indestructible entity can still be mined.  \n\n**Note: ** Entities that are indestructible naturally (they have no health, like smok  \nresource etc) can't be set to be destructible."
      },
      "die": {
        "name": "die",
        "type": "function",
        "doc": "Immediately kills the entity. Doesn't care whether the entity is destroyable or damageabl  \nDoes nothing if the entity doesn't have healt  \nUnlike [LuaEntity::destroy](http://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.destroy), die will trigger [on_entity_died](http://lua-api.factorio.com/latest/events.html#on_entity_die  \nand the entity will drop loot and corpse if it have an    \n\n**Parameters**  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force to attribute the kill to.  \ncause :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): The cause to attribute the kill to.  \n\n**Return value**  \nIf the entity was killed.  \n\n**Note: ** Pass ````\nnil````\nfor force if you just want to provide the cause entity.",
        "returns": "boolean",
        "args": {
          "cause": {
            "name": "cause",
            "type": "LuaEntity",
            "doc": "cause :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): The cause to attribute the kill to."
          },
          "force": {
            "name": "force",
            "type": "ForceSpecification",
            "doc": "force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force to attribute the kill to."
          }
        }
      },
      "direction": {
        "name": "direction",
        "type": "defines.direction",
        "mode": "[RW]",
        "doc": "The current direction this entity is facin"
      },
      "disable_flashlight": {
        "name": "disable_flashlight",
        "doc": "Disable the flashlight.",
        "type": "function"
      },
      "disconnect_neighbour": {
        "name": "disconnect_neighbour",
        "doc": "Disconnect wires or cables.   \n\n**Parameters**  \ntarget :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [table](http://lua-api.factorio.com/latest/Builtin-Types.html#table) (optional)    \nTo remove all copper cables, leave this parameter out: ````\npole.disconnect_neighbour()````  \nTo remove all wires of a specific color, pass [defines.wire_type.red](http://lua-api.factorio.com/latest/defines.html#defines.wire_type.red)   \n[defines.wire_type.green](http://lua-api.factorio.com/latest/defines.html#defines.wire_type.green).  \nTo remove a specific copper cable between two poles, target can be a [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.htm  \nspecifying the other pole. E.g. ````\npole1.disconnect_neighbour(pole2)````\n.  \nTo remove a specific red or green wire, pass a table in the same format as f  \n[LuaEntity::connect_neighbour](http://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.connect_neighbour    \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color  \ntarget_entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nsource_circuit_id :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \ntarget_circuit_id :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)",
        "type": "function",
        "args": {
          "target": {
            "name": "target",
            "type": "defines.wire_type or LuaEntity or table",
            "doc": "target :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [table](http://lua-api.factorio.com/latest/Builtin-Types.html#table) (optional)    \nTo remove all copper cables, leave this parameter out: ````\npole.disconnect_neighbour()````  \nTo remove all wires of a specific color, pass [defines.wire_type.red](http://lua-api.factorio.com/latest/defines.html#defines.wire_type.red)   \n[defines.wire_type.green](http://lua-api.factorio.com/latest/defines.html#defines.wire_type.green).  \nTo remove a specific copper cable between two poles, target can be a [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.htm  \nspecifying the other pole. E.g. ````\npole1.disconnect_neighbour(pole2)````\n.  \nTo remove a specific red or green wire, pass a table in the same format as f  \n[LuaEntity::connect_neighbour](http://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.connect_neighbour    \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color  \ntarget_entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nsource_circuit_id :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \ntarget_circuit_id :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)"
          }
        }
      },
      "disconnect_rolling_stock": {
        "name": "disconnect_rolling_stock",
        "type": "function",
        "doc": "Tries to disconnect this rolling stock in the given directio    \n\n**Parameters**  \ndirection :: [defines.rail_direction](http://lua-api.factorio.com/latest/defines.html#defines.rail_direction)  \n\n**Return value**  \nIf anything was disconnected",
        "returns": "boolean",
        "args": {
          "direction": {
            "name": "direction",
            "type": "defines.rail_direction",
            "doc": "direction :: [defines.rail_direction](http://lua-api.factorio.com/latest/defines.html#defines.rail_direction)"
          }
        }
      },
      "driving": {
        "name": "driving",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the player is in a vehicle. Writing to this attribute puts the player in or out of  \nvehicle."
      },
      "drop_item_distance": {
        "name": "drop_item_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "The item drop distance of this character or max uint when not a character or player connected to a characte"
      },
      "drop_position": {
        "name": "drop_position",
        "type": "Position",
        "mode": "[RW]",
        "doc": "Position where the entity puts its stuf    \n\n**Note: ** Meaningful only for entities that put stuff somewhere, such as mining drills or inserters. Mining drills can't have their drop position changed; inserters must have ````\nallow_custom_vectors````\nset to true on their prototype to allow changing the drop position."
      },
      "drop_target": {
        "name": "drop_target",
        "type": "LuaEntity",
        "mode": "[RW]",
        "doc": "The entity this entity is putting its stuff to or ````\nnil````\nif there is no such entit    \n\n**Note: ** Meaningful only for entities that put stuff somewhere, such as mining drills or inserters."
      },
      "effectivity_modifier": {
        "name": "effectivity_modifier",
        "type": "float",
        "mode": "[RW]",
        "doc": "Multiplies the acceleration the vehicle can create for one unit of energy. By defau  \nis ````\n1````\n.   \n_Can only be used if this is Car_"
      },
      "effects": {
        "name": "effects",
        "type": "Effects",
        "mode": "[R]",
        "doc": "The effects being applied to this entity or ````\nnil````\n. For beacons this is the effect the beacon is broadcastin"
      },
      "electric_buffer_size": {
        "name": "electric_buffer_size",
        "type": "double",
        "mode": "[RW]",
        "doc": "The buffer size for the electric energy source or nil if the entity doesn't have an electric energy source.   \n\n**Note: ** Write access is limited to the ElectricEnergyInterface type"
      },
      "electric_drain": {
        "name": "electric_drain",
        "type": "double",
        "mode": "[R]",
        "doc": "The electric drain for the electric energy source or nil if the entity doesn't have an electric energy source."
      },
      "electric_emissions": {
        "name": "electric_emissions",
        "type": "double",
        "mode": "[R]",
        "doc": "The emissions for the electric energy source or nil if the entity doesn't have an electric energy source."
      },
      "electric_input_flow_limit": {
        "name": "electric_input_flow_limit",
        "type": "double",
        "mode": "[R]",
        "doc": "The input flow limit for the electric energy source or nil if the entity doesn't have an electric energy source."
      },
      "electric_network_id": {
        "name": "electric_network_id",
        "type": "uint",
        "mode": "[R]",
        "doc": "Returns the id of the electric network that this entity is connected to or ````\nnil````"
      },
      "electric_network_statistics": {
        "name": "electric_network_statistics",
        "type": "LuaFlowStatistics",
        "mode": "[R]",
        "doc": "The electric network statistics for this electric pol    \n_Can only be used if this is ElectricPole_"
      },
      "electric_output_flow_limit": {
        "name": "electric_output_flow_limit",
        "type": "double",
        "mode": "[R]",
        "doc": "The output flow limit for the electric energy source or nil if the entity doesn't have an electric energy source."
      },
      "enable_flashlight": {
        "name": "enable_flashlight",
        "doc": "Enable the flashlight.",
        "type": "function"
      },
      "enable_logistics_while_moving": {
        "name": "enable_logistics_while_moving",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If equipment grid logistics are enabled while this vehicle is movin    \n_Can only be used if this is Vehicle_"
      },
      "energy": {
        "name": "energy",
        "type": "double",
        "mode": "[RW]",
        "doc": "Energy stored in the entity (heat in furnace, energy stored in electrical devices etc.  \nalways 0 for entities that don't have the concept of energy stored inside    \n\n**Example**  \n````\ngame.player.print(\"Machine energy: \" .. game.player.selected.energy .. \"J\")  \ngame.player.selected.energy = 3000````"
      },
      "filter_slot_count": {
        "name": "filter_slot_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "The number of filter slots this inserter or loader has. 0 if not an inserter or loade"
      },
      "fluidbox": {
        "name": "fluidbox",
        "type": "LuaFluidBox",
        "mode": "[RW]",
        "doc": "Fluidboxes of this entit"
      },
      "following_robots": {
        "name": "following_robots",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "The current combat robots following the charact    \n\n**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character(see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "force": {
        "name": "force",
        "type": "ForceSpecification",
        "mode": "[RW]",
        "doc": "The force of this entity. Reading will always give a [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html), but it is possible   \nassign either [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) to this attribute to change the forc"
      },
      "friction_modifier": {
        "name": "friction_modifier",
        "type": "float",
        "mode": "[RW]",
        "doc": "Multiplies the car friction rate    \n\n**Example**  \nThis will allow the car to go much fast    \n````\ngame.player.vehicle.friction_modifier = 0.5````  \n_Can only be used if this is Car_"
      },
      "get_beam_source": {
        "name": "get_beam_source",
        "type": "function",
        "doc": "Get the source of this bea    \n_Can only be used if this is Beam_",
        "returns": "BeamTarget"
      },
      "get_beam_target": {
        "name": "get_beam_target",
        "type": "function",
        "doc": "Get the target of this bea    \n_Can only be used if this is Beam_",
        "returns": "BeamTarget"
      },
      "get_burnt_result_inventory": {
        "name": "get_burnt_result_inventory",
        "type": "function",
        "doc": "The burnt result inventory for this entity or ````\nnil````\nif this entity doesn't have a burnt result inventor",
        "returns": "LuaInventory"
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "get_connected_rail": {
        "name": "get_connected_rail",
        "type": "function",
        "returns": "LuaEntity",
        "args": {
          "rail_direction": {
            "name": "rail_direction",
            "type": "defines.rail_direction",
            "doc": "Table with the following fields:   \nrail_direction :: [defines.rail_direction](http://lua-api.factorio.com/latest/defines.html#defines.rail_direction)  \nrail_connection_direction :: [defines.rail_connection_direction](http://lua-api.factorio.com/latest/defines.html#defines.rail_connection_direction)"
          }
        },
        "doc": "**Parameters**  \nTable with the following fields:   \nrail_direction :: [defines.rail_direction](http://lua-api.factorio.com/latest/defines.html#defines.rail_direction)  \nrail_connection_direction :: [defines.rail_connection_direction](http://lua-api.factorio.com/latest/defines.html#defines.rail_connection_direction)  \n\n**Return value**  \nRail connected in the specified manner to this one.  \n_Can only be used if this is Rail_"
      },
      "get_connected_rails": {
        "name": "get_connected_rails",
        "type": "function",
        "doc": "Get the rails that this signal is connected t    \n_Can only be used if this is RailSignal_",
        "returns": "array of LuaEntity"
      },
      "get_control_behavior": {
        "name": "get_control_behavior",
        "type": "function",
        "doc": "Gets the control behavior of the entity (if any).   \n\n**Return value**  \nThe control behavior or nil.",
        "returns": "LuaControlBehavior"
      },
      "get_craftable_count": {
        "name": "get_craftable_count",
        "type": "function",
        "doc": "Gets the count of the given recipe that can be crafted    \n\n**Parameters**  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe.  \n\n**Return value**  \nThe count that can be crafted.",
        "returns": "uint",
        "args": {
          "recipe": {
            "name": "recipe",
            "type": "string or LuaRecipe",
            "doc": "recipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe."
          }
        }
      },
      "get_driver": {
        "name": "get_driver",
        "type": "function",
        "doc": "Gets the driver of this vehicle if any.   \n\n**Note: ** May be ````\nnil````\nif the vehicle contains no driver. To check if there's a passenger see [LuaEntity::get_passenger](http://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.get_passenger).  \n_Can only be used if this is Vehicle_",
        "returns": "LuaEntity or LuaPlayer"
      },
      "get_filter": {
        "name": "get_filter",
        "type": "function",
        "doc": "Get the filter for a slot in an inserter or a loader.   \n\n**Parameters**  \nuint: Slot to get the filter of.  \n\n**Return value**  \nPrototype name of the item being filtered; ````\nnil````\nif the given sl  \nhas no filter.  \n\n**Note: ** The inserter/loader must allow filters.",
        "returns": "string",
        "args": {
          "uint": {
            "name": "uint",
            "doc": "uint: Slot to get the filter of.",
            "type": "uint"
          }
        }
      },
      "get_fluid_contents": {
        "name": "get_fluid_contents",
        "type": "function",
        "doc": "Get amounts of all fluids in this entity.   \n\n**Return value**  \nThe amounts, indexed by fluid names.",
        "returns": "dictionary string → double"
      },
      "get_fluid_count": {
        "name": "get_fluid_count",
        "type": "function",
        "doc": "Get the amount of all or some fluid in this entity.   \n\n**Parameters**  \nfluid :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the fluid to count. If not specified, count all fluids.",
        "returns": "double",
        "args": {
          "fluid": {
            "name": "fluid",
            "type": "string",
            "doc": "fluid :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the fluid to count. If not specified, count all fluids."
          }
        }
      },
      "get_fuel_inventory": {
        "name": "get_fuel_inventory",
        "type": "function",
        "doc": "The fuel inventory for this entity or ````\nnil````\nif this entity doesn't have a fuel inventor",
        "returns": "LuaInventory"
      },
      "get_health_ratio": {
        "name": "get_health_ratio",
        "type": "function",
        "doc": "The health ratio of this entity between 1 and 0 (for full health and no health respectively",
        "returns": "float"
      },
      "get_heat_setting": {
        "name": "get_heat_setting",
        "type": "function",
        "doc": "Gets the heat setting for this heat interfac    \n_Can only be used if this is HeatInterface_",
        "returns": "HeatSetting"
      },
      "get_infinity_container_filter": {
        "name": "get_infinity_container_filter",
        "type": "function",
        "doc": "Gets the filter for this infinity container at the given index or ````\nnil````\nif the filter index doesn't exist or is empt    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index to get.  \n_Can only be used if this is InfinityContainer_",
        "returns": "InfinityContainerFilter",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index to get."
          }
        }
      },
      "get_infinity_pipe_filter": {
        "name": "get_infinity_pipe_filter",
        "type": "function",
        "doc": "Gets the filter for this infinity pipe or ````\nnil````\nif the filter is empt    \n_Can only be used if this is InfinityPipe_",
        "returns": "InfinityPipeFilter"
      },
      "get_inventory": {
        "name": "get_inventory",
        "type": "function",
        "doc": "Get an inventory belonging to this entity. This can be either the \"main\" inventory or some auxilia  \none, like the module slots or logistic trash slot    \n\n**Parameters**  \ninventory :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \n\n**Return value**  \nor ````\nnil````\nif this entity doesn't have an inventory with the given index.  \n\n**Note: ** A given [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory) is only meaningful for the corresponding LuaObject type. EG: get_inventory(defines.inventory.character_main) is only meaningful if 'this' is a player character. You may get a value back but if the type of 'this' isn't the type referred to by the [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory) it's almost guaranteed to not be the inventory asked for.",
        "returns": "LuaInventory",
        "args": {
          "inventory": {
            "name": "inventory",
            "type": "defines.inventory",
            "doc": "inventory :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)"
          }
        }
      },
      "get_item_count": {
        "name": "get_item_count",
        "type": "function",
        "doc": "Get the number of all or some items in this entity.   \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items.",
        "returns": "uint",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items."
          }
        }
      },
      "get_logistic_point": {
        "name": "get_logistic_point",
        "type": "function",
        "doc": "Gets the [LuaLogisticPoint](http://lua-api.factorio.com/latest/LuaLogisticPoint.html) specified by the given index or if not given returns all of the points this entity own    \n\n**Parameters**  \ndefines.logistic_member_index (optional)  \n\n**Note: ** When the index is not given for most entities this will be a single entry. For some (such as the player character) this can be zero or more.",
        "returns": "LuaLogisticPoint or array of LuaLogisticPoint",
        "args": {
          "defines.logistic_member_index": {
            "name": "defines.logistic_member_index",
            "doc": "defines.logistic_member_index (optional)",
            "type": "defines.logistic_member_index"
          }
        }
      },
      "get_main_inventory": {
        "name": "get_main_inventory",
        "type": "function",
        "doc": "Gets the main inventory for this character or player if this is a character or player.   \n\n**Return value**  \nor ````\nnil````\nif this entity is not a character or player.",
        "returns": "LuaInventory"
      },
      "get_market_items": {
        "name": "get_market_items",
        "type": "function",
        "doc": "Get all offers in a market as an arra    \n_Can only be used if this is Market_",
        "returns": "array of Offer"
      },
      "get_max_transport_line_index": {
        "name": "get_max_transport_line_index",
        "type": "function",
        "doc": "Get the maximum transport line index of a belt or belt connectable entit    \n_Can only be used if this is TransportBeltConnectable_",
        "returns": "uint"
      },
      "get_merged_signals": {
        "name": "get_merged_signals",
        "type": "function",
        "doc": "The merged circuit network signals or ````\nnil````\nif there are no signal    \n\n**Parameters**  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get signals fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe sum of signals on both the red and green networks, or nil if it doesn't have a circuit connector.",
        "returns": "array of Signal",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get signals fo  \nMust be specified for entities with more than one circuit network connector."
          }
        }
      },
      "get_module_inventory": {
        "name": "get_module_inventory",
        "type": "function",
        "returns": "LuaInventory",
        "doc": "**Return value**  \nInventory for storing modules of this entity; ````\nnil````\nif this entity h  \nno module inventory."
      },
      "get_or_create_control_behavior": {
        "name": "get_or_create_control_behavior",
        "type": "function",
        "doc": "Gets (and or creates if needed) the control behavior of the entity.   \n\n**Return value**  \nThe control behavior or nil.",
        "returns": "LuaControlBehavior"
      },
      "get_output_inventory": {
        "name": "get_output_inventory",
        "type": "function",
        "doc": "Gets the entities output inventory if it has on    \n\n**Return value**  \na reference to the entities output inventory.",
        "returns": "LuaInventory"
      },
      "get_passenger": {
        "name": "get_passenger",
        "type": "function",
        "doc": "Gets the passenger of this car if any.   \n\n**Note: ** May be ````\nnil````\nif the vehicle contains no passenger. To check if there's a driver see [LuaEntity::get_driver](http://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.get_driver).  \n\n**Note: ** This differs over [LuaEntity::get_driver](http://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.get_driver) in that the passenger can't drive the car.  \n_Can only be used if this is Car_",
        "returns": "LuaEntity or LuaPlayer"
      },
      "get_radius": {
        "name": "get_radius",
        "type": "function",
        "doc": "The radius of this entit",
        "returns": "double"
      },
      "get_rail_segment_end": {
        "name": "get_rail_segment_end",
        "type": "function",
        "doc": "Get the rail at the end of the rail segment this rail is i    \n\n**Parameters**  \ndirection :: [defines.rail_direction](http://lua-api.factorio.com/latest/defines.html#defines.rail_direction)  \n\n**Note: ** A rail segment is a continuous section of rail with no branches, signals, nor train stops.  \n\n**Note: ** This function has a second return value. A [defines.rail_direction](http://lua-api.factorio.com/latest/defines.html#defines.rail_direction) that points out of the rail segment from the end rail.  \n_Can only be used if this is Rail_",
        "returns": "LuaEntity",
        "args": {
          "direction": {
            "name": "direction",
            "type": "defines.rail_direction",
            "doc": "direction :: [defines.rail_direction](http://lua-api.factorio.com/latest/defines.html#defines.rail_direction)"
          }
        }
      },
      "get_rail_segment_entity": {
        "name": "get_rail_segment_entity",
        "type": "function",
        "doc": "Get the rail signal or train stop at the start/end of the rail segment this rail is in, or ````\nnil````\nif the rail segment doesn't start/end with a signal nor a train sto    \n\n**Parameters**  \ndirection :: [defines.rail_direction](http://lua-api.factorio.com/latest/defines.html#defines.rail_direction): The direction of travel relative to this rail.  \nin_else_out :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If true, gets the entity at the entrance of the rail segment, otherwise gets the entity at the exit of the rail segment.  \n\n**Note: ** A rail segment is a continuous section of rail with no branches, signals, nor train stops.  \n_Can only be used if this is Rail_",
        "returns": "LuaEntity",
        "args": {
          "direction": {
            "name": "direction",
            "type": "defines.rail_direction",
            "doc": "direction :: [defines.rail_direction](http://lua-api.factorio.com/latest/defines.html#defines.rail_direction): The direction of travel relative to this rail."
          },
          "in_else_out": {
            "name": "in_else_out",
            "type": "boolean",
            "doc": "in_else_out :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If true, gets the entity at the entrance of the rail segment, otherwise gets the entity at the exit of the rail segment."
          }
        }
      },
      "get_rail_segment_length": {
        "name": "get_rail_segment_length",
        "type": "function",
        "doc": "Get the length of the rail segment this rail is i    \n\n**Note: ** A rail segment is a continuous section of rail with no branches, signals, nor train stops.  \n_Can only be used if this is Rail_",
        "returns": "double"
      },
      "get_rail_segment_overlaps": {
        "name": "get_rail_segment_overlaps",
        "type": "function",
        "doc": "Get a rail from each rail segment that overlaps with this rail's rail segmen    \n\n**Note: ** A rail segment is a continuous section of rail with no branches, signals, nor train stops.  \n_Can only be used if this is Rail_",
        "returns": "array of LuaEntity"
      },
      "get_recipe": {
        "name": "get_recipe",
        "type": "function",
        "doc": "Current recipe being assembled by this machine or ````\nnil````\nif no recipe is se    \n_Can only be used if this is CraftingMachine_",
        "returns": "LuaRecipe"
      },
      "get_request_slot": {
        "name": "get_request_slot",
        "type": "function",
        "doc": "Get a logistic requester slot.   \n\n**Parameters**  \nslot :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot index.  \n\n**Return value**  \nContents of the specified slot; ````\nnil````\nif the given slot contains no request.  \n\n**Note: ** Useable only on entities that have requester slots.",
        "returns": "SimpleItemStack",
        "args": {
          "slot": {
            "name": "slot",
            "type": "uint",
            "doc": "slot :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot index."
          }
        }
      },
      "get_stopped_train": {
        "name": "get_stopped_train",
        "type": "function",
        "doc": "The train currently stopped at this train stop or ````\nnil````\nif non    \n_Can only be used if this is TrainStop_",
        "returns": "LuaTrain"
      },
      "get_train_stop_trains": {
        "name": "get_train_stop_trains",
        "type": "function",
        "doc": "The trains scheduled to stop at this train sto    \n_Can only be used if this is TrainStop_",
        "returns": "array of LuaTrain"
      },
      "get_transport_line": {
        "name": "get_transport_line",
        "type": "function",
        "doc": "Get a transport line of a belt or belt connectable entity.   \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Index of the requested transport line.  \n_Can only be used if this is TransportBeltConnectable_",
        "returns": "LuaTransportLine",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Index of the requested transport line."
          }
        }
      },
      "ghost_has_flag": {
        "name": "ghost_has_flag",
        "type": "function",
        "doc": "Same as [LuaEntity::has_flag](http://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.has_flag) but targets the inner entity on a entity ghos    \n\n**Parameters**  \nflag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The flag to test  \n\n**Return value**  \n````\ntrue````\nif the entity has the given flag set.",
        "returns": "boolean",
        "args": {
          "flag": {
            "name": "flag",
            "type": "string",
            "doc": "flag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The flag to test"
          }
        }
      },
      "ghost_localised_description": {
        "name": "ghost_localised_description",
        "type": "LocalisedString",
        "mode": "[R]",
        "doc": "_Can only be used if this is Ghost_"
      },
      "ghost_localised_name": {
        "name": "ghost_localised_name",
        "type": "LocalisedString",
        "mode": "[R]",
        "doc": "Localised name of the entity or tile contained in this ghos    \n_Can only be used if this is Ghost_"
      },
      "ghost_name": {
        "name": "ghost_name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of the entity or tile contained in this gho    \n_Can only be used if this is Ghost_"
      },
      "ghost_prototype": {
        "name": "ghost_prototype",
        "type": "LuaEntityPrototype or LuaTilePrototype",
        "mode": "[R]",
        "doc": "The prototype of the entity or tile contained in this ghos    \n_Can only be used if this is Ghost_"
      },
      "ghost_type": {
        "name": "ghost_type",
        "type": "string",
        "mode": "[R]",
        "doc": "The prototype type of the entity or tile contained in this ghos    \n_Can only be used if this is Ghost_"
      },
      "graphics_variation": {
        "name": "graphics_variation",
        "type": "uint8",
        "mode": "[RW]",
        "doc": "The graphics variation for this entity or ````\nnil````\nif this entity doesn't use graphics variation"
      },
      "grid": {
        "name": "grid",
        "type": "LuaEquipmentGrid",
        "mode": "[R]",
        "doc": "The equipment grid or ````\nnil````\nif this entity doesn't have an equipment gri"
      },
      "has_command": {
        "name": "has_command",
        "type": "function",
        "doc": "Has this unit been assigned a comman    \n_Can only be used if this is Unit_",
        "returns": "boolean"
      },
      "has_flag": {
        "name": "has_flag",
        "type": "function",
        "doc": "Test whether this entity's prototype has a flag set    \n\n**Parameters**  \nflag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The flag to test  \n\n**Return value**  \n````\ntrue````\nif the entity has the given flag set.  \n\n**Note: ** ````\nentity.has_flag(f)````\nis a shortcut for ````\nentity.prototype.has_flag(f)````\n.",
        "returns": "boolean",
        "args": {
          "flag": {
            "name": "flag",
            "type": "string",
            "doc": "flag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The flag to test"
          }
        }
      },
      "has_items_inside": {
        "name": "has_items_inside",
        "type": "function",
        "doc": "Does this entity have any item inside it?",
        "returns": "boolean"
      },
      "health": {
        "name": "health",
        "type": "float",
        "mode": "[RW]",
        "doc": "Health of the entity. Setting health to less than 0 will set health to 0, entiti  \nwith 0 health can not be attacked. Setting health to higher than max health wi  \nset health to max health.   \n\n**Note: ** If used on an entity that doesn't support health, this field will be ````\nnil````\n."
      },
      "held_stack": {
        "name": "held_stack",
        "type": "LuaItemStack",
        "mode": "[R]",
        "doc": "The item stack currently held in an inserter's han    \n_Can only be used if this is Inserter_"
      },
      "held_stack_position": {
        "name": "held_stack_position",
        "type": "Position",
        "mode": "[R]",
        "doc": "Current position of the inserter's \"hand    \n_Can only be used if this is Inserter_"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "highlight_box_blink_interval": {
        "name": "highlight_box_blink_interval",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The blink interval of this highlight box entit  \n0 indicates no blin    \n_Can only be used if this is HighlightBox_"
      },
      "highlight_box_type": {
        "name": "highlight_box_type",
        "type": "string",
        "mode": "[RW]",
        "doc": "The hightlight box type of this highlight box entit    \n_Can only be used if this is HighlightBox_"
      },
      "in_combat": {
        "name": "in_combat",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this character entity is in comba"
      },
      "infinity_container_filters": {
        "name": "infinity_container_filters",
        "type": "array of InfinityContainerFilter",
        "mode": "[RW]",
        "doc": "The filters for this infinity containe    \n_Can only be used if this is InfinityContainer_"
      },
      "initial_amount": {
        "name": "initial_amount",
        "type": "uint",
        "mode": "[RW]",
        "doc": "Count of initial resource units containe    \n\n**Note: ** If this is not an infinite resource reading will give ````\nnil````\nand writing will give an error.  \n_Can only be used if this is ResourceEntity_"
      },
      "insert": {
        "name": "insert",
        "type": "function",
        "doc": "Insert items into this entity. This works the same way as inserters or shift-clicking: the \"bes  \ninventory is chosen automatically.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert.  \n\n**Return value**  \nNumber of items actually inserted.",
        "returns": "uint",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert."
          }
        }
      },
      "insert_fluid": {
        "name": "insert_fluid",
        "type": "function",
        "doc": "Insert fluid into this entit  \nFluidbox is chosen automatically.   \n\n**Parameters**  \nfluid :: [Fluid](http://lua-api.factorio.com/latest/Concepts.html#Fluid): Fluid to insert.  \n\n**Return value**  \nAmount of fluid actually inserted.",
        "returns": "double",
        "args": {
          "fluid": {
            "name": "fluid",
            "type": "Fluid",
            "doc": "fluid :: [Fluid](http://lua-api.factorio.com/latest/Concepts.html#Fluid): Fluid to insert."
          }
        }
      },
      "inserter_filter_mode": {
        "name": "inserter_filter_mode",
        "type": "string",
        "mode": "[RW]",
        "doc": "The filter mode for this filter inserter: \"whitelist\", \"blacklist\", or ````\nnil````\nif this inserter doesn't use filter    \n_Can only be used if this is Inserter_"
      },
      "inserter_stack_size_override": {
        "name": "inserter_stack_size_override",
        "type": "uint",
        "mode": "[RW]",
        "doc": "Sets the stack size limit on this inserter. If the stack size is &gt; than the force stack size limit the value is ignore    \n\n**Note: ** Set to 0 to reset."
      },
      "is_closed": {
        "name": "is_closed",
        "type": "function",
        "returns": "boolean",
        "doc": "**Return value**  \n````\ntrue````\nif this gate is currently closed.  \n_Can only be used if this is Gate_"
      },
      "is_closing": {
        "name": "is_closing",
        "type": "function",
        "returns": "boolean",
        "doc": "**Return value**  \n````\ntrue````\nif this gate is currently closing  \n_Can only be used if this is Gate_"
      },
      "is_connected_to_electric_network": {
        "name": "is_connected_to_electric_network",
        "type": "function",
        "doc": "Returns true if this entity is connected to an electric network.",
        "returns": "boolean"
      },
      "is_crafting": {
        "name": "is_crafting",
        "type": "function",
        "returns": "boolean",
        "doc": "**Return value**  \n````\ntrue````\nif this machine is currently crafting.  \n_Can only be used if this is CraftingMachine_"
      },
      "is_opened": {
        "name": "is_opened",
        "type": "function",
        "returns": "boolean",
        "doc": "**Return value**  \n````\ntrue````\nif this gate is currently opened.  \n_Can only be used if this is Gate_"
      },
      "is_opening": {
        "name": "is_opening",
        "type": "function",
        "returns": "boolean",
        "doc": "**Return value**  \n````\ntrue````\nif this gate is currently opening.  \n_Can only be used if this is Gate_"
      },
      "is_player": {
        "name": "is_player",
        "type": "function",
        "doc": "When ````\ntrue````\ncontrol adapter is a LuaPlayer object, ````\nfalse````\nfor entities including characters with players",
        "returns": "boolean"
      },
      "item_pickup_distance": {
        "name": "item_pickup_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The item pickup distance of this character or max double when not a character or player connected to a characte"
      },
      "item_requests": {
        "name": "item_requests",
        "type": "dictionary string → uint",
        "mode": "[RW]",
        "doc": "Items this ghost will request when revived or items this item request proxy is requestin  \nResult is a dictionary mapping each item prototype name to the required count."
      },
      "kills": {
        "name": "kills",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The number of units killed by this turret, artillery turret, or artillery wago    \n_Can only be used if this is Turret_"
      },
      "last_user": {
        "name": "last_user",
        "type": "LuaPlayer",
        "mode": "[RW]",
        "doc": "The player who built the enti    \n_Can only be used if this is EntityWithOwner_"
      },
      "launch_rocket": {
        "name": "launch_rocket",
        "type": "function",
        "returns": "boolean",
        "doc": "**Return value**  \n````\ntrue````\nif the rocket was successfully launched. \n\n**Return value**  \nof ````\nfalse````  \nmeans the silo is not ready for launch.  \n_Can only be used if this is RocketSilo_"
      },
      "loader_type": {
        "name": "loader_type",
        "type": "string",
        "mode": "[RW]",
        "doc": "````\n\"input\"````\nor ````\n\"output\"````\n, depending on whether this loader puts to or gets from a containe    \n_Can only be used if this is Loader_"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]",
        "doc": "Localised name of the entit"
      },
      "logistic_cell": {
        "name": "logistic_cell",
        "type": "LuaLogisticCell",
        "mode": "[R]",
        "doc": "The logistic cell this entity is a part of. Will be ````\nnil````\nif this entity is not a part of any logistic cel"
      },
      "logistic_network": {
        "name": "logistic_network",
        "type": "LuaLogisticNetwork",
        "mode": "[R]",
        "doc": "The logistic network this entity is a part o"
      },
      "loot_pickup_distance": {
        "name": "loot_pickup_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The loot pickup distance of this character or max double when not a character or player connected to a characte"
      },
      "minable": {
        "name": "minable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "**Note: ** Not minable entities can still be destroyed.  \n\n**Note: ** Entities that are not minable naturally (like smoke, character, enemy units et  \ncan't be set to minable."
      },
      "mine_entity": {
        "name": "mine_entity",
        "type": "function",
        "doc": "Mines the given entity as if this player (or character) mined i    \n\n**Parameters**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity to mine  \nforce :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Forces mining the entity even if the items can't fit in the player.  \n\n**Return value**  \nIf the mining succeeded.",
        "returns": "boolean",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity to mine"
          },
          "force": {
            "name": "force",
            "type": "boolean",
            "doc": "force :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Forces mining the entity even if the items can't fit in the player."
          }
        }
      },
      "mine_tile": {
        "name": "mine_tile",
        "type": "function",
        "doc": "Mines the given tile as if this player (or character) mined i    \n\n**Parameters**  \ntile :: [LuaTile](http://lua-api.factorio.com/latest/LuaTile.html): The tile to mine.  \n\n**Return value**  \nIf the mining succeeded.",
        "returns": "boolean",
        "args": {
          "tile": {
            "name": "tile",
            "type": "LuaTile",
            "doc": "tile :: [LuaTile](http://lua-api.factorio.com/latest/LuaTile.html): The tile to mine."
          }
        }
      },
      "mining_progress": {
        "name": "mining_progress",
        "type": "double",
        "mode": "[RW]",
        "doc": "The mining progress for this mining drill or ````\nnil````\nif this isn't a mining drill. Is a number in range [0, mining_target.prototype.mineable_properties.mining_tim"
      },
      "mining_state": {
        "name": "mining_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current mining stat  \nIt is a table with two fields:   \nmining :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Whether the player is mining at all  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): What tiles the player is mining; only used when the player is mining tiles (holding a tile in the cursor).  \n\n**Note: ** When the player isn't mining tiles the player will mine what ever entity is currently selected. See [LuaControl::selected](http://lua-api.factorio.com/latest/LuaControl.html#LuaControl.selected) and [LuaControl::update_selected_entity](http://lua-api.factorio.com/latest/LuaControl.html#LuaControl.update_selected_entity)."
      },
      "mining_target": {
        "name": "mining_target",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The mining target or ````\nnil````\nif no    \n_Can only be used if this is MiningDrill_"
      },
      "moving": {
        "name": "moving",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "Returns true if this unit is movin    \n_Can only be used if this is Unit_"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of the entity prototype. E.g. \"inserter\" or \"filter-inserter"
      },
      "neighbour_bonus": {
        "name": "neighbour_bonus",
        "type": "double",
        "mode": "[R]",
        "doc": "The current total neighbour bonus of this reacto    \n_Can only be used if this is Reactor_"
      },
      "neighbours": {
        "name": "neighbours",
        "type": "dictionary string → array of LuaEntity or array of array of LuaEntity or LuaEntity",
        "mode": "[R]",
        "doc": "When called on an electric pole, this is a dictionary of all connections, index  \nby the strings ````\n\"copper\"````\n, ````\n\"red\"````\n, and ````\n\"green\"````\n.  \nWhen called on a pipe-connectable entity, this is an array of entity arrays of all entities a given fluidbox is connected to.  \nWhen called on an underground transport belt, this is the other end of t  \nunderground belt connection, or ````\nnil````\nif none.  \nWhen called on a wall-connectable entity or reactor, this is a dictionary of all connections indexed by the connection direction \"north\", \"south\", \"east\", and \"west\"."
      },
      "open_technology_gui": {
        "name": "open_technology_gui",
        "doc": "Open the technology GUI and select a given technolog    \n\n**Parameters**  \ntechnology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional): The technology to select after opening the GUI.",
        "type": "function",
        "args": {
          "technology": {
            "name": "technology",
            "type": "TechnologySpecification",
            "doc": "technology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional): The technology to select after opening the GUI."
          }
        }
      },
      "opened": {
        "name": "opened",
        "type": "LuaEntity or LuaItemStack or LuaEquipment or LuaEquipmentGrid or LuaPlayer or LuaGuiElement or defines.gui_type",
        "mode": "[RW]",
        "doc": "The GUI target the player currently has open; ````\nnil````\nif non    \n\n**Note: ** Write supports any of the types. Read will return the entity, equipment, element or nil."
      },
      "opened_gui_type": {
        "name": "opened_gui_type",
        "type": "defines.gui_type",
        "mode": "[R]",
        "doc": "Returns the [defines.gui_type](http://lua-api.factorio.com/latest/defines.html#defines.gui_type) or ````\nnil````\n."
      },
      "operable": {
        "name": "operable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Player can't open gui of this entity and he can't quick insert/input stuff in to the enti  \nwhen it is not operabl"
      },
      "order_deconstruction": {
        "name": "order_deconstruction",
        "type": "function",
        "doc": "Sets the entity to be deconstructed by construction robot    \n\n**Parameters**  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force whose robots are supposed to do the deconstruction.  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any.  \n\n**Return value**  \nif the entity was marked for deconstruction.",
        "returns": "boolean",
        "args": {
          "force": {
            "name": "force",
            "type": "ForceSpecification",
            "doc": "force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force whose robots are supposed to do the deconstruction."
          },
          "player": {
            "name": "player",
            "type": "PlayerSpecification",
            "doc": "player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any."
          }
        }
      },
      "order_upgrade": {
        "name": "order_upgrade",
        "type": "function",
        "doc": "Sets the entity to be upgraded by construction robot    \n\n**Parameters**  \nTable with the following fields:   \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force whose robots are supposed to do the upgrade.  \ntarget :: [EntityPrototypeSpecification](http://lua-api.factorio.com/latest/Concepts.html#EntityPrototypeSpecification): The prototype of the entity to upgrade to.  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional)  \n\n**Return value**  \nif the entity was marked for upgrade.",
        "returns": "boolean",
        "args": {
          "force": {
            "name": "force",
            "type": "ForceSpecification",
            "doc": "Table with the following fields:   \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force whose robots are supposed to do the upgrade.  \ntarget :: [EntityPrototypeSpecification](http://lua-api.factorio.com/latest/Concepts.html#EntityPrototypeSpecification): The prototype of the entity to upgrade to.  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional)"
          }
        }
      },
      "orientation": {
        "name": "orientation",
        "type": "float",
        "mode": "[RW]",
        "doc": "The smooth orientatio"
      },
      "parameters": {
        "name": "parameters",
        "type": "ProgrammableSpeakerParameters",
        "mode": "[RW]",
        "doc": "_Can only be used if this is ProgrammableSpeaker_"
      },
      "picking_state": {
        "name": "picking_state",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Current item-picking stat"
      },
      "pickup_position": {
        "name": "pickup_position",
        "type": "Position",
        "mode": "[RW]",
        "doc": "Where the inserter will pick up items fro    \n\n**Note: ** Inserters must have ````\nallow_custom_vectors````\nset to true on their prototype to allow changing the pickup position.  \n_Can only be used if this is Inserter_"
      },
      "pickup_target": {
        "name": "pickup_target",
        "type": "LuaEntity",
        "mode": "[RW]",
        "doc": "The entity the inserter will attempt to pick up from. For example, this can be a transport belt or  \nstorage ches    \n_Can only be used if this is Inserter_"
      },
      "play_note": {
        "name": "play_note",
        "type": "function",
        "doc": "Plays a note with the given instrument and not    \n\n**Parameters**  \ninstrument :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nnote :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n\n**Return value**  \nIf the request is valid. The sound may or may not be played depending on polyphony settings.  \n_Can only be used if this is ProgrammableSpeaker_",
        "returns": "boolean",
        "args": {
          "instrument": {
            "name": "instrument",
            "type": "uint",
            "doc": "instrument :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          },
          "note": {
            "name": "note",
            "type": "uint",
            "doc": "note :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "player": {
        "name": "player",
        "type": "LuaPlayer",
        "mode": "[R]",
        "doc": "The player connected to this character or ````\nnil````\nif non    \n_Can only be used if this is Character_"
      },
      "position": {
        "name": "position",
        "type": "Position",
        "mode": "[R]",
        "doc": "Current position of the entity."
      },
      "power_production": {
        "name": "power_production",
        "type": "double",
        "mode": "[RW]",
        "doc": "The power production specific to the ElectricEnergyInterface entity typ    \n_Can only be used if this is ElectricEnergyInterface_"
      },
      "power_switch_state": {
        "name": "power_switch_state",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "The state of this power switc"
      },
      "power_usage": {
        "name": "power_usage",
        "type": "double",
        "mode": "[RW]",
        "doc": "The power usage specific to the ElectricEnergyInterface entity typ    \n_Can only be used if this is ElectricEnergyInterface_"
      },
      "previous_recipe": {
        "name": "previous_recipe",
        "type": "LuaRecipe",
        "mode": "[R]",
        "doc": "The previous recipe this furnace was using or nil if the furnace had no previous recip    \n_Can only be used if this is Furnace_"
      },
      "products_finished": {
        "name": "products_finished",
        "type": "uint",
        "mode": "[RW]",
        "doc": "_Can only be used if this is CraftingMachine_"
      },
      "prototype": {
        "name": "prototype",
        "type": "LuaEntityPrototype",
        "mode": "[R]",
        "doc": "The entity prototype of this entity."
      },
      "proxy_target": {
        "name": "proxy_target",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The target entity for this item-request-proxy or ````\nnil````"
      },
      "pump_rail_target": {
        "name": "pump_rail_target",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The rail target of this pump or ````\nnil````    \n_Can only be used if this is Pump_"
      },
      "reach_distance": {
        "name": "reach_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "The reach distance of this character or max uint when not a character or player connected to a characte"
      },
      "recipe_locked": {
        "name": "recipe_locked",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "When locked; the recipe in this assembling machine can't be changed by the playe    \n_Can only be used if this is AssemblingMachine_"
      },
      "relative_turret_orientation": {
        "name": "relative_turret_orientation",
        "type": "float",
        "mode": "[RW]",
        "doc": "The relative orientation of the vehicle turret or ````\nnil````\nif this entity isn't a vehicle or have a vehicle turre    \n\n**Note: ** Writing does nothing if the vehicle doesn't have a turret.  \n_Can only be used if this is Vehicle_"
      },
      "release_from_spawner": {
        "name": "release_from_spawner",
        "doc": "Release the unit from the spawner which spawned it. This allows the spawner to continue spawning additional unit    \n_Can only be used if this is Unit_",
        "type": "function"
      },
      "remove_fluid": {
        "name": "remove_fluid",
        "type": "function",
        "doc": "Remove fluid from this entity.   \n\n**Parameters**  \nTable with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Fluid prototype name.  \namount :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Amount to remove  \nminimum_temperature :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \nmaximum_temperature :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \ntemperature :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \n\n**Return value**  \nAmount of fluid actually removed.  \n\n**Note: ** If temperature is given only fluid matching that exact temperature is removed. If minimum and maximum is given fluid within that range is removed.",
        "returns": "double",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Fluid prototype name.  \namount :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Amount to remove  \nminimum_temperature :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \nmaximum_temperature :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \ntemperature :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)"
          }
        }
      },
      "remove_item": {
        "name": "remove_item",
        "type": "function",
        "doc": "Remove items from this entity.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove.  \n\n**Return value**  \nNumber of items actually removed.",
        "returns": "uint",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove."
          }
        }
      },
      "remove_market_item": {
        "name": "remove_market_item",
        "type": "function",
        "doc": "Remove an offer from a marke    \n\n**Parameters**  \noffer :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Index of offer to remove.  \n\n**Return value**  \n````\ntrue````\nif the offer was successfully removed; ````\nfalse````\nwhen the given index was not valid.  \n\n**Note: ** The other offers are moved down to fill the gap created by removing the offer, which decrements the overall size of the offer array.  \n_Can only be used if this is Market_",
        "returns": "boolean",
        "args": {
          "offer": {
            "name": "offer",
            "type": "uint",
            "doc": "offer :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Index of offer to remove."
          }
        }
      },
      "remove_unfiltered_items": {
        "name": "remove_unfiltered_items",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If items not included in this infinity container filters should be removed from the containe    \n_Can only be used if this is InfinityContainer_"
      },
      "render_player": {
        "name": "render_player",
        "type": "LuaPlayer",
        "mode": "[RW]",
        "doc": "The player that this simple-entity-with-owner, simple-entity-with-force, flying-text or highlight-box is visible to or ````\nnil````\n. Set to ````\nnil````\nto clea"
      },
      "render_to_forces": {
        "name": "render_to_forces",
        "type": "array of ForceSpecification",
        "mode": "[RW]",
        "doc": "The forces that this simple-entity-with-owner, simple-entity-with-force or flying-text is visible to or ````\nnil````\n. Set to ````\nnil````\nto clea    \n\n**Note: ** Reading will always give an array of [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html)"
      },
      "repair_state": {
        "name": "repair_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current repair stat  \nIt is a table with two fields:   \nrepairing :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): The current state  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position being repaired"
      },
      "request_slot_count": {
        "name": "request_slot_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "The number of request slots this entity ha"
      },
      "request_to_close": {
        "name": "request_to_close",
        "type": "function",
        "args": {
          "force": {
            "name": "force",
            "type": "ForceSpecification",
            "doc": "force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force that requests the gate to be closed."
          }
        },
        "doc": "**Parameters**  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force that requests the gate to be closed.  \n_Can only be used if this is Gate_"
      },
      "request_to_open": {
        "name": "request_to_open",
        "type": "function",
        "args": {
          "extra_time": {
            "name": "extra_time",
            "type": "uint",
            "doc": "extra_time :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): Extra ticks to stay open."
          },
          "force": {
            "name": "force",
            "type": "ForceSpecification",
            "doc": "force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force that requests the gate to be open."
          }
        },
        "doc": "**Parameters**  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force that requests the gate to be open.  \nextra_time :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): Extra ticks to stay open.  \n_Can only be used if this is Gate_"
      },
      "resource_reach_distance": {
        "name": "resource_reach_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The resource reach distance of this character or max double when not a character or player connected to a characte"
      },
      "revive": {
        "name": "revive",
        "type": "function",
        "doc": "Revive a ghost. I.e. turn it from a ghost to a real entity or tile.   \n\n**Parameters**  \nopts (optional): Table with the following fields:   \nreturn_item_request_proxy :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If ````\ntrue````\nthe function will return item request proxy as the third parameter.  \nraise_revive :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If true; [defines.events.script_raised_revive](http://lua-api.factorio.com/latest/defines.html#defines.events.script_raised_revive) will be called.  \n\n**Return value**  \nAny items the new real entity collided with or ````\nnil````\nif the ghost could not be revived.  \n\n**Note: ** If this is an entity ghost and it is successfully revived this will also return the revived entity or ````\nnil````\nas a second return val  \nand possibly item request proxy as the third parameter depending on value of return_item_request_proxy.",
        "returns": "dictionary string → uint",
        "args": {
          "opts": {
            "name": "opts",
            "type": "boolean",
            "doc": "opts (optional): Table with the following fields:   \nreturn_item_request_proxy :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If ````\ntrue````\nthe function will return item request proxy as the third parameter.  \nraise_revive :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If true; [defines.events.script_raised_revive](http://lua-api.factorio.com/latest/defines.html#defines.events.script_raised_revive) will be called."
          }
        }
      },
      "riding_state": {
        "name": "riding_state",
        "type": "RidingState",
        "mode": "[RW]",
        "doc": "Current riding state of this car or the vehicle this player is riding i"
      },
      "rocket_parts": {
        "name": "rocket_parts",
        "type": "uint",
        "mode": "[RW]",
        "doc": "Number of rocket parts in the sil    \n_Can only be used if this is RocketSilo_"
      },
      "rotatable": {
        "name": "rotatable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "When entity is not to be rotatable (inserter, transport belt etc), it can't be rotat  \nby player using the R key.   \n\n**Note: ** Entities that are not rotatable naturally (like chest or furnace) can't be set   \nbe rotatable."
      },
      "rotate": {
        "name": "rotate",
        "type": "function",
        "doc": "Rotates this entity as if the player rotated     \n\n**Parameters**  \noptions (optional): Table with the following fields:   \nreverse :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \nby_player :: [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html) (optional)  \nspill_items :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the player is not given should extra items be spilled or returned as a second return value from this.  \nenable_looted :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, each spilled item will be flagged with the [LuaEntity::to_be_looted](http://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.to_be_looted) flag.  \nforce :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): When provided the spilled items will be marked for deconstruction by this force.  \n\n**Return value**  \nIf the rotation was successful.",
        "returns": "boolean",
        "args": {
          "options": {
            "name": "options",
            "type": "boolean",
            "doc": "options (optional): Table with the following fields:   \nreverse :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \nby_player :: [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html) (optional)  \nspill_items :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the player is not given should extra items be spilled or returned as a second return value from this.  \nenable_looted :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, each spilled item will be flagged with the [LuaEntity::to_be_looted](http://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.to_be_looted) flag.  \nforce :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): When provided the spilled items will be marked for deconstruction by this force."
          }
        }
      },
      "secondary_bounding_box": {
        "name": "secondary_bounding_box",
        "type": "BoundingBox",
        "mode": "[R]",
        "doc": "The secondary bounding box of this entity or ````\nnil````\nif it doesn't have on"
      },
      "secondary_selection_box": {
        "name": "secondary_selection_box",
        "type": "BoundingBox",
        "mode": "[R]",
        "doc": "The secondary selection box of this entity or ````\nnil````\nif it doesn't have on"
      },
      "selected": {
        "name": "selected",
        "type": "LuaEntity",
        "mode": "[RW]",
        "doc": "The currently selected entity; ````\nnil````\nif none. Assigning an entity will select it if selectable otherwise clears selection."
      },
      "selected_gun_index": {
        "name": "selected_gun_index",
        "type": "uint",
        "mode": "[RW]",
        "doc": "Index of the currently selected weapon slot of this characte    \n_Can only be used if this is Character_"
      },
      "selection_box": {
        "name": "selection_box",
        "type": "BoundingBox",
        "mode": "[R]"
      },
      "set_beam_source": {
        "name": "set_beam_source",
        "doc": "Set the source of this bea    \n\n**Parameters**  \nsource :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \n_Can only be used if this is Beam_",
        "type": "function",
        "args": {
          "source": {
            "name": "source",
            "type": "LuaEntity or Position",
            "doc": "source :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)"
          }
        }
      },
      "set_beam_target": {
        "name": "set_beam_target",
        "doc": "Set the target of this bea    \n\n**Parameters**  \ntarget :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \n_Can only be used if this is Beam_",
        "type": "function",
        "args": {
          "target": {
            "name": "target",
            "type": "LuaEntity or Position",
            "doc": "target :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)"
          }
        }
      },
      "set_command": {
        "name": "set_command",
        "doc": "Give the entity a comman    \n\n**Parameters**  \ncommand :: [Command](http://lua-api.factorio.com/latest/Concepts.html#Command)  \n_Can only be used if this is Unit_",
        "type": "function",
        "args": {
          "command": {
            "name": "command",
            "type": "Command",
            "doc": "command :: [Command](http://lua-api.factorio.com/latest/Concepts.html#Command)"
          }
        }
      },
      "set_driver": {
        "name": "set_driver",
        "doc": "Sets the driver of this vehicl    \n\n**Parameters**  \ndriver :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html): The new passenger or ````\nnil````\nto eject the current driver if any.  \n\n**Note: ** This differs over [LuaEntity::set_passenger](http://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.set_passenger) in that the passenger can't drive the vehicle.  \n_Can only be used if this is Vehicle_",
        "type": "function",
        "args": {
          "driver": {
            "name": "driver",
            "type": "LuaEntity or LuaPlayer",
            "doc": "driver :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html): The new passenger or ````\nnil````\nto eject the current driver if any."
          }
        }
      },
      "set_filter": {
        "name": "set_filter",
        "doc": "Set the filter for a slot in an inserter or a loader   \n\n**Parameters**  \nuint: Slot to set the filter of.  \nstring: Prototype name of the item to filter.  \n\n**Note: ** The inserter/loader must allow filters.",
        "args": {
          "string": {
            "name": "string",
            "doc": "string: Prototype name of the item to filter.",
            "type": "string"
          },
          "uint": {
            "name": "uint",
            "doc": "uint: Slot to set the filter of.",
            "type": "uint"
          }
        },
        "type": "function"
      },
      "set_gui_arrow": {
        "name": "set_gui_arrow",
        "doc": "Create an arrow which points at this entity. This is used in the tutorial. For examples, see ````\ncontrol.lua````  \nin the campaign missions.   \n\n**Parameters**  \nTable with the following fields:   \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Where to point to. This field determines what other fields are mandator  \nMay be ````\n\"nowhere\"````\n, ````\n\"goal\"````\n, ````\n\"entity_info\"````\n, ````\n\"active_window\"````\n, ````\n\"entity\"````\n, ````\n\"position\"````  \n````\n\"crafting_queue\"````\n, or ````\n\"item_stack\"````\n.  \nAdditional ````\ntype````\n-specific parameters  \nentity  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nposition  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \ncrafting_queue  \ncrafting_queueindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nitem_stack  \ninventory_index :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \nitem_stack_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nsource :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): May be either ````\n\"player\"````\nor ````\n\"target\"````\n.",
        "type": "function",
        "args": {
          "type": {
            "name": "type",
            "type": "string",
            "doc": "Table with the following fields:   \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Where to point to. This field determines what other fields are mandator  \nMay be ````\n\"nowhere\"````\n, ````\n\"goal\"````\n, ````\n\"entity_info\"````\n, ````\n\"active_window\"````\n, ````\n\"entity\"````\n, ````\n\"position\"````  \n````\n\"crafting_queue\"````\n, or ````\n\"item_stack\"````\n.  \nAdditional ````\ntype````\n-specific parameters  \nentity  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nposition  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \ncrafting_queue  \ncrafting_queueindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nitem_stack  \ninventory_index :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \nitem_stack_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nsource :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): May be either ````\n\"player\"````\nor ````\n\"target\"````\n."
          }
        }
      },
      "set_heat_setting": {
        "name": "set_heat_setting",
        "doc": "Sets the heat setting for this heat interfac    \n\n**Parameters**  \nfilter :: [HeatSetting](http://lua-api.factorio.com/latest/Concepts.html#HeatSetting): The new setting.  \n_Can only be used if this is HeatInterface_",
        "type": "function",
        "args": {
          "filter": {
            "name": "filter",
            "type": "HeatSetting",
            "doc": "filter :: [HeatSetting](http://lua-api.factorio.com/latest/Concepts.html#HeatSetting): The new setting."
          }
        }
      },
      "set_infinity_container_filter": {
        "name": "set_infinity_container_filter",
        "doc": "Sets the filter for this infinity container at the given inde    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index to set.  \nfilter :: [InfinityContainerFilter](http://lua-api.factorio.com/latest/Concepts.html#InfinityContainerFilter): The new filter or ````\nnil````\nto clear the filter.  \n_Can only be used if this is InfinityContainer_",
        "type": "function",
        "args": {
          "filter": {
            "name": "filter",
            "type": "InfinityContainerFilter",
            "doc": "filter :: [InfinityContainerFilter](http://lua-api.factorio.com/latest/Concepts.html#InfinityContainerFilter): The new filter or ````\nnil````\nto clear the filter."
          },
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index to set."
          }
        }
      },
      "set_infinity_pipe_filter": {
        "name": "set_infinity_pipe_filter",
        "doc": "Sets the filter for this infinity pip    \n\n**Parameters**  \nfilter :: [InfinityPipeFilter](http://lua-api.factorio.com/latest/Concepts.html#InfinityPipeFilter): The new filter or ````\nnil````\nto clear the filter.  \n_Can only be used if this is InfinityPipe_",
        "type": "function",
        "args": {
          "filter": {
            "name": "filter",
            "type": "InfinityPipeFilter",
            "doc": "filter :: [InfinityPipeFilter](http://lua-api.factorio.com/latest/Concepts.html#InfinityPipeFilter): The new filter or ````\nnil````\nto clear the filter."
          }
        }
      },
      "set_passenger": {
        "name": "set_passenger",
        "doc": "Sets the passenger of this ca    \n\n**Parameters**  \npassenger :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html)  \n\n**Note: ** This differs over [LuaEntity::get_driver](http://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.get_driver) in that the passenger can't drive the car.  \n_Can only be used if this is Car_",
        "type": "function",
        "args": {
          "passenger": {
            "name": "passenger",
            "type": "LuaEntity or LuaPlayer",
            "doc": "passenger :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html)"
          }
        }
      },
      "set_recipe": {
        "name": "set_recipe",
        "type": "function",
        "doc": "Sets the current recipe in this assembly machin    \n\n**Parameters**  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The new recipe or ````\nnil````\nto clear the recipe.  \n\n**Return value**  \nAny items removed from this entity as a result of setting the recipe.  \n_Can only be used if this is CraftingMachine_",
        "returns": "dictionary string → uint",
        "args": {
          "recipe": {
            "name": "recipe",
            "type": "string or LuaRecipe",
            "doc": "recipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The new recipe or ````\nnil````\nto clear the recipe."
          }
        }
      },
      "set_request_slot": {
        "name": "set_request_slot",
        "doc": "Set a logistic requester slot.   \n\n**Parameters**  \nrequest :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): What to request.  \nslot :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot index.  \n\n**Note: ** Useable only on entities that have requester slots.",
        "type": "function",
        "args": {
          "request": {
            "name": "request",
            "type": "ItemStackSpecification",
            "doc": "request :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): What to request."
          },
          "slot": {
            "name": "slot",
            "type": "uint",
            "doc": "slot :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot index."
          }
        }
      },
      "shooting_state": {
        "name": "shooting_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current shooting stat  \nIt is a table with two fields:   \nstate :: [defines.shooting](http://lua-api.factorio.com/latest/defines.html#defines.shooting): The current state  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position being shot at"
      },
      "shooting_target": {
        "name": "shooting_target",
        "type": "LuaEntity",
        "mode": "[RW]",
        "doc": "The shooting target for this turret or ````\nnil````"
      },
      "signal_state": {
        "name": "signal_state",
        "type": "defines.signal_state",
        "mode": "[R]",
        "doc": "The state of this rail signa    \n_Can only be used if this is RailSignal_"
      },
      "silent_revive": {
        "name": "silent_revive",
        "type": "function",
        "doc": "Revives a ghost silently.   \n\n**Parameters**  \nopts (optional): Table with the following fields:   \nreturn_item_request_proxy :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If ````\ntrue````\nthe function will return item request proxy as the third parameter.  \nraise_revive :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If true; [defines.events.script_raised_revive](http://lua-api.factorio.com/latest/defines.html#defines.events.script_raised_revive) will be called.  \n\n**Return value**  \nAny items the new real entity collided with or ````\nnil````\nif the ghost could not be revived.  \n\n**Note: ** If this is an entity ghost and it is successfully revived this will also return the revived entity or ````\nnil````\nas a second return val  \nand possibly item request proxy as the third parameter depending on value of return_item_request_proxy.",
        "returns": "dictionary string → uint",
        "args": {
          "opts": {
            "name": "opts",
            "type": "boolean",
            "doc": "opts (optional): Table with the following fields:   \nreturn_item_request_proxy :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If ````\ntrue````\nthe function will return item request proxy as the third parameter.  \nraise_revive :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If true; [defines.events.script_raised_revive](http://lua-api.factorio.com/latest/defines.html#defines.events.script_raised_revive) will be called."
          }
        }
      },
      "spawner": {
        "name": "spawner",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The spawner associated with this unit entity or ````\nnil````\nif the unit has no associated spawne"
      },
      "speed": {
        "name": "speed",
        "type": "float",
        "mode": "[RW]",
        "doc": "The current speed of the car or rolling stock, or current max speed of the unit. Only the speed of units and cars is writabl"
      },
      "splitter_filter": {
        "name": "splitter_filter",
        "type": "LuaItemPrototype",
        "mode": "[RW]",
        "doc": "The filter for this splitter or ````\nnil````\nif no filter is se    \n_Can only be used if this is Splitter_"
      },
      "splitter_input_priority": {
        "name": "splitter_input_priority",
        "type": "string",
        "mode": "[RW]",
        "doc": "The input priority for this splitter : \"left\", \"none\", or \"right    \n_Can only be used if this is Splitter_"
      },
      "splitter_output_priority": {
        "name": "splitter_output_priority",
        "type": "string",
        "mode": "[RW]",
        "doc": "The output priority for this splitter : \"left\", \"none\", or \"right    \n_Can only be used if this is Splitter_"
      },
      "stack": {
        "name": "stack",
        "type": "LuaItemStack",
        "mode": "[R]",
        "doc": "_Can only be used if this is ItemEntity_"
      },
      "status": {
        "name": "status",
        "type": "defines.entity_status",
        "mode": "[R]",
        "doc": "The status of this entity or ````\nnil````\nif no statu"
      },
      "sticked_to": {
        "name": "sticked_to",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this sticker is sticked t"
      },
      "stickers": {
        "name": "stickers",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "The sticker entities attached to this entit"
      },
      "supports_backer_name": {
        "name": "supports_backer_name",
        "type": "function",
        "returns": "boolean",
        "doc": "**Return value**  \n````\ntrue````\nif this entity supports a backer name."
      },
      "supports_direction": {
        "name": "supports_direction",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Whether the entity has directio  \nWhen it is false for this entity, it will always return north direction when asked fo"
      },
      "surface": {
        "name": "surface",
        "type": "LuaSurface",
        "mode": "[R]",
        "doc": "The surface this entity is currently on."
      },
      "teleport": {
        "name": "teleport",
        "type": "function",
        "doc": "Teleport the entity to a given position, possibly on another surface    \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to teleport to.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Surface to teleport to. If not given, will telepo  \nto the entity's current surface.  \n\n**Return value**  \n````\ntrue````\nwhen the entity was successfully teleported.  \n\n**Note: ** Some entities may not be teleported. For instance, rail signa  \nwon't allow teleportation and this method will always return ````\nfalse````\nwhen used on any such entity.  \n\n**Note: ** You can also pass 1 or 2 numbers as the parameters and they will be used as relative teleport coordinat  \n````\n'teleport(0, 1)'````\nto move the entity 1 tile positive   \n````\n'teleport(4)'````\nto move the entity 4 tiles to the positive x.",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to teleport to."
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Surface to teleport to. If not given, will telepo  \nto the entity's current surface."
          }
        }
      },
      "temperature": {
        "name": "temperature",
        "type": "double",
        "mode": "[RW]",
        "doc": "The temperature of this entities heat energy source if this entity uses a heat energy source or ````\nnil````"
      },
      "text": {
        "name": "text",
        "type": "LocalisedString",
        "mode": "[RW]",
        "doc": "The text of this flying-text entit    \n_Can only be used if this is FlyingText_"
      },
      "tick_of_last_attack": {
        "name": "tick_of_last_attack",
        "type": "uint",
        "mode": "[R]",
        "doc": "The last tick this character entity was attacke    \n_Can only be used if this is Character_"
      },
      "tick_of_last_damage": {
        "name": "tick_of_last_damage",
        "type": "uint",
        "mode": "[R]",
        "doc": "The last tick this character entity was damage    \n_Can only be used if this is Character_"
      },
      "time_to_live": {
        "name": "time_to_live",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The ticks left before a ghost, combat robot or highlight box is destroyed.   \nfor ghosts set to uint32 max (4,294,967,295) to never expire.  \nfor ghosts Cannot be set higher than [LuaForce::ghost_time_to_live](http://lua-api.factorio.com/latest/LuaForce.html#LuaForce.ghost_time_to_live) of the entity's force."
      },
      "timeout": {
        "name": "timeout",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The timeout left on this landmine in tick    \n_Can only be used if this is LandMine_"
      },
      "to_be_deconstructed": {
        "name": "to_be_deconstructed",
        "type": "function",
        "doc": "Is this entity marked for deconstructio    \n\n**Parameters**  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force which ordered the deconstruction. This paramet  \nis currently unused; it exists only for forward compatibility of the API.",
        "returns": "boolean",
        "args": {
          "force": {
            "name": "force",
            "type": "ForceSpecification",
            "doc": "force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force which ordered the deconstruction. This paramet  \nis currently unused; it exists only for forward compatibility of the API."
          }
        }
      },
      "to_be_looted": {
        "name": "to_be_looted",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Will this entity be picked up automatically when the player walks over i    \n_Can only be used if this is ItemEntity_"
      },
      "to_be_upgraded": {
        "name": "to_be_upgraded",
        "type": "function",
        "doc": "Is this entity marked for upgrad",
        "returns": "boolean"
      },
      "toggle_equipment_movement_bonus": {
        "name": "toggle_equipment_movement_bonus",
        "doc": "Toggle this entity's equipment movement bonus. Does nothing if the entity does not have an equipment gri    \n\n**Note: ** This property can also be read and written on the equipment grid of this entity.",
        "type": "function"
      },
      "train": {
        "name": "train",
        "type": "LuaTrain",
        "mode": "[R]",
        "doc": "The train this rolling stock belongs to or nil if not rolling stoc    \n_Can only be used if this is RollingStock_"
      },
      "trains_in_block": {
        "name": "trains_in_block",
        "type": "uint",
        "mode": "[R]",
        "doc": "The number of trains in this rail block for this rail entit    \n_Can only be used if this is Rail_"
      },
      "tree_color_index": {
        "name": "tree_color_index",
        "type": "uint8",
        "mode": "[RW]",
        "doc": "Index of the tree colo"
      },
      "tree_color_index_max": {
        "name": "tree_color_index_max",
        "type": "uint8",
        "mode": "[R]",
        "doc": "Maximum index of the tree color"
      },
      "tree_stage_index": {
        "name": "tree_stage_index",
        "type": "uint8",
        "mode": "[RW]",
        "doc": "Index of the tree stag"
      },
      "tree_stage_index_max": {
        "name": "tree_stage_index_max",
        "type": "uint8",
        "mode": "[R]",
        "doc": "Maximum index of the tree stage"
      },
      "type": {
        "name": "type",
        "type": "string",
        "mode": "[R]",
        "doc": "The entity prototype type of this entity."
      },
      "unit_group": {
        "name": "unit_group",
        "type": "LuaUnitGroup",
        "mode": "[R]",
        "doc": "The unit group this unit is a member of, or ````\nnil````\nif non    \n_Can only be used if this is Unit_"
      },
      "unit_number": {
        "name": "unit_number",
        "type": "uint",
        "mode": "[R]",
        "doc": "The unit number or nil if the entity doesn't have one. This is universally unique for every entity that has one, for the lifetime of a whole game."
      },
      "units": {
        "name": "units",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "The units associated with this spawner entit"
      },
      "update_connections": {
        "name": "update_connections",
        "doc": "Reconnect loader, beacon, cliff and mining drill connections to entities that might have be  \nteleported out or in by the script. The game doesn't do this automatical  \nas we don't want to loose performance by checking this in normal games.",
        "type": "function"
      },
      "update_selected_entity": {
        "name": "update_selected_entity",
        "doc": "Select an entity, as if by hovering the mouse above it.   \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position of the entity to select",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position of the entity to select"
          }
        }
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "vehicle": {
        "name": "vehicle",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The vehicle the player is currently sitting in; ````\nnil````\nif none."
      },
      "walking_state": {
        "name": "walking_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current walking stat  \nIt is a table with two fields:   \nwalking :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If ````\nfalse````\n, the player is currently not walking; otherwise it's going somewhere  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction): Direction where the player is walking  \n\n**Example**  \nMake the player go north. Note that a one-shot action like this will only make the player walk for one tic    \n````\ngame.player.walking_state = {walking = true, direction = defines.direction.north}````"
      }
    },
    "doc": "The primary interface for interacting with entities through the Lua API.\n Entity is everything on the map except tiles."
  },
  "LuaEntityPrototype": {
    "name": "LuaEntityPrototype",
    "type": "LuaEntityPrototype",
    "inherits": [],
    "properties": {
      "additional_pastable_entities": {
        "name": "additional_pastable_entities",
        "type": "array of LuaEntityPrototype",
        "mode": "[R]",
        "doc": "Entities this entity can be pasted onto in addition to the normal allowed one"
      },
      "affected_by_tiles": {
        "name": "affected_by_tiles",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Whether this unit prototype is affected by tile walking speed modifiers or ````\nnil````\n."
      },
      "alert_icon_shift": {
        "name": "alert_icon_shift",
        "type": "Vector",
        "mode": "[R]",
        "doc": "The alert icon shift of this entity prototype."
      },
      "alert_when_attacking": {
        "name": "alert_when_attacking",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Does this turret prototype alert when attacking? or ````\nnil````\nif not turret prototyp"
      },
      "alert_when_damaged": {
        "name": "alert_when_damaged",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Does this entity with health prototype alert when damaged? or ````\nnil````\nif not entity with health prototyp"
      },
      "allow_copy_paste": {
        "name": "allow_copy_paste",
        "type": "boolean",
        "mode": "[R]",
        "doc": "When false copy-paste is not allowed for this entit"
      },
      "allow_custom_vectors": {
        "name": "allow_custom_vectors",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this inserter allows custom pickup and drop vector"
      },
      "allowed_effects": {
        "name": "allowed_effects",
        "type": "dictionary string → boolean",
        "mode": "[R]",
        "doc": "The allowed module effects for this entity or ````\nnil````"
      },
      "attack_parameters": {
        "name": "attack_parameters",
        "type": "table",
        "mode": "[R]",
        "doc": "The attack parameters for this entity or ````\nnil````\nif the entity doesn't use attack parameter  \nIt is a table:   \nrange :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nmin_range :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nturn_range :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nfire_penalty :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nmin_attack_distance :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \ndamage_modifier :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nammo_consumption_modifier :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \ncooldown :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nwarmup :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nmovement_slow_down_factor :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \nmovement_slow_down_cooldown :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)"
      },
      "attack_result": {
        "name": "attack_result",
        "type": "Trigger",
        "mode": "[R]",
        "doc": "The attack result of this entity if the entity has one, else ````\nnil````\n."
      },
      "automated_ammo_count": {
        "name": "automated_ammo_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "The amount of ammo that inserters automatically insert into this ammo-turret or artillery-turret or ````\nnil````\n."
      },
      "autoplace_specification": {
        "name": "autoplace_specification",
        "type": "AutoplaceSpecification",
        "mode": "[R]",
        "doc": "Autoplace specification for this entity prototype. ````\nnil````\nif non"
      },
      "belt_distance": {
        "name": "belt_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "_Can only be used if this is Loader_"
      },
      "belt_length": {
        "name": "belt_length",
        "type": "double",
        "mode": "[R]",
        "doc": "_Can only be used if this is Loader_"
      },
      "belt_speed": {
        "name": "belt_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "The speed of this transport belt or ````\nnil````\nif this isn't a transport belt related prototype."
      },
      "braking_force": {
        "name": "braking_force",
        "type": "double",
        "mode": "[R]",
        "doc": "The braking force of this vehicle prototype or ````\nnil````\nif not a vehicle prototyp"
      },
      "build_base_evolution_requirement": {
        "name": "build_base_evolution_requirement",
        "type": "double",
        "mode": "[R]",
        "doc": "The evolution requirement to build this entity as a base when expanding enemy base"
      },
      "build_distance": {
        "name": "build_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "_Can only be used if this is Character_"
      },
      "building_grid_bit_shift": {
        "name": "building_grid_bit_shift",
        "type": "uint",
        "mode": "[R]",
        "doc": "The log2 of grid size of the buildi"
      },
      "burner_prototype": {
        "name": "burner_prototype",
        "type": "LuaBurnerPrototype",
        "mode": "[R]",
        "doc": "The burner energy source prototype this entity uses or ````\nnil````"
      },
      "can_open_gates": {
        "name": "can_open_gates",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Whether this unit prototype can open gates or ````\nnil````\n."
      },
      "character_corpse": {
        "name": "character_corpse",
        "type": "LuaEntityPrototype",
        "mode": "[R]",
        "doc": "_Can only be used if this is Character_"
      },
      "cliff_explosive_prototype": {
        "name": "cliff_explosive_prototype",
        "type": "string",
        "mode": "[R]",
        "doc": "The item prototype name used to destroy this cliff or ````\nnil````\n."
      },
      "collision_box": {
        "name": "collision_box",
        "type": "BoundingBox",
        "mode": "[R]",
        "doc": "The bounding box used for collision checking."
      },
      "collision_mask": {
        "name": "collision_mask",
        "type": "CollisionMask",
        "mode": "[R]",
        "doc": "The collision masks this entity uses"
      },
      "collision_mask_collides_with_self": {
        "name": "collision_mask_collides_with_self",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Does this prototype collision mask collide with itsel"
      },
      "collision_mask_collides_with_tiles_only": {
        "name": "collision_mask_collides_with_tiles_only",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Does this prototype collision mask collide with tiles onl"
      },
      "collision_mask_considers_tile_transitions": {
        "name": "collision_mask_considers_tile_transitions",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Does this prototype collision mask consider tile transition"
      },
      "color": {
        "name": "color",
        "type": "Color",
        "mode": "[R]",
        "doc": "The color of the prototype, or ````\nnil````\nif the prototype doesn't have colo"
      },
      "construction_radius": {
        "name": "construction_radius",
        "type": "double",
        "mode": "[R]",
        "doc": "The construction radius for this roboport prototype or ````\nnil````"
      },
      "consumption": {
        "name": "consumption",
        "type": "double",
        "mode": "[R]",
        "doc": "The energy consumption of this car prototype or ````\nnil````\nif not a car prototyp"
      },
      "container_distance": {
        "name": "container_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "_Can only be used if this is Loader_"
      },
      "corpses": {
        "name": "corpses",
        "type": "dictionary string → LuaEntityPrototype",
        "mode": "[R]",
        "doc": "Corpses used when this entity is destroyed. It is a dictionary indexed by the corpse's prototy  \nname."
      },
      "count_as_rock_for_filtered_deconstruction": {
        "name": "count_as_rock_for_filtered_deconstruction",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this simple-entity is counted as a rock for the deconstruction planner \"trees and rocks only\" filte"
      },
      "crafting_categories": {
        "name": "crafting_categories",
        "type": "dictionary string → boolean",
        "mode": "[R]",
        "doc": "The crafting categories this entity supports. Only meaningful when this is a crafting-machine or player entity typ    \n\n**Note: ** The value in the dictionary is meaningless and exists just to allow the dictionary type for easy lookup."
      },
      "crafting_speed": {
        "name": "crafting_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "The crafting speed of this crafting-machine or ````\nnil````"
      },
      "create_ghost_on_death": {
        "name": "create_ghost_on_death",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this prototype will attempt to create a ghost of itself on deat    \n\n**Note: ** If this is false then a ghost will never be made, if it's true a ghost may be made."
      },
      "created_effect": {
        "name": "created_effect",
        "type": "Trigger",
        "mode": "[R]",
        "doc": "The trigger run when this entity is created or ````\nnil````\n."
      },
      "created_smoke": {
        "name": "created_smoke",
        "type": "table",
        "mode": "[R]",
        "doc": "The smoke trigger run when this entity is built or ````\nnil````  \nIt is a table:"
      },
      "damage_hit_tint": {
        "name": "damage_hit_tint",
        "type": "Color",
        "mode": "[R]",
        "doc": "_Can only be used if this is Character_"
      },
      "darkness_for_all_lamps_off": {
        "name": "darkness_for_all_lamps_off",
        "type": "float",
        "mode": "[R]",
        "doc": "Value between 0 and 1 darkness where all lamps of this lamp prototype are off or ````\nnil````\n."
      },
      "darkness_for_all_lamps_on": {
        "name": "darkness_for_all_lamps_on",
        "type": "float",
        "mode": "[R]",
        "doc": "Value between 0 and 1 darkness where all lamps of this lamp prototype are on or ````\nnil````\n."
      },
      "distraction_cooldown": {
        "name": "distraction_cooldown",
        "type": "uint",
        "mode": "[R]",
        "doc": "The distraction cooldown of this unit prototype or ````\nnil````\n."
      },
      "distribution_effectivity": {
        "name": "distribution_effectivity",
        "type": "double",
        "mode": "[R]",
        "doc": "The distribution effectivity for this beacon prototype or ````\nnil````\nif not a beacon prototyp"
      },
      "draw_cargo": {
        "name": "draw_cargo",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Whether this logistics or construction robot renders its cargo when flying or ````\nnil````"
      },
      "drawing_box": {
        "name": "drawing_box",
        "type": "BoundingBox",
        "mode": "[R]",
        "doc": "The bounding box used for drawing the entity icon."
      },
      "drop_item_distance": {
        "name": "drop_item_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "_Can only be used if this is Character_"
      },
      "effectivity": {
        "name": "effectivity",
        "type": "double",
        "mode": "[R]",
        "doc": "The effectivity of this car prototype, generator prototype or ````\nnil````"
      },
      "electric_energy_source_prototype": {
        "name": "electric_energy_source_prototype",
        "type": "LuaElectricEnergySourcePrototype",
        "mode": "[R]",
        "doc": "The electric energy source prototype this entity uses or ````\nnil````"
      },
      "emissions_per_second": {
        "name": "emissions_per_second",
        "type": "double",
        "mode": "[R]",
        "doc": "Amount of pollution emissions per second this entity will create."
      },
      "enemy_map_color": {
        "name": "enemy_map_color",
        "type": "Color",
        "mode": "[R]",
        "doc": "The enemy map color used when charting this entit"
      },
      "energy_per_hit_point": {
        "name": "energy_per_hit_point",
        "type": "double",
        "mode": "[R]",
        "doc": "The energy used per hitpoint taken for this vehicle during collisions or ````\nnil````"
      },
      "energy_per_move": {
        "name": "energy_per_move",
        "type": "double",
        "mode": "[R]",
        "doc": "The energy consumed per tile moved for this flying robot or ````\nnil````"
      },
      "energy_per_tick": {
        "name": "energy_per_tick",
        "type": "double",
        "mode": "[R]",
        "doc": "The energy consumed per tick for this flying robot or ````\nnil````"
      },
      "energy_usage": {
        "name": "energy_usage",
        "type": "double",
        "mode": "[R]",
        "doc": "The direct energy usage of this entity or ````\nnil````\nif this entity doesn't have a direct energy usag"
      },
      "enter_vehicle_distance": {
        "name": "enter_vehicle_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "_Can only be used if this is Character_"
      },
      "explosion_beam": {
        "name": "explosion_beam",
        "type": "double",
        "mode": "[R]",
        "doc": "Does this explosion have a beam or ````\nnil````\nif not an explosion prototyp"
      },
      "explosion_rotate": {
        "name": "explosion_rotate",
        "type": "double",
        "mode": "[R]",
        "doc": "Does this explosion rotate or ````\nnil````\nif not an explosion prototyp"
      },
      "fast_replaceable_group": {
        "name": "fast_replaceable_group",
        "type": "string",
        "mode": "[R]",
        "doc": "The group of mutually fast-replaceable entities. Possibly ````\nnil````\n."
      },
      "filter_count": {
        "name": "filter_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "The filter count of this inserter, loader, or requester chest or ````\nnil````"
      },
      "final_attack_result": {
        "name": "final_attack_result",
        "type": "Trigger",
        "mode": "[R]",
        "doc": "The final attack result for projectiles ````\nnil````\nif not a projectile"
      },
      "fixed_recipe": {
        "name": "fixed_recipe",
        "type": "string",
        "mode": "[R]",
        "doc": "The fixed recipe name for this assembling machine prototype or ````\nnil````"
      },
      "flags": {
        "name": "flags",
        "type": "EntityPrototypeFlags",
        "mode": "[R]",
        "doc": "The entity prototype flags for this entit"
      },
      "fluid": {
        "name": "fluid",
        "type": "LuaFluidPrototype",
        "mode": "[R]",
        "doc": "The fluid this offshore pump produces or ````\nnil````"
      },
      "fluid_capacity": {
        "name": "fluid_capacity",
        "type": "double",
        "mode": "[R]",
        "doc": "The fluid capacity of this entity or 0 if this entity doesn't support fluid    \n\n**Note: ** Crafting machines will report 0 due to their fluid capacity being what ever a given recipe needs."
      },
      "fluid_usage_per_tick": {
        "name": "fluid_usage_per_tick",
        "type": "double",
        "mode": "[R]",
        "doc": "The fluid usage of this generator prototype or ````\nnil````"
      },
      "fluidbox_prototypes": {
        "name": "fluidbox_prototypes",
        "type": "array of LuaFluidBoxPrototype",
        "mode": "[R]",
        "doc": "The fluidbox prototypes for this entit"
      },
      "friction_force": {
        "name": "friction_force",
        "type": "double",
        "mode": "[R]",
        "doc": "The friction of this vehicle prototype or ````\nnil````\nif not a vehicle prototyp"
      },
      "friendly_map_color": {
        "name": "friendly_map_color",
        "type": "Color",
        "mode": "[R]",
        "doc": "The friendly map color used when charting this entit"
      },
      "get_inventory_size": {
        "name": "get_inventory_size",
        "type": "function",
        "doc": "Gets the base size of the given inventory on this entity or ````\nnil````\nif the given inventory doesn't exis    \n\n**Parameters**  \nindex :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)",
        "returns": "uint",
        "args": {
          "index": {
            "name": "index",
            "type": "defines.inventory",
            "doc": "index :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)"
          }
        }
      },
      "group": {
        "name": "group",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "Group of this entity."
      },
      "guns": {
        "name": "guns",
        "type": "dictionary string → LuaItemPrototype",
        "mode": "[R]",
        "doc": "The guns this car prototype uses or ````\nnil````\nif not a car prototyp"
      },
      "has_belt_immunity": {
        "name": "has_belt_immunity",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Whether this unit or car prototype has belt immunity, ````\nnil````\nif not car or unit prototype."
      },
      "has_flag": {
        "name": "has_flag",
        "type": "function",
        "doc": "Does this prototype have a flag enabled    \n\n**Parameters**  \nflag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The flag to check. Must be one of   \n````\n\"not-rotatable\"````  \n````\n\"placeable-neutral\"````  \n````\n\"placeable-player\"````  \n````\n\"placeable-enemy\"````  \n````\n\"placeable-off-grid\"````  \n````\n\"player-creation\"````  \n````\n\"building-direction-8-way\"````  \n````\n\"filter-directions\"````  \n````\n\"fast-replaceable-no-build-while-moving\"````  \n````\n\"breaths-air\"````  \n````\n\"not-repairable\"````  \n````\n\"not-on-map\"````  \n````\n\"not-deconstructable\"````  \n````\n\"not-blueprintable\"````  \n````\n\"hide-from-bonus-gui\"````  \n````\n\"hide-alt-info\"````  \n````\n\"fast-replaceable-no-cross-type-while-moving\"````  \n````\n\"no-gap-fill-while-building\"````  \n````\n\"not-flammable\"````  \n````\n\"no-automated-item-removal\"````  \n````\n\"no-automated-item-insertion\"````  \n````\n\"not-upgradable\"````",
        "returns": "boolean",
        "args": {
          "flag": {
            "name": "flag",
            "type": "string",
            "doc": "flag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The flag to check. Must be one of   \n````\n\"not-rotatable\"````  \n````\n\"placeable-neutral\"````  \n````\n\"placeable-player\"````  \n````\n\"placeable-enemy\"````  \n````\n\"placeable-off-grid\"````  \n````\n\"player-creation\"````  \n````\n\"building-direction-8-way\"````  \n````\n\"filter-directions\"````  \n````\n\"fast-replaceable-no-build-while-moving\"````  \n````\n\"breaths-air\"````  \n````\n\"not-repairable\"````  \n````\n\"not-on-map\"````  \n````\n\"not-deconstructable\"````  \n````\n\"not-blueprintable\"````  \n````\n\"hide-from-bonus-gui\"````  \n````\n\"hide-alt-info\"````  \n````\n\"fast-replaceable-no-cross-type-while-moving\"````  \n````\n\"no-gap-fill-while-building\"````  \n````\n\"not-flammable\"````  \n````\n\"no-automated-item-removal\"````  \n````\n\"no-automated-item-insertion\"````  \n````\n\"not-upgradable\"````"
          }
        }
      },
      "healing_per_tick": {
        "name": "healing_per_tick",
        "type": "float",
        "mode": "[R]",
        "doc": "Amount this entity can heal per tick."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "infinite_depletion_resource_amount": {
        "name": "infinite_depletion_resource_amount",
        "type": "uint",
        "mode": "[R]",
        "doc": "Every time this infinite resource 'ticks' down it is reduced by this amount. ````\nnil````\nwhen not a resource. Meaningless if this isn't an infinite type resource."
      },
      "infinite_resource": {
        "name": "infinite_resource",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this resource infinite? Will be ````\nnil````\nwhen used on a non-resource."
      },
      "ingredient_count": {
        "name": "ingredient_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "The max number of ingredients this crafting-machine prototype supports or ````\nnil````\nif this isn't a crafting-machine prototyp"
      },
      "inserter_extension_speed": {
        "name": "inserter_extension_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "The extension speed of this inserter or ````\nnil````\n."
      },
      "inserter_rotation_speed": {
        "name": "inserter_rotation_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "The rotation speed of this inserter or ````\nnil````\n."
      },
      "instruments": {
        "name": "instruments",
        "type": "array of ProgrammableSpeakerInstrument",
        "mode": "[R]",
        "doc": "The instruments for this programmable speaker or ````\nnil````"
      },
      "is_building": {
        "name": "is_building",
        "type": "boolean",
        "mode": "[R]"
      },
      "item_pickup_distance": {
        "name": "item_pickup_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "_Can only be used if this is Character_"
      },
      "item_slot_count": {
        "name": "item_slot_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "The item slot count of this constant combinator prototype or ````\nnil````"
      },
      "items_to_place_this": {
        "name": "items_to_place_this",
        "type": "array of SimpleItemStack",
        "mode": "[R]",
        "doc": "Items that when placed will produce this entity. It is a dictionary indexed by the item prototype name."
      },
      "lab_inputs": {
        "name": "lab_inputs",
        "type": "array of string",
        "mode": "[R]",
        "doc": "The item prototype names that are the inputs of this lab prototype or ````\nnil````"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "logistic_mode": {
        "name": "logistic_mode",
        "type": "string",
        "mode": "[R]",
        "doc": "The logistic mode of this logistic container or ````\nnil````\nif this isn't a logistic container prototyp"
      },
      "logistic_radius": {
        "name": "logistic_radius",
        "type": "double",
        "mode": "[R]",
        "doc": "The logistic radius for this roboport prototype or ````\nnil````"
      },
      "loot": {
        "name": "loot",
        "type": "Loot",
        "mode": "[R]",
        "doc": "Loot that will be dropped when this entity is killed. ````\nnil````\nif there is no loot."
      },
      "loot_pickup_distance": {
        "name": "loot_pickup_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "_Can only be used if this is Character_"
      },
      "map_color": {
        "name": "map_color",
        "type": "Color",
        "mode": "[R]",
        "doc": "The map color used when charting this entity if a friendly or enemy color isn't defined or ````\nnil````"
      },
      "map_generator_bounding_box": {
        "name": "map_generator_bounding_box",
        "type": "BoundingBox",
        "mode": "[R]",
        "doc": "The bounding box used for map generator collision checking."
      },
      "max_circuit_wire_distance": {
        "name": "max_circuit_wire_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The maximum circuit wire distance for this entity. 0 when the entity doesn't support circuit wire"
      },
      "max_darkness_to_spawn": {
        "name": "max_darkness_to_spawn",
        "type": "float",
        "mode": "[R]",
        "doc": "The maximum darkness at which this unit spawner can spawn entities."
      },
      "max_energy": {
        "name": "max_energy",
        "type": "double",
        "mode": "[R]",
        "doc": "The max energy for this flying robot or ````\nnil````"
      },
      "max_energy_usage": {
        "name": "max_energy_usage",
        "type": "double",
        "mode": "[R]",
        "doc": "The theoretical maximum energy usage for this entit"
      },
      "max_health": {
        "name": "max_health",
        "type": "float",
        "mode": "[R]",
        "doc": "Max health of this entity. Will be ````\n0````\nif this is not an entity with health."
      },
      "max_payload_size": {
        "name": "max_payload_size",
        "type": "uint",
        "mode": "[R]",
        "doc": "The max payload size of this logistics or construction robot or ````\nnil````"
      },
      "max_polyphony": {
        "name": "max_polyphony",
        "type": "uint",
        "mode": "[R]",
        "doc": "The maximum polyphony for this programmable speaker or ````\nnil````"
      },
      "max_pursue_distance": {
        "name": "max_pursue_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The maximum pursue distance of this unit prototype or ````\nnil````\n."
      },
      "max_speed": {
        "name": "max_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "The max speed of this Projectile prototype or ````\nnil````\n."
      },
      "max_to_charge": {
        "name": "max_to_charge",
        "type": "float",
        "mode": "[R]",
        "doc": "The maximum energy for this flying robot above which it won't try to recharge when stationing or ````\nnil````"
      },
      "max_underground_distance": {
        "name": "max_underground_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "The max underground distance for underground belts and underground pipes or ````\nnil````\nif this isn't one of those prototype"
      },
      "max_wire_distance": {
        "name": "max_wire_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The maximum wire distance for this entity. 0 when the entity doesn't support wire"
      },
      "maximum_corner_sliding_distance": {
        "name": "maximum_corner_sliding_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "_Can only be used if this is Character_"
      },
      "maximum_temperature": {
        "name": "maximum_temperature",
        "type": "double",
        "mode": "[R]",
        "doc": "The maximum fluid temperature of this generator prototype or ````\nnil````"
      },
      "min_darkness_to_spawn": {
        "name": "min_darkness_to_spawn",
        "type": "float",
        "mode": "[R]",
        "doc": "The minimum darkness at which this unit spawner can spawn entities."
      },
      "min_pursue_time": {
        "name": "min_pursue_time",
        "type": "uint",
        "mode": "[R]",
        "doc": "The minimum pursue time of this unit prototype or ````\nnil````\n."
      },
      "min_to_charge": {
        "name": "min_to_charge",
        "type": "float",
        "mode": "[R]",
        "doc": "The minimum energy for this flying robot before it tries to recharge or ````\nnil````"
      },
      "mineable_properties": {
        "name": "mineable_properties",
        "type": "table",
        "mode": "[R]",
        "doc": "It is a table:   \nminable :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Is this entity mineable at all?  \nmining_time :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Energy required to mine an entity.  \nmining_particle :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the particle produced when mining this entit  \nWill only be present if this entity produces any particle during mining.  \nproducts :: array of [Product](http://lua-api.factorio.com/latest/Concepts.html#Product): Products obtained by mining this entity.  \nfluid_amount :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The required fluid amount if any.  \nrequired_fluid :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The prototype name of the required fluid if any.  \nmining_trigger :: [Trigger](http://lua-api.factorio.com/latest/Concepts.html#Trigger) (optional): The mining trigger if any."
      },
      "minimum_resource_amount": {
        "name": "minimum_resource_amount",
        "type": "uint",
        "mode": "[R]",
        "doc": "Minimum amount of this resource. Will be ````\nnil````\nwhen used on a non-resource."
      },
      "mining_drill_radius": {
        "name": "mining_drill_radius",
        "type": "double",
        "mode": "[R]",
        "doc": "The mining radius of this mining drill prototype or ````\nnil````\nif this isn't a mining drill prototyp"
      },
      "mining_speed": {
        "name": "mining_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "The mining speed of this mining drill/character prototype or ````\nnil````"
      },
      "module_inventory_size": {
        "name": "module_inventory_size",
        "type": "uint",
        "mode": "[R]",
        "doc": "The module inventory size or ````\nnil````\nif this entity doesn't support module"
      },
      "move_while_shooting": {
        "name": "move_while_shooting",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Whether this unit prototype can move while shooting or ````\nnil````\n."
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "neighbour_bonus": {
        "name": "neighbour_bonus",
        "type": "double",
        "mode": "[R]",
        "doc": "_Can only be used if this is Reactor_"
      },
      "neighbour_collision_increase": {
        "name": "neighbour_collision_increase",
        "type": "double",
        "mode": "[R]",
        "doc": "Controls how much a reactor extends when connected to other reactor    \n_Can only be used if this is Reactor_"
      },
      "next_upgrade": {
        "name": "next_upgrade",
        "type": "LuaEntityPrototype",
        "mode": "[R]",
        "doc": "The next upgrade for this entity or ````\nnil````\n."
      },
      "normal_resource_amount": {
        "name": "normal_resource_amount",
        "type": "uint",
        "mode": "[R]",
        "doc": "The normal amount for this resource. ````\nnil````\nwhen not a resource."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "pollution_to_join_attack": {
        "name": "pollution_to_join_attack",
        "type": "float",
        "mode": "[R]",
        "doc": "The amount of pollution that has to be absorbed by the unit's spawner before the unit will leave the spawner and attack the source of the pollutio  \n````\nnil````\nwhen prototype is not a unit prototype."
      },
      "production": {
        "name": "production",
        "type": "double",
        "mode": "[R]",
        "doc": "The max production this solar panel prototype produces or ````\nnil````"
      },
      "pumping_speed": {
        "name": "pumping_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "The pumping speed of this offshore pump, normal pump, or ````\nnil````"
      },
      "radar_range": {
        "name": "radar_range",
        "type": "uint",
        "mode": "[R]",
        "doc": "The radar range of this unit prototype or ````\nnil````\n."
      },
      "radius": {
        "name": "radius",
        "type": "double",
        "mode": "[R]",
        "doc": "The radius of this entity prototype."
      },
      "reach_distance": {
        "name": "reach_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "_Can only be used if this is Character_"
      },
      "reach_resource_distance": {
        "name": "reach_resource_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "_Can only be used if this is Character_"
      },
      "remains_when_mined": {
        "name": "remains_when_mined",
        "type": "array of LuaEntityPrototype",
        "mode": "[R]",
        "doc": "The remains left behind when this entity is mine"
      },
      "repair_speed_modifier": {
        "name": "repair_speed_modifier",
        "type": "uint",
        "mode": "[R]",
        "doc": "Repair-speed modifier for this entity. Actual repair speed will   \n````\ntool_repair_speed * entity_repair_speed_modifier````\n. May be ````\nnil````\n."
      },
      "researching_speed": {
        "name": "researching_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "The base researching speed of this lab prototype or ````\nnil````"
      },
      "resistances": {
        "name": "resistances",
        "type": "Resistances",
        "mode": "[R]"
      },
      "resource_categories": {
        "name": "resource_categories",
        "type": "dictionary string → boolean",
        "mode": "[R]",
        "doc": "The resource categories this mining drill supports or ````\nnil````\nif not a mining dil    \n\n**Note: ** The value in the dictionary is meaningless and exists just to allow the dictionary type for easy lookup."
      },
      "resource_category": {
        "name": "resource_category",
        "type": "string",
        "mode": "[R]",
        "doc": "Category of this resource. ````\n\"basic-solid\"````\n, ````\n\"basic-fluid\"````\nor ````\nnil````\n(when not a resource    \n\n**Note: ** During data stage this property is named \"category\"."
      },
      "respawn_time": {
        "name": "respawn_time",
        "type": "uint",
        "mode": "[R]",
        "doc": "_Can only be used if this is Character_"
      },
      "result_units": {
        "name": "result_units",
        "mode": "[R]",
        "doc": "The result units and spawn points with weight and evolution factor for a biter spawner entity. Each UnitSpawnDefinition is a table:   \nunit :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the unit that would be spawned  \nspawn_points :: array of SpawnPoint: Each SpawnPoint is a table:   \nevolution_factor :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Evolution factor for which this weight applies.  \nweight :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Probability of spawning this unit at this evolution factor.",
        "type": "array of UnitSpawnDefinition"
      },
      "rocket_parts_required": {
        "name": "rocket_parts_required",
        "type": "uint",
        "mode": "[R]",
        "doc": "The rocket parts required for this rocket silo prototype or ````\nnil````"
      },
      "rotation_speed": {
        "name": "rotation_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "The rotation speed of this car prototype or ````\nnil````\nif not a car prototyp"
      },
      "running_speed": {
        "name": "running_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "_Can only be used if this is Character_"
      },
      "secondary_collision_box": {
        "name": "secondary_collision_box",
        "type": "BoundingBox",
        "mode": "[R]",
        "doc": "The secondary bounding box used for collision checking, or ````\nnil````\nif it doesn't have one. This is only used in rails and rail remnants."
      },
      "selectable_in_game": {
        "name": "selectable_in_game",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this entity selectable?"
      },
      "selection_box": {
        "name": "selection_box",
        "type": "BoundingBox",
        "mode": "[R]",
        "doc": "The bounding box used for drawing selection."
      },
      "selection_priority": {
        "name": "selection_priority",
        "type": "uint",
        "mode": "[R]",
        "doc": "The selection priority of this entity - a value between 0 and 2"
      },
      "shooting_cursor_size": {
        "name": "shooting_cursor_size",
        "type": "double",
        "mode": "[R]",
        "doc": "The cursor size used when shooting at this entit"
      },
      "spawn_cooldown": {
        "name": "spawn_cooldown",
        "type": "table",
        "mode": "[R]",
        "doc": "The spawning cooldown for this enemy spawner prototype or ````\nnil````  \nIt is a table:   \nmin :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \nmax :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
      },
      "spawning_time_modifier": {
        "name": "spawning_time_modifier",
        "type": "double",
        "mode": "[R]",
        "doc": "The spawning time modifier of this unit prototype or ````\nnil````\n."
      },
      "speed": {
        "name": "speed",
        "type": "double",
        "mode": "[R]",
        "doc": "The default speed of this flying robot, rolling stock, unit or ````\nnil````"
      },
      "speed_multiplier_when_out_of_energy": {
        "name": "speed_multiplier_when_out_of_energy",
        "type": "float",
        "mode": "[R]",
        "doc": "The speed multiplier when this flying robot is out of energy or ````\nnil````"
      },
      "stack": {
        "name": "stack",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this inserter is a stack-typ"
      },
      "sticker_box": {
        "name": "sticker_box",
        "type": "BoundingBox",
        "mode": "[R]",
        "doc": "The bounding box used to attach sticker type entities."
      },
      "subgroup": {
        "name": "subgroup",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "Subgroup of this entity."
      },
      "supply_area_distance": {
        "name": "supply_area_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The supply area of this electric pole, beacon, or ````\nnil````\nif this is neithe"
      },
      "tank_driving": {
        "name": "tank_driving",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this car prototype uses tank controls to drive or ````\nnil````\nif this is not a car prototyp"
      },
      "target_temperature": {
        "name": "target_temperature",
        "type": "double",
        "mode": "[R]",
        "doc": "The target temperature of this boiler prototype or ````\nnil````"
      },
      "ticks_to_keep_aiming_direction": {
        "name": "ticks_to_keep_aiming_direction",
        "type": "uint",
        "mode": "[R]",
        "doc": "_Can only be used if this is Character_"
      },
      "ticks_to_keep_gun": {
        "name": "ticks_to_keep_gun",
        "type": "uint",
        "mode": "[R]",
        "doc": "_Can only be used if this is Character_"
      },
      "ticks_to_stay_in_combat": {
        "name": "ticks_to_stay_in_combat",
        "type": "uint",
        "mode": "[R]",
        "doc": "_Can only be used if this is Character_"
      },
      "time_to_live": {
        "name": "time_to_live",
        "type": "uint",
        "mode": "[R]",
        "doc": "The time to live for this prototype or ````\n0````\nif prototype doesn't have time_to_live or time_before_remove"
      },
      "timeout": {
        "name": "timeout",
        "type": "uint",
        "mode": "[R]",
        "doc": "The time it takes this land mine to ar"
      },
      "tree_color_count": {
        "name": "tree_color_count",
        "type": "uint8",
        "mode": "[R]",
        "doc": "If it is a tree, return the number of colors it supports. ````\nnil````\notherwis"
      },
      "turret_range": {
        "name": "turret_range",
        "type": "uint",
        "mode": "[R]",
        "doc": "The range of this turret or ````\nnil````\nif this isn't a turret related prototyp"
      },
      "turret_rotation_speed": {
        "name": "turret_rotation_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "The turret rotation speed of this car prototype or ````\nnil````\nif not a car prototyp"
      },
      "type": {
        "name": "type",
        "type": "string",
        "mode": "[R]",
        "doc": "Type of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "vision_distance": {
        "name": "vision_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The vision distance of this unit prototype or ````\nnil````\n."
      },
      "weight": {
        "name": "weight",
        "type": "double",
        "mode": "[R]",
        "doc": "The weight of this vehicle prototype or ````\nnil````\nif not a vehicle prototyp"
      }
    },
    "doc": "Prototype of an entity."
  },
  "LuaEquipment": {
    "name": "LuaEquipment",
    "type": "LuaEquipment",
    "inherits": [],
    "properties": {
      "burner": {
        "name": "burner",
        "type": "LuaBurner",
        "mode": "[R]",
        "doc": "The burner energy source for this equipment or ````\nnil````\nif there isn't on"
      },
      "energy": {
        "name": "energy",
        "type": "double",
        "mode": "[RW]",
        "doc": "Current available energy."
      },
      "generator_power": {
        "name": "generator_power",
        "type": "double",
        "mode": "[R]",
        "doc": "Energy generated per tick."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "max_energy": {
        "name": "max_energy",
        "type": "double",
        "mode": "[R]",
        "doc": "Maximum amount of energy that can be stored in this equipment."
      },
      "max_shield": {
        "name": "max_shield",
        "type": "double",
        "mode": "[R]",
        "doc": "Maximum shield value."
      },
      "max_solar_power": {
        "name": "max_solar_power",
        "type": "double",
        "mode": "[R]",
        "doc": "Maximum solar power generated."
      },
      "movement_bonus": {
        "name": "movement_bonus",
        "type": "double",
        "mode": "[R]",
        "doc": "Movement speed bonus."
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this equipment."
      },
      "position": {
        "name": "position",
        "type": "Position",
        "mode": "[R]",
        "doc": "Position of this equipment in the equipment grid."
      },
      "prototype": {
        "name": "prototype",
        "type": "LuaEquipmentPrototype",
        "mode": "[R]"
      },
      "shape": {
        "name": "shape",
        "type": "table",
        "mode": "[R]",
        "doc": "Shape of this equipment. It is a table:   \nwidth :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nheight :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
      },
      "shield": {
        "name": "shield",
        "type": "double",
        "mode": "[RW]",
        "doc": "Current shield value of the equipmen    \n\n**Note: ** Can't be set higher than [LuaEquipment::max_shield](http://lua-api.factorio.com/latest/LuaEquipment.html#LuaEquipment.max_shield)."
      },
      "type": {
        "name": "type",
        "type": "string",
        "mode": "[R]",
        "doc": "Type of this equipment."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "An item in one's power armour."
  },
  "LuaEquipmentGrid": {
    "name": "LuaEquipmentGrid",
    "type": "LuaEquipmentGrid",
    "inherits": [],
    "properties": {
      "available_in_batteries": {
        "name": "available_in_batteries",
        "type": "double",
        "mode": "[R]",
        "doc": "The total energy stored in all batteries in the equipment grid."
      },
      "battery_capacity": {
        "name": "battery_capacity",
        "type": "double",
        "mode": "[R]",
        "doc": "Total energy storage capacity of all batteries in the equipment grid."
      },
      "can_move": {
        "name": "can_move",
        "type": "function",
        "doc": "Check whether moving an equipment would succeed    \n\n**Parameters**  \nTable with the following fields:   \nequipment :: [LuaEquipment](http://lua-api.factorio.com/latest/LuaEquipment.html): The equipment to move  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to put it",
        "returns": "boolean",
        "args": {
          "equipment": {
            "name": "equipment",
            "type": "LuaEquipment",
            "doc": "Table with the following fields:   \nequipment :: [LuaEquipment](http://lua-api.factorio.com/latest/LuaEquipment.html): The equipment to move  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to put it"
          }
        }
      },
      "clear": {
        "name": "clear",
        "doc": "Clear all equipment from the grid. I.e. remove it without actually returning it.",
        "type": "function"
      },
      "equipment": {
        "name": "equipment",
        "type": "array of LuaEquipment",
        "mode": "[R]",
        "doc": "All the equipment in this grid."
      },
      "generator_energy": {
        "name": "generator_energy",
        "type": "double",
        "mode": "[R]",
        "doc": "Total energy per tick generated by the equipment inside this grid."
      },
      "get": {
        "name": "get",
        "type": "function",
        "doc": "Find equipment in the Equipment Grid based off a position    \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position  \n\n**Return value**  \nThe found equipment, or ````\nnil````\nif equipment could not be found at the given position.",
        "returns": "LuaEquipment",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position"
          }
        }
      },
      "get_contents": {
        "name": "get_contents",
        "type": "function",
        "doc": "Get counts of all equipment in this grid.   \n\n**Return value**  \nThe counts, indexed by equipment names.",
        "returns": "dictionary string → uint"
      },
      "height": {
        "name": "height",
        "type": "uint",
        "mode": "[R]",
        "doc": "Height of the equipment grid."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "inhibit_movement_bonus": {
        "name": "inhibit_movement_bonus",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "True if this movement bonus equipment is turned off, otherwise fals"
      },
      "max_shield": {
        "name": "max_shield",
        "type": "float",
        "mode": "[R]",
        "doc": "The maximum amount of shields this equipment grid ha"
      },
      "max_solar_energy": {
        "name": "max_solar_energy",
        "type": "double",
        "mode": "[R]",
        "doc": "Maximum energy per tick that can be created by any solar panels in the equipment grid. Actual generat  \nenergy varies depending on the daylight levels."
      },
      "move": {
        "name": "move",
        "type": "function",
        "doc": "Move an equipment within this grid    \n\n**Parameters**  \nTable with the following fields:   \nequipment :: [LuaEquipment](http://lua-api.factorio.com/latest/LuaEquipment.html): The equipment to move  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to put it  \n\n**Return value**  \n````\ntrue````\nif the equipment was successfully moved.",
        "returns": "boolean",
        "args": {
          "equipment": {
            "name": "equipment",
            "type": "LuaEquipment",
            "doc": "Table with the following fields:   \nequipment :: [LuaEquipment](http://lua-api.factorio.com/latest/LuaEquipment.html): The equipment to move  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to put it"
          }
        }
      },
      "prototype": {
        "name": "prototype",
        "type": "LuaEquipmentGridPrototype",
        "mode": "[R]"
      },
      "put": {
        "name": "put",
        "type": "function",
        "doc": "Insert an equipment into the grid    \n\n**Parameters**  \nTable with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Equipment prototype name  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Grid position to put the equipment in.  \n\n**Return value**  \nThe newly-added equipment, or ````\nnil````\nif the equipment could not be added.",
        "returns": "LuaEquipment",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Equipment prototype name  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Grid position to put the equipment in."
          }
        }
      },
      "shield": {
        "name": "shield",
        "type": "float",
        "mode": "[R]",
        "doc": "The amount of shields this equipment grid ha"
      },
      "take": {
        "name": "take",
        "type": "function",
        "doc": "Remove an equipment from the grid    \n\n**Parameters**  \nTable with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Take the equipment that contains this position in the grid.  \nequipment :: [LuaEquipment](http://lua-api.factorio.com/latest/LuaEquipment.html) (optional): Take this exact equipment.  \nEither ````\nposition````\nor ````\nequipment````\nmust be specified.  \n\n**Return value**  \nThe removed equipment, or ````\nnil````\nif no equipment was removed.",
        "returns": "SimpleItemStack",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "Table with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Take the equipment that contains this position in the grid.  \nequipment :: [LuaEquipment](http://lua-api.factorio.com/latest/LuaEquipment.html) (optional): Take this exact equipment.  \nEither ````\nposition````\nor ````\nequipment````\nmust be specified."
          }
        }
      },
      "take_all": {
        "name": "take_all",
        "type": "function",
        "doc": "Remove all equipment from the grid.   \n\n**Return value**  \nCount of each removed equipment, indexed by their prototype names.",
        "returns": "dictionary string → uint"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "width": {
        "name": "width",
        "type": "uint",
        "mode": "[R]",
        "doc": "Width of the equipment grid."
      }
    },
    "doc": "An equipment grid is the inside of a power armour."
  },
  "LuaEquipmentGridPrototype": {
    "name": "LuaEquipmentGridPrototype",
    "type": "LuaEquipmentGridPrototype",
    "inherits": [],
    "properties": {
      "equipment_categories": {
        "name": "equipment_categories",
        "type": "array of string",
        "mode": "[R]",
        "doc": "Equipment category names for the categories that may be inserted into this equipment grid. The grid will acce  \nany equipment that has at least one category in this lis    \nSee also  \n[LuaEquipmentPrototype::equipment_categories](http://lua-api.factorio.com/latest/LuaEquipmentPrototype.html#LuaEquipmentPrototype.equipment_categories)"
      },
      "height": {
        "name": "height",
        "type": "uint",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "locked": {
        "name": "locked",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the player can move equipment into or out of this gri"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "width": {
        "name": "width",
        "type": "uint",
        "mode": "[R]"
      }
    },
    "doc": "Prototype of an equipment grid."
  },
  "LuaEquipmentPrototype": {
    "name": "LuaEquipmentPrototype",
    "type": "LuaEquipmentPrototype",
    "inherits": [],
    "properties": {
      "background_color": {
        "name": "background_color",
        "type": "Color",
        "mode": "[R]",
        "doc": "The background color of this equipment prototype."
      },
      "burner_prototype": {
        "name": "burner_prototype",
        "type": "LuaBurnerPrototype",
        "mode": "[R]",
        "doc": "The burner energy source prototype this equipment uses or ````\nnil````"
      },
      "electric_energy_source_prototype": {
        "name": "electric_energy_source_prototype",
        "type": "LuaElectricEnergySourcePrototype",
        "mode": "[R]",
        "doc": "The electric energy source prototype this equipment uses or ````\nnil````"
      },
      "energy_consumption": {
        "name": "energy_consumption",
        "type": "double",
        "mode": "[R]"
      },
      "energy_per_shield": {
        "name": "energy_per_shield",
        "type": "double",
        "mode": "[R]",
        "doc": "The energy per shield point restored. 0 for non-shield equipment."
      },
      "energy_production": {
        "name": "energy_production",
        "type": "double",
        "mode": "[R]",
        "doc": "The max power generated by this equipment."
      },
      "energy_source": {
        "name": "energy_source",
        "type": "LuaElectricEnergySourcePrototype",
        "mode": "[R]",
        "doc": "The energy source prototype for the equipment."
      },
      "equipment_categories": {
        "name": "equipment_categories",
        "type": "array of string",
        "mode": "[R]",
        "doc": "Category names for this equipment. These categories will be used to determine whether this equipment is allow  \nin a particular equipment gri    \nSee also  \n[LuaEquipmentGridPrototype::equipment_categories](http://lua-api.factorio.com/latest/LuaEquipmentGridPrototype.html#LuaEquipmentGridPrototype.equipment_categories)"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "logistic_parameters": {
        "name": "logistic_parameters",
        "type": "table",
        "mode": "[R]",
        "doc": "The logistic parameters for roboport equipmen  \nTable with the following fields:   \nspawn_and_station_height :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \ncharge_approach_distance :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nlogistic_radius :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nconstruction_radius :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \ncharging_station_count :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \ncharging_distance :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \ncharging_station_shift :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)  \ncharging_energy :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \ncharging_threshold_distance :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nrobot_vertical_acceleration :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nstationing_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)  \nrobot_limit :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nlogistics_connection_distance :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)"
      },
      "movement_bonus": {
        "name": "movement_bonus",
        "type": "float",
        "mode": "[R]",
        "doc": "_Can only be used if this is MovementBonusEquipmentPrototype_"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "night_vision_tint": {
        "name": "night_vision_tint",
        "type": "Color",
        "mode": "[R]",
        "doc": "_Can only be used if this is NightVisionEquipmentPrototype_"
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "shape": {
        "name": "shape",
        "type": "table",
        "mode": "[R]",
        "doc": "Shape of this equipment prototype. It is a table:   \nwidth :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nheight :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
      },
      "shield": {
        "name": "shield",
        "type": "float",
        "mode": "[R]",
        "doc": "The shield value of this equipment. 0 for non-shield equipment."
      },
      "take_result": {
        "name": "take_result",
        "type": "LuaItemPrototype",
        "mode": "[R]",
        "doc": "The result item when taking this equipment out of an equipment grid. ````\nnil````\nif there is no result item."
      },
      "type": {
        "name": "type",
        "type": "string",
        "mode": "[R]",
        "doc": "Type of this equipment prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Prototype of a modular equipment."
  },
  "LuaFlowStatistics": {
    "name": "LuaFlowStatistics",
    "type": "LuaFlowStatistics",
    "inherits": [],
    "properties": {
      "force": {
        "name": "force",
        "type": "LuaForce",
        "mode": "[R]",
        "doc": "The force these statistics belong to or ````\nnil````\nfor pollution statistics."
      },
      "get_flow_count": {
        "name": "get_flow_count",
        "type": "function",
        "doc": "Gets the flow count value for the given time fram    \n\n**Parameters**  \nTable with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The prototype name.  \ninput :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Read the input values or the output values  \nprecision_index :: [defines.flow_precision_index](http://lua-api.factorio.com/latest/defines.html#defines.flow_precision_index): The precision to read.  \ncount :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If true, the count is returned instead of the per-time-frame value.",
        "returns": "double",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The prototype name.  \ninput :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Read the input values or the output values  \nprecision_index :: [defines.flow_precision_index](http://lua-api.factorio.com/latest/defines.html#defines.flow_precision_index): The precision to read.  \ncount :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If true, the count is returned instead of the per-time-frame value."
          }
        }
      },
      "get_input_count": {
        "name": "get_input_count",
        "type": "function",
        "doc": "Gets the total input count for a given prototype.   \n\n**Parameters**  \nstring: The prototype name.",
        "returns": "uint64 or double",
        "args": {
          "string": {
            "name": "string",
            "doc": "string: The prototype name.",
            "type": "string"
          }
        }
      },
      "get_output_count": {
        "name": "get_output_count",
        "type": "function",
        "doc": "Gets the total output count for a given prototype.   \n\n**Parameters**  \nstring: The prototype name.",
        "returns": "uint64 or double",
        "args": {
          "string": {
            "name": "string",
            "doc": "string: The prototype name.",
            "type": "string"
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "input_counts": {
        "name": "input_counts",
        "type": "dictionary string → array of uint64 or double",
        "mode": "[R]",
        "doc": "List of input counts indexed by name &lt;&gt; valu  \nRepresents the data that is shown on the left side of the GUI for the given statistics."
      },
      "on_flow": {
        "name": "on_flow",
        "doc": "Adds a value to this flow statistic    \n\n**Parameters**  \nstring: The prototype name.  \ncount :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): The count: positive or negative determines if the value goes in the input or output statistics.",
        "type": "function",
        "args": {
          "count": {
            "name": "count",
            "type": "float",
            "doc": "count :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): The count: positive or negative determines if the value goes in the input or output statistics."
          },
          "string": {
            "name": "string",
            "doc": "string: The prototype name.",
            "type": "string"
          }
        }
      },
      "output_counts": {
        "name": "output_counts",
        "type": "dictionary string → array of uint64 or double",
        "mode": "[R]",
        "doc": "List of output counts indexed by name &lt;&gt; valu  \nRepresents the data that is shown on the right side of the GUI for the given statistics."
      },
      "set_input_count": {
        "name": "set_input_count",
        "doc": "Sets the total input count for a given prototype.   \n\n**Parameters**  \nstring: The prototype name.  \ncount :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64) or [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The new count. The type depends on the instance of the statistics.",
        "type": "function",
        "args": {
          "count": {
            "name": "count",
            "type": "uint64 or double",
            "doc": "count :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64) or [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The new count. The type depends on the instance of the statistics."
          },
          "string": {
            "name": "string",
            "doc": "string: The prototype name.",
            "type": "string"
          }
        }
      },
      "set_output_count": {
        "name": "set_output_count",
        "doc": "Sets the total output count for a given prototype.   \n\n**Parameters**  \nstring: The prototype name.  \ncount :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64) or [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The new count. The type depends on the instance of the statistics.",
        "type": "function",
        "args": {
          "count": {
            "name": "count",
            "type": "uint64 or double",
            "doc": "count :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64) or [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The new count. The type depends on the instance of the statistics."
          },
          "string": {
            "name": "string",
            "doc": "string: The prototype name.",
            "type": "string"
          }
        }
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Encapsulates statistic data for different parts of the game.\n In the context of flow statistics, input and output describe on which side of the associated GUI the values are shown. Input values are shown on the left side, output values on the right side."
  },
  "LuaFluidBox": {
    "name": "LuaFluidBox",
    "type": "LuaFluidBox",
    "inherits": [],
    "properties": {
      "get_capacity": {
        "name": "get_capacity",
        "type": "function",
        "doc": "The capacity of the given fluidbox inde    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "returns": "double",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "get_connections": {
        "name": "get_connections",
        "type": "function",
        "doc": "The fluidbox connections for the given fluidbox inde    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "returns": "array of LuaFluidBox",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "get_filter": {
        "name": "get_filter",
        "type": "function",
        "doc": "The filter of the given fluidbox index, 'nil' if non    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n\n**Return value**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Fluid prototype name of the filtered fluid.  \nminimum_temperature :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The minimum temperature allowed into the fluidbox  \nmaximum_temperature :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The maximum temperature allowed into the fluidbox  \nor 'nil'.",
        "returns": "table",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "get_flow": {
        "name": "get_flow",
        "type": "function",
        "doc": "Flow through the fluidbox in the last tick. It is the larger of in-flow and out-flo  \nNote that wagons do not track it and will return     \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "returns": "double",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "get_locked_fluid": {
        "name": "get_locked_fluid",
        "type": "function",
        "doc": "Returns the fluid the fluidbox is locked onto (along with its whole syste  \nReturns 'nil' for no lo    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "returns": "string",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "get_prototype": {
        "name": "get_prototype",
        "type": "function",
        "doc": "The prototype of this fluidbox inde    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "returns": "LuaFluidBoxPrototype",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "operator []": {
        "name": "operator []",
        "type": "Fluid or nil",
        "mode": "[R]",
        "doc": "Access, set or clear a fluid box. The index must always be in bounds (see <a href=\"LuaFluidBox.html#LuaFluidBox.operator%20#\">LuaFluidBox::operator #</a>  \nnew fluidboxes may not be added or removed using this operator. If the given fluid box doesn't contain a  \nfluid, ````\nnil````\nis returned. Similarly, ````\nnil````\ncan be written to a fluid box to remove all fluid from it."
      },
      "operator #": {
        "name": "operator #",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of fluid boxes."
      },
      "owner": {
        "name": "owner",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity that owns this fluidbo"
      },
      "set_filter": {
        "name": "set_filter",
        "type": "function",
        "doc": "Set the filter of the given fluidbox index, 'nil' to clea  \nSome entities cannot have their fluidbox filter set, notably fluid wagons and crafting machine    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \ntable: Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Fluid prototype name of the filtered fluid.  \nminimum_temperature :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The minimum temperature allowed into the fluidbox  \nmaximum_temperature :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The maximum temperature allowed into the fluidbox  \nforce :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Force the filter to be set, regardless of current fluid content.  \nor 'nil'.  \n\n**Return value**  \nIf the filter was set successfully.",
        "returns": "boolean",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          },
          "table": {
            "name": "table",
            "type": "string",
            "doc": "table: Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Fluid prototype name of the filtered fluid.  \nminimum_temperature :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The minimum temperature allowed into the fluidbox  \nmaximum_temperature :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The maximum temperature allowed into the fluidbox  \nforce :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Force the filter to be set, regardless of current fluid content.  \nor 'nil'."
          }
        }
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "An array of fluid boxes of an entity. Entities may contain more than one fluid box, and some can change the number\n of fluid boxes -- for instance, an assembling machine will change its number of fluid boxes depending\n on its active recipe."
  },
  "LuaFluidBoxPrototype": {
    "name": "LuaFluidBoxPrototype",
    "type": "LuaFluidBoxPrototype",
    "inherits": [],
    "properties": {
      "base_area": {
        "name": "base_area",
        "type": "double",
        "mode": "[R]"
      },
      "base_level": {
        "name": "base_level",
        "type": "double",
        "mode": "[R]"
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntityPrototype",
        "mode": "[R]",
        "doc": "The entity that this belongs t"
      },
      "filter": {
        "name": "filter",
        "type": "LuaFluidPrototype",
        "mode": "[R]",
        "doc": "The filter or ````\nnil````\nif no filter is se"
      },
      "height": {
        "name": "height",
        "type": "double",
        "mode": "[R]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "index": {
        "name": "index",
        "type": "uint",
        "mode": "[R]",
        "doc": "The index of this fluidbox prototype in the owning entit"
      },
      "maximum_temperature": {
        "name": "maximum_temperature",
        "type": "double",
        "mode": "[R]",
        "doc": "The maximum temperature or ````\nnil````\nif none is se"
      },
      "minimum_temperature": {
        "name": "minimum_temperature",
        "type": "double",
        "mode": "[R]",
        "doc": "The minimum temperature or ````\nnil````\nif none is se"
      },
      "pipe_connections": {
        "name": "pipe_connections",
        "type": "array of FluidBoxConnection",
        "mode": "[R]",
        "doc": "The pipe connection point"
      },
      "production_type": {
        "name": "production_type",
        "type": "string",
        "mode": "[R]",
        "doc": "The production type. \"input\", \"output\", \"input-output\", or \"none"
      },
      "render_layer": {
        "name": "render_layer",
        "type": "string",
        "mode": "[R]",
        "doc": "The render laye"
      },
      "secondary_draw_orders": {
        "name": "secondary_draw_orders",
        "type": "array of int",
        "mode": "[R]",
        "doc": "The secondary draw orders for the 4 possible connection direction"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "volume": {
        "name": "volume",
        "type": "double",
        "mode": "[R]"
      }
    },
    "doc": "A prototype of a fluidbox owned by some LuaEntityPrototype."
  },
  "LuaFluidPrototype": {
    "name": "LuaFluidPrototype",
    "type": "LuaFluidPrototype",
    "inherits": [],
    "properties": {
      "base_color": {
        "name": "base_color",
        "type": "Color",
        "mode": "[R]"
      },
      "default_temperature": {
        "name": "default_temperature",
        "type": "double",
        "mode": "[R]",
        "doc": "Default temperature of the fluid."
      },
      "emissions_multiplier": {
        "name": "emissions_multiplier",
        "type": "double",
        "mode": "[R]"
      },
      "flow_color": {
        "name": "flow_color",
        "type": "Color",
        "mode": "[R]"
      },
      "fuel_value": {
        "name": "fuel_value",
        "type": "double",
        "mode": "[R]"
      },
      "gas_temperature": {
        "name": "gas_temperature",
        "type": "double",
        "mode": "[R]"
      },
      "group": {
        "name": "group",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "Group of this prototype."
      },
      "heat_capacity": {
        "name": "heat_capacity",
        "type": "double",
        "mode": "[R]",
        "doc": "How much energy the fluid will generate at max temperature assuming 100% efficiency steam engine."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "hidden": {
        "name": "hidden",
        "type": "boolean",
        "mode": "[R]"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "max_temperature": {
        "name": "max_temperature",
        "type": "double",
        "mode": "[R]",
        "doc": "Maximum temperature the fluid can reach."
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string for this prototype."
      },
      "subgroup": {
        "name": "subgroup",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "Subgroup of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Prototype of a fluid."
  },
  "LuaForce": {
    "name": "LuaForce",
    "type": "LuaForce",
    "inherits": [],
    "properties": {
      "add_chart_tag": {
        "name": "add_chart_tag",
        "type": "function",
        "doc": "Adds a custom chart tag to the given surface and returns the new tag or ````\nnil````\nif the given position isn't valid for a chart ta    \n\n**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Which surface to add the tag to.  \ntag: Table with the following fields:   \nicon :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID) (optional): )  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \ntext :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nlast_user :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional)  \n\n**Note: ** The chunk must be charted for a tag to be valid at that location.  \n\n**Note: ** The icon, text, or both must be provided.",
        "returns": "LuaCustomChartTag",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Which surface to add the tag to."
          },
          "tag": {
            "name": "tag",
            "type": "SignalID",
            "doc": "tag: Table with the following fields:   \nicon :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID) (optional): )  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \ntext :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nlast_user :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional)"
          }
        }
      },
      "add_research": {
        "name": "add_research",
        "doc": "Add this technology to the back of the research queue if the queue is enable  \nOtherwise, set this technology to be researched no    \n\n**Parameters**  \ntechnology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification)",
        "type": "function",
        "args": {
          "technology": {
            "name": "technology",
            "type": "TechnologySpecification",
            "doc": "technology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification)"
          }
        }
      },
      "ai_controllable": {
        "name": "ai_controllable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Enables some higher-level AI behaviour for this force. When set to ````\ntrue````\n, biters belonging   \nthis force will automatically expand into new territories, build new spawners, and form un  \ngroups. By default, this value is ````\ntrue````\nfor the enemy force and ````\nfalse````\nfor all others.   \n\n**Note: ** Setting this to ````\nfalse````\ndoes not turn off biters' AI. They will still move around and atta  \nplayers who come close.  \n\n**Note: ** It is necessary for a force to be AI controllable in order to be able to create unit grou  \nor build bases from scripts."
      },
      "artillery_range_modifier": {
        "name": "artillery_range_modifier",
        "type": "double",
        "mode": "[RW]"
      },
      "auto_character_trash_slots": {
        "name": "auto_character_trash_slots",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif auto character trash slots are enabled. Character trash slots must be &gt; 0 as well for this to actually be use"
      },
      "cancel_charting": {
        "name": "cancel_charting",
        "doc": "Cancels pending chart requests for the given surface or all surface    \n\n**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)",
        "type": "function",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)"
          }
        }
      },
      "cancel_current_research": {
        "name": "cancel_current_research",
        "doc": "Stop the research currently in progres  \nThis will remove any dependent technologies from the research queue.",
        "type": "function"
      },
      "character_build_distance_bonus": {
        "name": "character_build_distance_bonus",
        "type": "uint",
        "mode": "[RW]"
      },
      "character_health_bonus": {
        "name": "character_health_bonus",
        "type": "double",
        "mode": "[RW]"
      },
      "character_inventory_slots_bonus": {
        "name": "character_inventory_slots_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "the number of additional inventory slots the character main inventory has."
      },
      "character_item_drop_distance_bonus": {
        "name": "character_item_drop_distance_bonus",
        "type": "uint",
        "mode": "[RW]"
      },
      "character_item_pickup_distance_bonus": {
        "name": "character_item_pickup_distance_bonus",
        "type": "double",
        "mode": "[RW]"
      },
      "character_logistic_slot_count": {
        "name": "character_logistic_slot_count",
        "type": "double",
        "mode": "[RW]",
        "doc": "Number of character logistic slots."
      },
      "character_loot_pickup_distance_bonus": {
        "name": "character_loot_pickup_distance_bonus",
        "type": "double",
        "mode": "[RW]"
      },
      "character_reach_distance_bonus": {
        "name": "character_reach_distance_bonus",
        "type": "uint",
        "mode": "[RW]"
      },
      "character_resource_reach_distance_bonus": {
        "name": "character_resource_reach_distance_bonus",
        "type": "double",
        "mode": "[RW]"
      },
      "character_running_speed_modifier": {
        "name": "character_running_speed_modifier",
        "type": "double",
        "mode": "[RW]"
      },
      "character_trash_slot_count": {
        "name": "character_trash_slot_count",
        "type": "double",
        "mode": "[RW]",
        "doc": "Number of character trash slots."
      },
      "chart": {
        "name": "chart",
        "doc": "Chart a portion of the map. The chart for the given area is refreshed; it creates chart f  \nany parts of the given area that haven't been charted yet    \n\n**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area on the given surface to chart.  \n\n**Example**  \nCharts a 2048x2048 rectangle centered around the origi    \n````\ngame.player.force.chart(game.player.surface,  \n                        {{x = -1024, y = -1024}, {x = 1024, y = 1024}})````",
        "type": "function",
        "args": {
          "area": {
            "name": "area",
            "type": "BoundingBox",
            "doc": "area :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area on the given surface to chart."
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)"
          }
        }
      },
      "chart_all": {
        "name": "chart_all",
        "doc": "Chart all generated chunk    \n\n**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Which surface to chart or all if not given.",
        "type": "function",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Which surface to chart or all if not given."
          }
        }
      },
      "clear_chart": {
        "name": "clear_chart",
        "doc": "Erases chart data for this forc    \n\n**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Which surface to erase chart data for or if not provided all surfaces charts are erased.",
        "type": "function",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Which surface to erase chart data for or if not provided all surfaces charts are erased."
          }
        }
      },
      "connected_players": {
        "name": "connected_players",
        "type": "array of LuaPlayer",
        "mode": "[R]",
        "doc": "The connected players belonging to this forc  \nThis is primarily useful when you want to do some action against all online players of this force.  \n\n**Note: ** This does *not* index using player index. See [LuaPlayer::index](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.index) on each player instance for the player index."
      },
      "current_research": {
        "name": "current_research",
        "type": "LuaTechnology",
        "mode": "[R]",
        "doc": "The current technology in research, or ````\nnil````\nif no research is currently ongoing."
      },
      "deconstruction_time_to_live": {
        "name": "deconstruction_time_to_live",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The time, in ticks, before a deconstruction order is removed."
      },
      "disable_all_prototypes": {
        "name": "disable_all_prototypes",
        "doc": "Disable all recipes and technologies. Only recipes and technologies enabled explicitly wi  \nbe useable from this point.",
        "type": "function"
      },
      "disable_research": {
        "name": "disable_research",
        "doc": "Disable research for this force.",
        "type": "function"
      },
      "enable_all_prototypes": {
        "name": "enable_all_prototypes",
        "doc": "Enables all recipes and technologie  \nThe opposite of [LuaForce::disable_all_prototypes](http://lua-api.factorio.com/latest/LuaForce.html#LuaForce.disable_all_prototypes)",
        "type": "function"
      },
      "enable_all_recipes": {
        "name": "enable_all_recipes",
        "doc": "Unlock all recipes.",
        "type": "function"
      },
      "enable_all_technologies": {
        "name": "enable_all_technologies",
        "doc": "Unlock all technologies.",
        "type": "function"
      },
      "enable_research": {
        "name": "enable_research",
        "doc": "Enable research for this force.",
        "type": "function"
      },
      "entity_build_count_statistics": {
        "name": "entity_build_count_statistics",
        "type": "LuaFlowStatistics",
        "mode": "[R]",
        "doc": "The entity build statistics for this force (built and mined)"
      },
      "evolution_factor": {
        "name": "evolution_factor",
        "type": "double",
        "mode": "[RW]",
        "doc": "Evolution factor of this force."
      },
      "evolution_factor_by_killing_spawners": {
        "name": "evolution_factor_by_killing_spawners",
        "type": "double",
        "mode": "[RW]"
      },
      "evolution_factor_by_pollution": {
        "name": "evolution_factor_by_pollution",
        "type": "double",
        "mode": "[RW]"
      },
      "evolution_factor_by_time": {
        "name": "evolution_factor_by_time",
        "type": "double",
        "mode": "[RW]"
      },
      "find_chart_tags": {
        "name": "find_chart_tags",
        "type": "function",
        "doc": "Finds all custom chart tags within the given bounding box on the given surfac    \n\n**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)",
        "returns": "array of LuaCustomChartTag",
        "args": {
          "area": {
            "name": "area",
            "type": "BoundingBox",
            "doc": "area :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)"
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)"
          }
        }
      },
      "find_logistic_network_by_position": {
        "name": "find_logistic_network_by_position",
        "type": "function",
        "returns": "LuaLogisticNetwork",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position to find a network for"
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to search on"
          }
        },
        "doc": "**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position to find a network for  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to search on  \n\n**Return value**  \nThe found network or ````\nnil````\n."
      },
      "fluid_production_statistics": {
        "name": "fluid_production_statistics",
        "type": "LuaFlowStatistics",
        "mode": "[R]",
        "doc": "The fluid production statistics for this force."
      },
      "following_robots_lifetime_modifier": {
        "name": "following_robots_lifetime_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "Additional lifetime for following robot"
      },
      "friendly_fire": {
        "name": "friendly_fire",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If friendly fire is enabled for this force."
      },
      "get_ammo_damage_modifier": {
        "name": "get_ammo_damage_modifier",
        "type": "function",
        "returns": "double",
        "args": {
          "ammo": {
            "name": "ammo",
            "type": "string",
            "doc": "ammo :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Ammo category"
          }
        },
        "doc": "**Parameters**  \nammo :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Ammo category"
      },
      "get_cease_fire": {
        "name": "get_cease_fire",
        "type": "function",
        "doc": "Will this force attack members of another force?   \n\n**Parameters**  \nother :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)",
        "returns": "boolean",
        "args": {
          "other": {
            "name": "other",
            "type": "ForceSpecification",
            "doc": "other :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)"
          }
        }
      },
      "get_entity_count": {
        "name": "get_entity_count",
        "type": "function",
        "doc": "Count entities of given type    \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the entity.  \n\n**Return value**  \nNumber of entities of given prototype belonging to this force.  \n\n**Note: ** This function has O(1) time complexity as entity counts are kept and maintain  \nin the game engine.",
        "returns": "uint",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the entity."
          }
        }
      },
      "get_friend": {
        "name": "get_friend",
        "type": "function",
        "doc": "Is this force a friend?   \n\n**Parameters**  \nother :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)",
        "returns": "boolean",
        "args": {
          "other": {
            "name": "other",
            "type": "ForceSpecification",
            "doc": "other :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)"
          }
        }
      },
      "get_gun_speed_modifier": {
        "name": "get_gun_speed_modifier",
        "type": "function",
        "returns": "double",
        "args": {
          "ammo": {
            "name": "ammo",
            "type": "string",
            "doc": "ammo :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Ammo category"
          }
        },
        "doc": "**Parameters**  \nammo :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Ammo category"
      },
      "get_hand_crafting_disabled_for_recipe": {
        "name": "get_hand_crafting_disabled_for_recipe",
        "type": "function",
        "doc": "Gets if the given recipe is explicitly disabled from being hand crafte    \n\n**Parameters**  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html)",
        "returns": "boolean",
        "args": {
          "recipe": {
            "name": "recipe",
            "type": "string or LuaRecipe",
            "doc": "recipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html)"
          }
        }
      },
      "get_item_launched": {
        "name": "get_item_launched",
        "type": "function",
        "doc": "Gets the count of a given item launched in rocket    \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item to get  \n\n**Return value**  \nThe count of the item that has been launched.",
        "returns": "uint",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item to get"
          }
        }
      },
      "get_saved_technology_progress": {
        "name": "get_saved_technology_progress",
        "type": "function",
        "doc": "Gets the saved progress for the given technology or ````\nnil````\nif there is no saved progres    \n\n**Parameters**  \ntechnology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification): The technology  \n\n**Return value**  \nThe progress as a percent.",
        "returns": "double",
        "args": {
          "technology": {
            "name": "technology",
            "type": "TechnologySpecification",
            "doc": "technology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification): The technology"
          }
        }
      },
      "get_spawn_position": {
        "name": "get_spawn_position",
        "type": "function",
        "returns": "Position",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)"
          }
        },
        "doc": "**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)"
      },
      "get_train_stops": {
        "name": "get_train_stops",
        "type": "function",
        "doc": "Gets train stops matching the given filter    \n\n**Parameters**  \nopts (optional): Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)",
        "returns": "array of LuaEntity",
        "args": {
          "opts": {
            "name": "opts",
            "type": "string or array of string",
            "doc": "opts (optional): Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)"
          }
        }
      },
      "get_trains": {
        "name": "get_trains",
        "type": "function",
        "returns": "array of LuaTrain",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): If given only trains on the surface are returned."
          }
        },
        "doc": "**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): If given only trains on the surface are returned."
      },
      "get_turret_attack_modifier": {
        "name": "get_turret_attack_modifier",
        "type": "function",
        "returns": "double",
        "args": {
          "turret": {
            "name": "turret",
            "type": "string",
            "doc": "turret :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Turret prototype name"
          }
        },
        "doc": "**Parameters**  \nturret :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Turret prototype name"
      },
      "ghost_time_to_live": {
        "name": "ghost_time_to_live",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The time, in ticks, before a placed ghost disappears."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "index": {
        "name": "index",
        "type": "uint",
        "mode": "[R]",
        "doc": "Unique ID associated with this force."
      },
      "inserter_stack_size_bonus": {
        "name": "inserter_stack_size_bonus",
        "type": "double",
        "mode": "[RW]",
        "doc": "The inserter stack size bonus for non stack inserters"
      },
      "is_chunk_charted": {
        "name": "is_chunk_charted",
        "type": "function",
        "doc": "Has a chunk been charted?   \n\n**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \nposition :: [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition): Position of the chunk.",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "ChunkPosition",
            "doc": "position :: [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition): Position of the chunk."
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)"
          }
        }
      },
      "is_chunk_visible": {
        "name": "is_chunk_visible",
        "type": "function",
        "doc": "Is the given chunk currently charted and visible (not covered by fog of war) on the ma    \n\n**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \nposition :: [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition)",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "ChunkPosition",
            "doc": "position :: [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition)"
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)"
          }
        }
      },
      "is_pathfinder_busy": {
        "name": "is_pathfinder_busy",
        "type": "function",
        "doc": "Is pathfinder busy? When the pathfinder is busy, it won't accept any more pathfinding requests.",
        "returns": "boolean"
      },
      "item_production_statistics": {
        "name": "item_production_statistics",
        "type": "LuaFlowStatistics",
        "mode": "[R]",
        "doc": "The item production statistics for this force."
      },
      "items_launched": {
        "name": "items_launched",
        "type": "dictionary string → uint",
        "mode": "[R]",
        "doc": "All of the items that have been launched in rocket"
      },
      "kill_all_units": {
        "name": "kill_all_units",
        "doc": "Kill all units and flush the pathfinder.",
        "type": "function"
      },
      "kill_count_statistics": {
        "name": "kill_count_statistics",
        "type": "LuaFlowStatistics",
        "mode": "[R]",
        "doc": "The kill counter statistics for this force."
      },
      "laboratory_productivity_bonus": {
        "name": "laboratory_productivity_bonus",
        "type": "double",
        "mode": "[RW]"
      },
      "laboratory_speed_modifier": {
        "name": "laboratory_speed_modifier",
        "type": "double",
        "mode": "[RW]"
      },
      "logistic_networks": {
        "name": "logistic_networks",
        "type": "dictionary string → array of LuaLogisticNetwork",
        "mode": "[R]",
        "doc": "List of logistic networks, grouped by surface."
      },
      "manual_crafting_speed_modifier": {
        "name": "manual_crafting_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "Multiplier of the manual crafting speed. Default value is ````\n0````  \nThe actual crafting speed will be multiplied by ````\n1 + manual_crafting_speed_modifier````\n.   \n\n**Example**  \nDouble the player's crafting spe    \n````\ngame.player.force.manual_crafting_speed_modifier = 1````"
      },
      "manual_mining_speed_modifier": {
        "name": "manual_mining_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "Multiplier of the manual mining speed. Default value is ````\n0````  \nThe actual mining speed will be multiplied by ````\n1 + manual_mining_speed_modifier````\n.   \n\n**Example**  \nDouble the player's mining spe    \n````\ngame.player.force.manual_mining_speed_modifier = 1````"
      },
      "max_failed_attempts_per_tick_per_construction_queue": {
        "name": "max_failed_attempts_per_tick_per_construction_queue",
        "type": "uint",
        "mode": "[RW]"
      },
      "max_successful_attempts_per_tick_per_construction_queue": {
        "name": "max_successful_attempts_per_tick_per_construction_queue",
        "type": "uint",
        "mode": "[RW]"
      },
      "maximum_following_robot_count": {
        "name": "maximum_following_robot_count",
        "type": "uint",
        "mode": "[RW]",
        "doc": "Maximum number of follower robots."
      },
      "mining_drill_productivity_bonus": {
        "name": "mining_drill_productivity_bonus",
        "type": "double",
        "mode": "[RW]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of the force.   \n\n**Example**  \nPrints \"````\nplayer````    \n````\ngame.player.print(game.player.force.name)````"
      },
      "play_sound": {
        "name": "play_sound",
        "type": "function",
        "doc": "Plays a sound for every player on this forc    \n\n**Parameters**  \nTable with the following fields:   \npath :: [SoundPath](http://lua-api.factorio.com/latest/Concepts.html#SoundPath): The sound to play  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Where the sound should be played. If not given it's played 'everywhere'.  \nvolume_modifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Must be between 0 and 1 inclusive.",
        "returns": "boolean",
        "args": {
          "path": {
            "name": "path",
            "type": "SoundPath",
            "doc": "Table with the following fields:   \npath :: [SoundPath](http://lua-api.factorio.com/latest/Concepts.html#SoundPath): The sound to play  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Where the sound should be played. If not given it's played 'everywhere'.  \nvolume_modifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Must be between 0 and 1 inclusive."
          }
        }
      },
      "players": {
        "name": "players",
        "type": "array of LuaPlayer",
        "mode": "[R]",
        "doc": "Players belonging to this force."
      },
      "previous_research": {
        "name": "previous_research",
        "type": "LuaTechnology",
        "mode": "[RW]",
        "doc": "The previous research if any."
      },
      "print": {
        "name": "print",
        "doc": "Print text to the chat console of all players on this force.   \n\n**Parameters**  \nmessage :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)",
        "type": "function",
        "args": {
          "color": {
            "name": "color",
            "type": "Color",
            "doc": "color :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)"
          },
          "message": {
            "name": "message",
            "type": "LocalisedString",
            "doc": "message :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
          }
        }
      },
      "rechart": {
        "name": "rechart",
        "doc": "Force a rechart of the whole chart.",
        "type": "function"
      },
      "recipes": {
        "name": "recipes",
        "type": "custom dictionary string → LuaRecipe",
        "mode": "[R]",
        "doc": "Recipes available to this force, indexed by their name.   \n\n**Example**  \nPrints the category of the given reci    \n````\ngame.player.print(game.player.force.recipes[\"transport-belt\"].category)````"
      },
      "research_all_technologies": {
        "name": "research_all_technologies",
        "doc": "Research all technologie    \n\n**Parameters**  \ninclude_disabled_prototypes (optional): If technologies that are explicitly disabled in the prototype are also researched. This defaults to false.",
        "args": {
          "include_disabled_prototypes": {
            "name": "include_disabled_prototypes",
            "doc": "include_disabled_prototypes (optional): If technologies that are explicitly disabled in the prototype are also researched. This defaults to false.",
            "type": "include_disabled_prototypes"
          }
        },
        "type": "function"
      },
      "research_progress": {
        "name": "research_progress",
        "type": "double",
        "mode": "[RW]",
        "doc": "Progress of current research, as a number in range [0, 1]."
      },
      "research_queue": {
        "name": "research_queue",
        "type": "array of TechnologySpecification",
        "mode": "[RW]",
        "doc": "The research queue of this forc  \nReading this attribute gives an array of [LuaTechnology](http://lua-api.factorio.com/latest/LuaTechnology.html  \nTo write to this, the entire table must be written. Providing an empty table or ````\nnil````\nwill empty the research queue and cancel the current researc  \nWriting to this when the research queue is disabled will simply set the last research in the table as the current research.  \n\n**Note: ** The first research in the queue is the current research."
      },
      "research_queue_enabled": {
        "name": "research_queue_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Whether the research queue is available for this force."
      },
      "reset": {
        "name": "reset",
        "doc": "Reset everything. All technologies are set to not researched, all modifiers are set to default values.",
        "type": "function"
      },
      "reset_evolution": {
        "name": "reset_evolution",
        "doc": "Resets evolution for this force to zero.",
        "type": "function"
      },
      "reset_recipes": {
        "name": "reset_recipes",
        "doc": "Load the original version of all recipes from the prototypes.",
        "type": "function"
      },
      "reset_technologies": {
        "name": "reset_technologies",
        "doc": "Load the original versions of technologies from prototypes. Preserves research state of technologies.",
        "type": "function"
      },
      "reset_technology_effects": {
        "name": "reset_technology_effects",
        "doc": "Reapplies all possible research effects, including unlocked recipes. Any custom changes are lost. Preserves research state of technologies.",
        "type": "function"
      },
      "rockets_launched": {
        "name": "rockets_launched",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The number of rockets launche"
      },
      "set_ammo_damage_modifier": {
        "name": "set_ammo_damage_modifier",
        "type": "function",
        "args": {
          "ammo": {
            "name": "ammo",
            "type": "string",
            "doc": "ammo :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Ammo category"
          },
          "modifier": {
            "name": "modifier",
            "type": "double",
            "doc": "modifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          }
        },
        "doc": "**Parameters**  \nammo :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Ammo category  \nmodifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
      },
      "set_cease_fire": {
        "name": "set_cease_fire",
        "doc": "Stop attacking members of a given force.   \n\n**Parameters**  \nother :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)  \ncease_fire :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): When ````\ntrue````\n, this force won't attack ````\nother````\n; otherwise it will.",
        "type": "function",
        "args": {
          "cease_fire": {
            "name": "cease_fire",
            "type": "boolean",
            "doc": "cease_fire :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): When ````\ntrue````\n, this force won't attack ````\nother````\n; otherwise it will."
          },
          "other": {
            "name": "other",
            "type": "ForceSpecification",
            "doc": "other :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)"
          }
        }
      },
      "set_friend": {
        "name": "set_friend",
        "doc": "Friends have unrestricted access to buildings and turrets won't fire at them.   \n\n**Parameters**  \nother :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)  \ncease_fire :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)",
        "type": "function",
        "args": {
          "cease_fire": {
            "name": "cease_fire",
            "type": "boolean",
            "doc": "cease_fire :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          },
          "other": {
            "name": "other",
            "type": "ForceSpecification",
            "doc": "other :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)"
          }
        }
      },
      "set_gun_speed_modifier": {
        "name": "set_gun_speed_modifier",
        "type": "function",
        "args": {
          "ammo": {
            "name": "ammo",
            "type": "string",
            "doc": "ammo :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Ammo category"
          },
          "modifier": {
            "name": "modifier",
            "type": "double",
            "doc": "modifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          }
        },
        "doc": "**Parameters**  \nammo :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Ammo category  \nmodifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
      },
      "set_hand_crafting_disabled_for_recipe": {
        "name": "set_hand_crafting_disabled_for_recipe",
        "doc": "Sets if the given recipe can be hand-crafted. This is used to explicitly disable hand crafting a recipe - it won't allow hand-crafting otherwise not hand-craftable recipe    \n\n**Parameters**  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html)  \nhand_crafting_disabled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)",
        "type": "function",
        "args": {
          "hand_crafting_disabled": {
            "name": "hand_crafting_disabled",
            "type": "boolean",
            "doc": "hand_crafting_disabled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          },
          "recipe": {
            "name": "recipe",
            "type": "string or LuaRecipe",
            "doc": "recipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html)"
          }
        }
      },
      "set_item_launched": {
        "name": "set_item_launched",
        "doc": "Sets the count of a given item launched in rocket    \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item to set  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to set",
        "type": "function",
        "args": {
          "count": {
            "name": "count",
            "type": "uint",
            "doc": "count :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to set"
          },
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item to set"
          }
        }
      },
      "set_saved_technology_progress": {
        "name": "set_saved_technology_progress",
        "doc": "Sets the saved progress for the given technolog  \nThe technology must not be in progress, must not be completed, and the new progress must be &lt; 100    \n\n**Parameters**  \ntechnology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification): The technology  \ndouble: Progress as a percent. Set to ````\nnil````\nto remove the saved progress.",
        "type": "function",
        "args": {
          "double": {
            "name": "double",
            "doc": "double: Progress as a percent. Set to ````\nnil````\nto remove the saved progress.",
            "type": "double"
          },
          "technology": {
            "name": "technology",
            "type": "TechnologySpecification",
            "doc": "technology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification): The technology"
          }
        }
      },
      "set_spawn_position": {
        "name": "set_spawn_position",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The new position on the given surface."
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to set the spawn position for."
          }
        },
        "doc": "**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The new position on the given surface.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to set the spawn position for."
      },
      "set_turret_attack_modifier": {
        "name": "set_turret_attack_modifier",
        "type": "function",
        "args": {
          "modifier": {
            "name": "modifier",
            "type": "double",
            "doc": "modifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          },
          "turret": {
            "name": "turret",
            "type": "string",
            "doc": "turret :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Turret prototype name"
          }
        },
        "doc": "**Parameters**  \nturret :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Turret prototype name  \nmodifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
      },
      "share_chart": {
        "name": "share_chart",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If sharing chart data is enabled for this force."
      },
      "stack_inserter_capacity_bonus": {
        "name": "stack_inserter_capacity_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "Number of items that can be transferred by stack inserters. When writing to this value, it must be 0 &gt;= and &lt;= 200."
      },
      "technologies": {
        "name": "technologies",
        "type": "custom dictionary string → LuaTechnology",
        "mode": "[R]",
        "doc": "Technologies owned by this force, indexed by their name.   \n\n**Example**  \nResearches the technology for the player's for    \n````\ngame.player.force.technologies[\"steel-processing\"].researched = true````"
      },
      "train_braking_force_bonus": {
        "name": "train_braking_force_bonus",
        "type": "double",
        "mode": "[RW]"
      },
      "unchart_chunk": {
        "name": "unchart_chunk",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "ChunkPosition",
            "doc": "position :: [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition): The chunk position to unchart."
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to unchart on."
          }
        },
        "doc": "**Parameters**  \nposition :: [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition): The chunk position to unchart.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to unchart on."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "worker_robots_battery_modifier": {
        "name": "worker_robots_battery_modifier",
        "type": "double",
        "mode": "[RW]"
      },
      "worker_robots_speed_modifier": {
        "name": "worker_robots_speed_modifier",
        "type": "double",
        "mode": "[RW]"
      },
      "worker_robots_storage_bonus": {
        "name": "worker_robots_storage_bonus",
        "type": "double",
        "mode": "[RW]"
      },
      "zoom_to_world_blueprint_enabled": {
        "name": "zoom_to_world_blueprint_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Ability to create new blueprints using empty blueprint item when using zoom-to-worl"
      },
      "zoom_to_world_deconstruction_planner_enabled": {
        "name": "zoom_to_world_deconstruction_planner_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Ability to use deconstruction planner when using zoom-to-worl"
      },
      "zoom_to_world_enabled": {
        "name": "zoom_to_world_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Ability to use zoom-to-world on ma"
      },
      "zoom_to_world_ghost_building_enabled": {
        "name": "zoom_to_world_ghost_building_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Ability to build ghosts through blueprint or direct ghost placement, or \"mine\" ghosts when using zoom-to-worl"
      },
      "zoom_to_world_selection_tool_enabled": {
        "name": "zoom_to_world_selection_tool_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Ability to use custom selection tools when using zoom-to-worl"
      }
    },
    "doc": "LuaForce encapsulates data local to each \"force\" or \"faction\" of the game.\n Default forces are player, enemy and neutral. Players and mods can create\n additional forces (up to 64 total)."
  },
  "LuaGameScript": {
    "name": "LuaGameScript",
    "type": "LuaGameScript",
    "inherits": [],
    "properties": {
      "active_mods": {
        "name": "active_mods",
        "type": "dictionary string → string",
        "mode": "[R]",
        "doc": "The active mods versions. The keys are mod names, the values are the version    \n\n**Example**  \nThis will print the names and versions of active mods to player p's consol    \n````\nfor name, version in pairs(game.active_mods) do  \n  p.print(name .. \" version \" .. version)  \nend````"
      },
      "ammo_category_prototypes": {
        "name": "ammo_category_prototypes",
        "type": "custom dictionary string → LuaAmmoCategoryPrototype",
        "mode": "[R]"
      },
      "auto_save": {
        "name": "auto_save",
        "doc": "Instruct the game to perform an auto-sav    \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The autosave name if any. Saves will be named _autosave-*name* when provided.  \n\n**Note: ** Only the server will save in multiplayer. In single player a standard auto-save is triggered.",
        "type": "function",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The autosave name if any. Saves will be named _autosave-*name* when provided."
          }
        }
      },
      "autoplace_control_prototypes": {
        "name": "autoplace_control_prototypes",
        "type": "custom dictionary string → LuaAutoplaceControlPrototype",
        "mode": "[R]"
      },
      "autosave_enabled": {
        "name": "autosave_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "True by default. Can be used to disable autosavin  \nMake sure to turn it back on soon afte"
      },
      "backer_names": {
        "name": "backer_names",
        "type": "custom dictionary uint → string",
        "mode": "[R]"
      },
      "ban_player": {
        "name": "ban_player",
        "doc": "Bans the given player from this multiplayer game. Does nothing if this is a single player game of if the player running this isn't an admi    \n\n**Parameters**  \nPlayerSpecification: The player to ban.  \nreason :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): The reason given if any.",
        "type": "function",
        "args": {
          "PlayerSpecification": {
            "name": "PlayerSpecification",
            "doc": "PlayerSpecification: The player to ban.",
            "type": "PlayerSpecification"
          },
          "reason": {
            "name": "reason",
            "type": "LocalisedString",
            "doc": "reason :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): The reason given if any."
          }
        }
      },
      "check_consistency": {
        "name": "check_consistency",
        "doc": "Run internal consistency checks. Allegedly prints any errors it finds.   \n\n**Note: ** Exists mainly for debugging reasons.",
        "type": "function"
      },
      "check_prototype_translations": {
        "name": "check_prototype_translations",
        "doc": "Goes over all items, entities, tiles, recipes, technologies among other things and logs if the locale is incorrec    \n\n**Note: ** Also prints true/false if called from the console.",
        "type": "function"
      },
      "connected_players": {
        "name": "connected_players",
        "type": "array of LuaPlayer",
        "mode": "[R]",
        "doc": "The online playe  \nThis is primarily useful when you want to do some action against all online players.  \n\n**Note: ** This does *not* index using player index. See [LuaPlayer::index](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.index) on each player instance for the player index."
      },
      "count_pipe_groups": {
        "name": "count_pipe_groups",
        "doc": "Counts how many distinct groups of pipes exist in the world.",
        "type": "function"
      },
      "create_force": {
        "name": "create_force",
        "type": "function",
        "doc": "Create a new force    \n\n**Parameters**  \nforce :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the new force  \n\n**Return value**  \nThe force that was just created  \n\n**Note: ** The game currently supports a maximum of 64 forces, including the three built-in force  \nThis means that a maximum of 61 new forces may be created.  \n\n**Note: ** Force names must be unique.",
        "returns": "LuaForce",
        "args": {
          "force": {
            "name": "force",
            "type": "string",
            "doc": "force :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the new force"
          }
        }
      },
      "create_profiler": {
        "name": "create_profiler",
        "type": "function",
        "doc": "Creates a [LuaProfiler](http://lua-api.factorio.com/latest/LuaProfiler.html), which is used for measuring script performanc    \n\n**Note: ** LuaProfiler cannot be serialized.",
        "returns": "LuaProfiler"
      },
      "create_random_generator": {
        "name": "create_random_generator",
        "type": "function",
        "doc": "Creates a deterministic standalone random generator with the given seed or if a seed is not provided the initial map seed is use    \n\n**Parameters**  \nseed :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n\n**Note: ** *Make sure* you actually want to use this over math.random(...) as this provides entirely different functionality over math.random(...).",
        "returns": "LuaRandomGenerator",
        "args": {
          "seed": {
            "name": "seed",
            "type": "uint",
            "doc": "seed :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)"
          }
        }
      },
      "create_surface": {
        "name": "create_surface",
        "type": "function",
        "doc": "Create a new surface   \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the new surface  \nsettings :: [MapGenSettings](http://lua-api.factorio.com/latest/Concepts.html#MapGenSettings) (optional): Map generation settings  \n\n**Return value**  \nThe surface that was just created  \n\n**Note: ** The game currently supports a maximum of 4,294,967,295 surfaces, including the default surface.  \n\n**Note: ** Surface names must be unique",
        "returns": "LuaSurface",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the new surface"
          },
          "settings": {
            "name": "settings",
            "type": "MapGenSettings",
            "doc": "settings :: [MapGenSettings](http://lua-api.factorio.com/latest/Concepts.html#MapGenSettings) (optional): Map generation settings"
          }
        }
      },
      "custom_input_prototypes": {
        "name": "custom_input_prototypes",
        "type": "custom dictionary string → LuaCustomInputPrototype",
        "mode": "[R]"
      },
      "damage_prototypes": {
        "name": "damage_prototypes",
        "type": "custom dictionary string → LuaDamagePrototype",
        "mode": "[R]"
      },
      "decorative_prototypes": {
        "name": "decorative_prototypes",
        "type": "custom dictionary string → LuaDecorativePrototype",
        "mode": "[R]"
      },
      "default_map_gen_settings": {
        "name": "default_map_gen_settings",
        "type": "MapGenSettings",
        "mode": "[R]",
        "doc": "The default map gen settings for this sav"
      },
      "delete_surface": {
        "name": "delete_surface",
        "doc": "Deletes the given surface and all entities on i    \n\n**Parameters**  \nsurface :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaSurface](http://lua-api.factorio.com/latest/LuaSurface.html): The surface to be deleted. Currently the primary surface (1, 'nauvis') cannot be deleted.",
        "type": "function",
        "args": {
          "surface": {
            "name": "surface",
            "type": "string or LuaSurface",
            "doc": "surface :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaSurface](http://lua-api.factorio.com/latest/LuaSurface.html): The surface to be deleted. Currently the primary surface (1, 'nauvis') cannot be deleted."
          }
        }
      },
      "difficulty": {
        "name": "difficulty",
        "type": "defines.difficulty",
        "mode": "[R]",
        "doc": "Current scenario difficulty."
      },
      "difficulty_settings": {
        "name": "difficulty_settings",
        "type": "DifficultySettings",
        "mode": "[R]",
        "doc": "Although it can be done; because different difficulties can have different technology or recipe trees it's not recommended to change difficulty settings mid-game."
      },
      "direction_to_string": {
        "name": "direction_to_string",
        "doc": "Converts the given direction into the string version of the directio    \n\n**Parameters**  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction)",
        "type": "function",
        "args": {
          "direction": {
            "name": "direction",
            "type": "defines.direction",
            "doc": "direction :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction)"
          }
        }
      },
      "disable_replay": {
        "name": "disable_replay",
        "doc": "Disables replay saving for the current save file. Once done there's no way to re-enable replay saving for the save file without loading an old save.",
        "type": "function"
      },
      "disable_tips_and_tricks": {
        "name": "disable_tips_and_tricks",
        "doc": "Disable showing tips and tricks.",
        "type": "function"
      },
      "disable_tutorial_triggers": {
        "name": "disable_tutorial_triggers",
        "doc": "Disables tutorial triggers, that unlock new tutorials and show notices about unlocked tutorials.",
        "type": "function"
      },
      "draw_resource_selection": {
        "name": "draw_resource_selection",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "True by default. Can be used to disable the highlighting of resource patches when they are hovered on the ma"
      },
      "enemy_has_vision_on_land_mines": {
        "name": "enemy_has_vision_on_land_mines",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Determines if enemy land mines are completely invisible or no"
      },
      "entity_prototypes": {
        "name": "entity_prototypes",
        "type": "custom dictionary string → LuaEntityPrototype",
        "mode": "[R]"
      },
      "equipment_grid_prototypes": {
        "name": "equipment_grid_prototypes",
        "type": "custom dictionary string → LuaEquipmentGridPrototype",
        "mode": "[R]"
      },
      "equipment_prototypes": {
        "name": "equipment_prototypes",
        "type": "custom dictionary string → LuaEquipmentPrototype",
        "mode": "[R]"
      },
      "finished": {
        "name": "finished",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is the scenario finishe"
      },
      "fluid_prototypes": {
        "name": "fluid_prototypes",
        "type": "custom dictionary string → LuaFluidPrototype",
        "mode": "[R]"
      },
      "force_crc": {
        "name": "force_crc",
        "doc": "Force a CRC check. Tells all peers to calculate their current map CRC; these CRC are then compar  \nagainst each other. If a mismatch is detected, the game is desynced and some peers are forced   \nreconnect.",
        "type": "function"
      },
      "forces": {
        "name": "forces",
        "type": "custom dictionary string → LuaForce",
        "mode": "[R]"
      },
      "get_active_entities_count": {
        "name": "get_active_entities_count",
        "type": "function",
        "doc": "Gets the number of entities that are active (updated each tick    \n\n**Parameters**  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): If give, only the entities active on this surface are counted.  \n\n**Note: ** This is very expensive to calculate.",
        "returns": "uint",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): If give, only the entities active on this surface are counted."
          }
        }
      },
      "get_entity_by_tag": {
        "name": "get_entity_by_tag",
        "type": "function",
        "returns": "LuaEntity",
        "args": {
          "tag": {
            "name": "tag",
            "type": "string",
            "doc": "tag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)"
          }
        },
        "doc": "**Parameters**  \ntag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)"
      },
      "get_map_exchange_string": {
        "name": "get_map_exchange_string",
        "type": "function",
        "doc": "Gets the map exchange string for the map generation settings that were used to create this ma",
        "returns": "string"
      },
      "get_player": {
        "name": "get_player",
        "type": "function",
        "doc": "Gets the given player or returns ````\nnil````\nif no player is foun    \n\n**Parameters**  \nplayer :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The player index or name.  \n\n**Note: ** This is a shortcut for game.players[...]",
        "returns": "LuaPlayer",
        "args": {
          "player": {
            "name": "player",
            "type": "uint or string",
            "doc": "player :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The player index or name."
          }
        }
      },
      "get_surface": {
        "name": "get_surface",
        "type": "function",
        "doc": "Gets the given surface or returns ````\nnil````\nif no surface is foun    \n\n**Parameters**  \nsurface :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The surface index or name.  \n\n**Note: ** This is a shortcut for game.surfaces[...]",
        "returns": "LuaSurface",
        "args": {
          "surface": {
            "name": "surface",
            "type": "uint or string",
            "doc": "surface :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The surface index or name."
          }
        }
      },
      "get_train_stops": {
        "name": "get_train_stops",
        "type": "function",
        "doc": "Gets train stops matching the given filter    \n\n**Parameters**  \nopts (optional): Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)",
        "returns": "array of LuaEntity",
        "args": {
          "opts": {
            "name": "opts",
            "type": "string or array of string",
            "doc": "opts (optional): Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)"
          }
        }
      },
      "help": {
        "name": "help",
        "doc": "Internal",
        "type": "function"
      },
      "is_demo": {
        "name": "is_demo",
        "type": "function",
        "doc": "Is this the demo version of Factori",
        "returns": "boolean"
      },
      "is_multiplayer": {
        "name": "is_multiplayer",
        "type": "function",
        "doc": "Is the map loaded is multiplaye",
        "returns": "boolean"
      },
      "is_valid_sound_path": {
        "name": "is_valid_sound_path",
        "type": "function",
        "doc": "Checks if the given sound path is vali    \n\n**Parameters**",
        "returns": "boolean",
        "args": {
          "undefined": {
            "doc": ""
          }
        }
      },
      "item_prototypes": {
        "name": "item_prototypes",
        "type": "custom dictionary string → LuaItemPrototype",
        "mode": "[R]"
      },
      "json_to_table": {
        "name": "json_to_table",
        "type": "function",
        "doc": "Convert a JSON string to a table   \n\n**Parameters**  \njson :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The string to convert  \n\n**Return value**  \nThe returned object, or ````\nnil````\nif the json was invalid.",
        "returns": "Any",
        "args": {
          "json": {
            "name": "json",
            "type": "string",
            "doc": "json :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The string to convert"
          }
        }
      },
      "kick_player": {
        "name": "kick_player",
        "doc": "Kicks the given player from this multiplayer game. Does nothing if this is a single player game or if the player running this isn't an admi    \n\n**Parameters**  \nPlayerSpecification: The player to kick.  \nreason :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): The reason given if any.",
        "type": "function",
        "args": {
          "PlayerSpecification": {
            "name": "PlayerSpecification",
            "doc": "PlayerSpecification: The player to kick.",
            "type": "PlayerSpecification"
          },
          "reason": {
            "name": "reason",
            "type": "LocalisedString",
            "doc": "reason :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): The reason given if any."
          }
        }
      },
      "map_settings": {
        "name": "map_settings",
        "type": "MapSettings",
        "mode": "[R]"
      },
      "merge_forces": {
        "name": "merge_forces",
        "doc": "Marks two forces to be merge together. All entities in the source force will be reassigned to the target forc  \nThe source force will then be destroyed    \n\n**Parameters**  \nsource :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force to remove  \ndestination :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force to reassign all entities to  \n\n**Note: ** The three built-in forces -- player, enemy and neutral -- can't be destroyed. I.e. they can  \nbe used as the source argument to this function.  \n\n**Note: ** The source force is not merged until the end of the current tick   \nif called during the [on_forces_merging](http://lua-api.factorio.com/latest/events.html#on_forces_merging) event or [on_forces_merged](http://lua-api.factorio.com/latest/events.html#on_forces_merged) event the end of the next tick.",
        "type": "function",
        "args": {
          "destination": {
            "name": "destination",
            "type": "ForceSpecification",
            "doc": "destination :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force to reassign all entities to"
          },
          "source": {
            "name": "source",
            "type": "ForceSpecification",
            "doc": "source :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force to remove"
          }
        }
      },
      "mod_setting_prototypes": {
        "name": "mod_setting_prototypes",
        "type": "custom dictionary string → LuaModSettingPrototype",
        "mode": "[R]"
      },
      "mute_player": {
        "name": "mute_player",
        "doc": "Mutes the given player. Does nothing if the player running this isn't an admi    \n\n**Parameters**  \nPlayerSpecification: The player to mute.",
        "args": {
          "PlayerSpecification": {
            "name": "PlayerSpecification",
            "doc": "PlayerSpecification: The player to mute.",
            "type": "PlayerSpecification"
          }
        },
        "type": "function"
      },
      "named_noise_expressions": {
        "name": "named_noise_expressions",
        "type": "custom dictionary string → LuaNamedNoiseExpression",
        "mode": "[R]"
      },
      "noise_layer_prototypes": {
        "name": "noise_layer_prototypes",
        "type": "custom dictionary string → LuaNoiseLayerPrototype",
        "mode": "[R]"
      },
      "permissions": {
        "name": "permissions",
        "type": "LuaPermissionGroups",
        "mode": "[R]"
      },
      "play_sound": {
        "name": "play_sound",
        "type": "function",
        "doc": "Plays a sound for every player in the game on every surface    \n\n**Parameters**  \nTable with the following fields:   \npath :: [SoundPath](http://lua-api.factorio.com/latest/Concepts.html#SoundPath): The sound to play  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Where the sound should be played. If not given it's played 'everywhere'.  \nvolume_modifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Must be between 0 and 1 inclusive.",
        "returns": "boolean",
        "args": {
          "path": {
            "name": "path",
            "type": "SoundPath",
            "doc": "Table with the following fields:   \npath :: [SoundPath](http://lua-api.factorio.com/latest/Concepts.html#SoundPath): The sound to play  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Where the sound should be played. If not given it's played 'everywhere'.  \nvolume_modifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Must be between 0 and 1 inclusive."
          }
        }
      },
      "player": {
        "name": "player",
        "type": "LuaPlayer",
        "mode": "[R]",
        "doc": "The player typing at the console - ````\nnil````\nin all other instances. See [LuaGameScript::players](http://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.players) for accessing all players."
      },
      "players": {
        "name": "players",
        "type": "custom dictionary uint or string → LuaPlayer",
        "mode": "[R]",
        "doc": "**Note: ** This is a sparse table so pairs(), a known player index, or player name should be used to access elements."
      },
      "pollution_statistics": {
        "name": "pollution_statistics",
        "type": "LuaFlowStatistics",
        "mode": "[R]",
        "doc": "The pollution statistics for this map."
      },
      "print": {
        "name": "print",
        "doc": "Print text to the chat console all players.   \n\n**Parameters**  \nmessage :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)",
        "type": "function",
        "args": {
          "color": {
            "name": "color",
            "type": "Color",
            "doc": "color :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)"
          },
          "message": {
            "name": "message",
            "type": "LocalisedString",
            "doc": "message :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
          }
        }
      },
      "purge_player": {
        "name": "purge_player",
        "doc": "Purges the given players messages from the game. Does nothing if the player running this isn't an admi    \n\n**Parameters**  \nPlayerSpecification: The player to purge.",
        "args": {
          "PlayerSpecification": {
            "name": "PlayerSpecification",
            "doc": "PlayerSpecification: The player to purge.",
            "type": "PlayerSpecification"
          }
        },
        "type": "function"
      },
      "recipe_prototypes": {
        "name": "recipe_prototypes",
        "type": "custom dictionary string → LuaRecipePrototype",
        "mode": "[R]"
      },
      "regenerate_entity": {
        "name": "regenerate_entity",
        "doc": "Regenerate autoplacement of some entities on all surfaces. This can be used to autoplace newly-added entities    \n\n**Parameters**  \nentities :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \nPrototype names of entity or entities to autoplace.  \n\n**Note: ** All specified entity prototypes must be autoplacable.",
        "type": "function",
        "args": {
          "entities": {
            "name": "entities",
            "type": "string or array of string",
            "doc": "entities :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \nPrototype names of entity or entities to autoplace."
          }
        }
      },
      "reload_mods": {
        "name": "reload_mods",
        "doc": "Forces a reload of all mod    \n\n**Note: ** This will act like saving and loading from the mod(s) perspective.  \n\n**Note: ** This will do nothing if run in multiplayer.  \n\n**Note: ** This disables the replay if replay is enabled.",
        "type": "function"
      },
      "reload_script": {
        "name": "reload_script",
        "doc": "Forces a reload of the scenario script from the original scenario locatio    \n\n**Note: ** This disables the replay if replay is enabled.",
        "type": "function"
      },
      "remove_offline_players": {
        "name": "remove_offline_players",
        "doc": "Remove players who are currently not connected from the ma    \n\n**Parameters**  \nplayers :: array of [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): List of players to remove. If not specifie  \nremove all offline players.",
        "type": "function",
        "args": {
          "players": {
            "name": "players",
            "type": "array of LuaPlayer or string",
            "doc": "players :: array of [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): List of players to remove. If not specifie  \nremove all offline players."
          }
        }
      },
      "remove_path": {
        "name": "remove_path",
        "doc": "Remove file or directory. Given path is taken relative to the script output directory. Can be us  \nto remove files created by [LuaGameScript::write_file](http://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.write_file).   \n\n**Parameters**  \npath :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Path to remove, relative to the script output directory",
        "type": "function",
        "args": {
          "path": {
            "name": "path",
            "type": "string",
            "doc": "path :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Path to remove, relative to the script output directory"
          }
        }
      },
      "save_atlas": {
        "name": "save_atlas",
        "doc": "Saves the current configuration of Atlas to a file. This will result in huge file containing a  \nof the game graphics moved to as small space as possible.   \n\n**Note: ** Exists mainly for debugging reasons.",
        "type": "function"
      },
      "server_save": {
        "name": "server_save",
        "doc": "Instruct the server to save the ma    \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Save name. If not specified, writes into the currently-running save.",
        "type": "function",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Save name. If not specified, writes into the currently-running save."
          }
        }
      },
      "set_game_state": {
        "name": "set_game_state",
        "doc": "Set scenario stat    \n\n**Parameters**  \nTable with the following fields:   \ngame_finished :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \nplayer_won :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \nnext_level :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \ncan_continue :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \nvictorious_force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)",
        "type": "function",
        "args": {
          "game_finished": {
            "name": "game_finished",
            "type": "boolean",
            "doc": "Table with the following fields:   \ngame_finished :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \nplayer_won :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \nnext_level :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \ncan_continue :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \nvictorious_force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)"
          }
        }
      },
      "set_wait_for_screenshots_to_finish": {
        "name": "set_wait_for_screenshots_to_finish",
        "doc": "Forces the screenshot saving system to wait until all queued screenshots have been written to disk.",
        "type": "function"
      },
      "show_message_dialog": {
        "name": "show_message_dialog",
        "doc": "Show an in-game message dialo    \n\n**Parameters**  \nTable with the following fields:   \ntext :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString): What the dialog should say  \nimage :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Path to an image to show on the dialog  \npoint_to :: [GuiArrowSpecification](http://lua-api.factorio.com/latest/Concepts.html#GuiArrowSpecification) (optional)  \nIf specified, dialog will show an arrow pointing to this place. When not specified, the arrow will point to the player's positio  \n(Use ````\npoint_to={type=\"nowhere\"}````\nto remove the arrow entirely.) The dialog itself will be placed near the arrow's target.  \n\n**Note: ** Can only be used when the map contains exactly one player.",
        "type": "function",
        "args": {
          "text": {
            "name": "text",
            "type": "LocalisedString",
            "doc": "Table with the following fields:   \ntext :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString): What the dialog should say  \nimage :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Path to an image to show on the dialog  \npoint_to :: [GuiArrowSpecification](http://lua-api.factorio.com/latest/Concepts.html#GuiArrowSpecification) (optional)  \nIf specified, dialog will show an arrow pointing to this place. When not specified, the arrow will point to the player's positio  \n(Use ````\npoint_to={type=\"nowhere\"}````\nto remove the arrow entirely.) The dialog itself will be placed near the arrow's target."
          }
        }
      },
      "speed": {
        "name": "speed",
        "type": "float",
        "mode": "[RW]",
        "doc": "Speed to update the map at. 1.0 is normal speed -- 60 UP    \n\n**Note: ** Minimum value is 0.01."
      },
      "styles": {
        "name": "styles",
        "type": "custom dictionary string → string",
        "mode": "[R]",
        "doc": "The styles that [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html) can us"
      },
      "surfaces": {
        "name": "surfaces",
        "type": "custom dictionary uint or string → LuaSurface",
        "mode": "[R]"
      },
      "table_to_json": {
        "name": "table_to_json",
        "type": "function",
        "doc": "Convert a table to a JSON string   \n\n**Parameters**  \ndata :: [table](http://lua-api.factorio.com/latest/Builtin-Types.html#table)",
        "returns": "string",
        "args": {
          "data": {
            "name": "data",
            "type": "table",
            "doc": "data :: [table](http://lua-api.factorio.com/latest/Builtin-Types.html#table)"
          }
        }
      },
      "take_screenshot": {
        "name": "take_screenshot",
        "doc": "Take a screenshot and save it to a file    \n\n**Parameters**  \nTable with the following fields:   \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional)  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): If defined, the screenshot will only be taken for this player.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): If defined, the screenshot will be taken on this surface.  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): If defined, the screenshot will be centered on this position.  \nresolution :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Maximum allowed resolution is 16384x16384 (resp. 8192x8192 when anti_alias is true), but maximum recommended resolution is 4096x4096 (resp. 2048x2048).  \nzoom :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \npath :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Path to save the screenshot in  \nshow_gui :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Include game GUI in the screenshot?  \nshow_entity_info :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Include entity info (alt-mode)?  \nanti_alias :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Render in double resolution and scale down (including GUI)?  \nquality :: [int](http://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional): The render quality if using jpg format (0-100 inclusive).  \n\n**Note: ** If Factorio is running headless, this function will do nothing.",
        "type": "function",
        "args": {
          "player": {
            "name": "player",
            "type": "PlayerSpecification",
            "doc": "Table with the following fields:   \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional)  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): If defined, the screenshot will only be taken for this player.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): If defined, the screenshot will be taken on this surface.  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): If defined, the screenshot will be centered on this position.  \nresolution :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Maximum allowed resolution is 16384x16384 (resp. 8192x8192 when anti_alias is true), but maximum recommended resolution is 4096x4096 (resp. 2048x2048).  \nzoom :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \npath :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Path to save the screenshot in  \nshow_gui :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Include game GUI in the screenshot?  \nshow_entity_info :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Include entity info (alt-mode)?  \nanti_alias :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Render in double resolution and scale down (including GUI)?  \nquality :: [int](http://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional): The render quality if using jpg format (0-100 inclusive)."
          }
        }
      },
      "take_technology_screenshot": {
        "name": "take_technology_screenshot",
        "type": "function",
        "args": {
          "force": {
            "name": "force",
            "type": "ForceSpecification",
            "doc": "Table with the following fields:   \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The force to use. If not given the ````\n\"player````\n\" force is used.  \npath :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Path to save the screenshot in.  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): If defined, the screenshot will only be taken for this player.  \nselected_technology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional): The technology to highlight.  \nskip_disabled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If ````\ntrue````\n, disabled technologies will be skipped. Their successo  \nwill be attached to the disabled technology's parents. Defaults to ````\nfalse````\n.  \nquality :: [int](http://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional): The render quality if using jpg format (0-100 inclusive)."
          }
        },
        "doc": "**Parameters**  \nTable with the following fields:   \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The force to use. If not given the ````\n\"player````\n\" force is used.  \npath :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Path to save the screenshot in.  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): If defined, the screenshot will only be taken for this player.  \nselected_technology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional): The technology to highlight.  \nskip_disabled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If ````\ntrue````\n, disabled technologies will be skipped. Their successo  \nwill be attached to the disabled technology's parents. Defaults to ````\nfalse````\n.  \nquality :: [int](http://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional): The render quality if using jpg format (0-100 inclusive)."
      },
      "technology_prototypes": {
        "name": "technology_prototypes",
        "type": "custom dictionary string → LuaTechnologyPrototype",
        "mode": "[R]"
      },
      "tick": {
        "name": "tick",
        "type": "uint",
        "mode": "[R]",
        "doc": "Current map tick."
      },
      "tick_paused": {
        "name": "tick_paused",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If the tick has been paused. This means that entity update has been paused."
      },
      "ticks_played": {
        "name": "ticks_played",
        "type": "uint",
        "mode": "[R]",
        "doc": "The number of ticks since this game was 'created  \nA game is 'created' either by using \"new game\" or \"new game from scenario    \n\n**Note: ** This differs over [LuaGameScript::tick](http://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.tick) in that making a game from a scenario always starts with ticks_played value at 0 even if the scenario has its own level data where the [LuaGameScript::tick](http://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.tick) is &gt; 0.  \n\n**Note: ** This value has no relation with [LuaGameScript::tick](http://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.tick) and can be completely different values."
      },
      "ticks_to_run": {
        "name": "ticks_to_run",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The number of ticks to be run while the tick is pause  \nWhen [LuaGameScript::tick_paused](http://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.tick_paused) is true, ticks_to_run behaves the following wa  \nWhile this is &gt; 0, the entity update is running normally and this value is decremented every tick. When this reaches 0, the game will pause again."
      },
      "tile_prototypes": {
        "name": "tile_prototypes",
        "type": "custom dictionary string → LuaTilePrototype",
        "mode": "[R]"
      },
      "unban_player": {
        "name": "unban_player",
        "doc": "Unbans the given player from this multiplayer game. Does nothing if this is a single player game of if the player running this isn't an admi    \n\n**Parameters**  \nPlayerSpecification: The player to unban.",
        "args": {
          "PlayerSpecification": {
            "name": "PlayerSpecification",
            "doc": "PlayerSpecification: The player to unban.",
            "type": "PlayerSpecification"
          }
        },
        "type": "function"
      },
      "unmute_player": {
        "name": "unmute_player",
        "doc": "Unmutes the given player. Does nothing if the player running this isn't an admi    \n\n**Parameters**  \nPlayerSpecification: The player to unmute.",
        "args": {
          "PlayerSpecification": {
            "name": "PlayerSpecification",
            "doc": "PlayerSpecification: The player to unmute.",
            "type": "PlayerSpecification"
          }
        },
        "type": "function"
      },
      "virtual_signal_prototypes": {
        "name": "virtual_signal_prototypes",
        "type": "custom dictionary string → LuaVirtualSignalPrototype",
        "mode": "[R]"
      },
      "write_file": {
        "name": "write_file",
        "doc": "Write a string to a file.   \n\n**Parameters**  \nfilename :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Path to the file to write to.  \ndata :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString): File content  \nappend :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When ````\ntrue````\n, this will append to the end of the file. Defaults to ````\nfalse````\n, which will overwrite any pre-existing file with the new data.  \nfor_player :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): If given, the file will only be written for this player_index. 0 means only the server if one exists.",
        "type": "function",
        "args": {
          "append": {
            "name": "append",
            "type": "boolean",
            "doc": "append :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When ````\ntrue````\n, this will append to the end of the file. Defaults to ````\nfalse````\n, which will overwrite any pre-existing file with the new data."
          },
          "data": {
            "name": "data",
            "type": "LocalisedString",
            "doc": "data :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString): File content"
          },
          "filename": {
            "name": "filename",
            "type": "string",
            "doc": "filename :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Path to the file to write to."
          },
          "for_player": {
            "name": "for_player",
            "type": "uint",
            "doc": "for_player :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): If given, the file will only be written for this player_index. 0 means only the server if one exists."
          }
        }
      }
    },
    "doc": "Main toplevel type, provides access to most of the API though its members. An instance\n of LuaGameScript is available as the global object named game."
  },
  "LuaGenericOnOffControlBehavior": {
    "name": "LuaGenericOnOffControlBehavior",
    "type": "LuaGenericOnOffControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "circuit_condition": {
        "name": "circuit_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The circuit condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the circuit condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 cha  \nsignal    \n````\na_behavior.circuit_condition = {condition={comparator=\"&gt;\",  \n                                           first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                           constant=4}}````"
      },
      "connect_to_logistic_network": {
        "name": "connect_to_logistic_network",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif this should connect to the logistic network."
      },
      "disabled": {
        "name": "disabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the entity is currently disabled because of the control behavior."
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "logistic_condition": {
        "name": "logistic_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The logistic condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the logistic condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more th  \n4 chain signal    \n````\na_behavior.logistic_condition = {condition={comparator=\"&gt;\",  \n                                            first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                            constant=4}}````"
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "An abstract base class for behaviors that support switching the entity on or off based on some condition."
  },
  "LuaGroup": {
    "name": "LuaGroup",
    "type": "LuaGroup",
    "inherits": [],
    "properties": {
      "group": {
        "name": "group",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "The parent group if any; ````\nnil````\nif none."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]",
        "doc": "Localised name of the grou"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]"
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]"
      },
      "order_in_recipe": {
        "name": "order_in_recipe",
        "type": "string",
        "mode": "[R]",
        "doc": "The additional order value used in recipe orderin    \n\n**Note: ** Can only be used on groups, not on subgroups."
      },
      "subgroups": {
        "name": "subgroups",
        "type": "array of LuaGroup",
        "mode": "[R]",
        "doc": "Subgroups of this group.   \n\n**Note: ** Can only be used on groups, not on subgroups."
      },
      "type": {
        "name": "type",
        "type": "string",
        "mode": "[R]"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Item group or subgroup."
  },
  "LuaGui": {
    "name": "LuaGui",
    "type": "LuaGui",
    "inherits": [],
    "properties": {
      "center": {
        "name": "center",
        "type": "LuaGuiElement",
        "mode": "[R]",
        "doc": "The center part of the GUI. It is a flow elemen"
      },
      "children": {
        "name": "children",
        "type": "dictionary string → LuaGuiElement",
        "mode": "[R]",
        "doc": "The children GUI elements mapped by name &lt;&gt; elemen"
      },
      "goal": {
        "name": "goal",
        "type": "LuaGuiElement",
        "mode": "[R]",
        "doc": "The flow used in the objectives window. It is a flow elemen  \nThe objectives window is only visible when the flow is not empty or the objective text is se"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "is_valid_sprite_path": {
        "name": "is_valid_sprite_path",
        "type": "function",
        "doc": "Returns ````\ntrue````\nif sprite_path is valid and contains loaded sprite, otherwise ````\nfalse````\n. Sprite path of type ````\nfile````\ndoesn't validate if file exist    \n\n**Parameters**  \nsprite_path :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath): Path to a image.",
        "returns": "boolean",
        "args": {
          "sprite_path": {
            "name": "sprite_path",
            "type": "SpritePath",
            "doc": "sprite_path :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath): Path to a image."
          }
        }
      },
      "left": {
        "name": "left",
        "type": "LuaGuiElement",
        "mode": "[R]",
        "doc": "The left part of the GUI. It is a flow elemen"
      },
      "player": {
        "name": "player",
        "type": "LuaPlayer",
        "mode": "[R]",
        "doc": "The player who owns this gui."
      },
      "top": {
        "name": "top",
        "type": "LuaGuiElement",
        "mode": "[R]",
        "doc": "The top part of the GUI. It is a flow elemen"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "The root of the GUI. This type houses the root elements, top, left, center and goal, to which\n other elements can be added to be displayed on screen."
  },
  "LuaGuiElement": {
    "name": "LuaGuiElement",
    "type": "LuaGuiElement",
    "inherits": [],
    "properties": {
      "add": {
        "name": "add",
        "type": "function",
        "doc": "Add a child element.   \n\n**Parameters**  \nTable with the following fields:   \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The kind of the element to add. Has to be one of ````\n\"button\"````\n, ````\n\"sprite-button\"````  \n````\n\"checkbox\"````\n, ````\n\"flow\"````\n, ````\n\"frame\"````\n, ````\n\"label\"````\n, ````\n\"progressbar\"````\n, ````\n\"table\"````\n, ````\n\"textfield\"````  \n````\n\"radiobutton\"````\n, ````\n\"sprite\"````\n, ````\n\"scroll-pane\"````\n, ````\n\"drop-down\"````\n, ````\n\"list-box\"````\n, ````\n\"camera\"````  \n````\n\"choose-elem-button\"````\n, ````\n\"text-box\"````\n, ````\n\"slider\"````\n, ````\n\"minimap\"````\n, or ````\n\"entity-preview\"````\n.  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the child element.  \ncaption :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): The text displayed on the child element. For frames, this is the \"heading\". For other elements, like buttons   \nlabels, this is the content. Whilst this attribute may be used on all elements, it doesn't make sense for tables and flows as they won't display it.  \ntooltip :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): Tooltip of the child element.  \nenabled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Whether the child element is enabled.  \nignored_by_interaction :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Whether the child element is ignored by interaction.  \nstyle :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Style of the new element.  \nOther attributes may have to be specified, depending on ````\ntype````  \nbutton  \nmouse_button_filter :: [MouseButtonFlags](http://lua-api.factorio.com/latest/Concepts.html#MouseButtonFlags) (optional): Which mouse buttons the button responds to.  \nflow  \ndirection :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The initial direction of the flow's layout. See [LuaGuiElement::direction](http://lua-api.factorio.com/latest/LuaGuiElement.html#LuaGuiElement.direction).  \nframe  \ndirection :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The initial direction of the frame's layout. See [LuaGuiElement::direction](http://lua-api.factorio.com/latest/LuaGuiElement.html#LuaGuiElement.direction).  \ntable  \ncolumn_count :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Number of columns.  \ndraw_vertical_lines :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the table should draw vertical grid lines. Defaults to ````\nfalse````\nif not given.  \ndraw_horizontal_lines :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the table should draw horizontal grid lines. Defaults to ````\nfalse````\nif not given.  \ndraw_horizontal_line_after_headers :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the table should draw a horizontal grid line after the headers. Defaults to ````\nfalse````\nif not given.  \nvertical_centering :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Whether the fields of this table should be vertically centered. Defaults to ````\ntrue````\nif not given.  \ntextfield  \ntext :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The initial text contained in the textfield.  \nprogressbar  \nvalue :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Initial value of the progressbar, in range [0, 1]. Defaults to 0 if not given.  \ncheckbox  \nstate :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Whether the checkbox should be checked by default.  \nradiobutton  \nstate :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Whether the radiobutton should be checked by default.  \nsprite-button  \nsprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath) (optional): Path to the image to display on the button.  \nhovered_sprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath) (optional): Path to the image to display on the button when it is hovered.  \nclicked_sprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath) (optional): Path to the image to display on the button when it is clicked.  \nnumber :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The number shown on the button.  \nshow_percent_for_small_numbers :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Format small numbers as percentages. Defaults to ````\nfalse````\nif not given.  \nmouse_button_filter :: [MouseButtonFlags](http://lua-api.factorio.com/latest/Concepts.html#MouseButtonFlags) (optional): Which mouse buttons the button responds to.  \nsprite  \nsprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath) (optional): Path to the image to display.  \nscroll-pane  \nhorizontal_scroll_policy :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Policy of the horizontal scroll bar, possible values are \"auto\" (default), \"never\", \"always\", \"auto-and-reserve-space\".  \nvertical_scroll_policy :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Policy of the vertical scroll bar, possible values are \"auto\" (default), \"never\", \"always\", \"auto-and-reserve-space\".  \ndrop-down  \nitems :: array of [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): The initial items in the dropdown.  \nselected_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The initial selected index.  \nlist-box  \nitems :: array of [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): The initial items in the listbox.  \nselected_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The initial selected index.  \ncamera  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position the camera centers on.  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The surface the camera will render else if not given the players surface is used.  \nzoom :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The camera zoom - defaults to 0.75.  \nchoose-elem-button  \nelem_type :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): \"item\", \"tile\", \"entity\", \"signal\", \"fluid\", or \"recipe\".  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If type is \"item\" - the default value for the button.  \ntile :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If type is \"tile\" - the default value for the button.  \nentity :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If type is \"entity\" - the default value for the button.  \nsignal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID) (optional): If type is \"signal\" - the default value for the button.  \nfluid :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If type is \"fluid\" - the default value for the button.  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If type is \"recipe\" - the default value for the button.  \ntext-box  \ntext :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The initial text contained in the text-box.  \nslider  \nminimum_value :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The minimum value for the slider  \nmaximum_value :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The maximum value for the slider  \nvalue :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The initial value for the slider  \nminimap  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): The position the minimap centers on or if not given it will center on the player that owns this element.  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The surface the camera will render else if not given the players surface is used.  \nchart_player_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The player index the map should use else if not set the player that owns this element is used.  \nforce :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The force this minimap should use else if not given the players force that owns this element is used.  \nzoom :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The camera zoom - defaults to 0.75.  \n\n**Return value**  \nThe added GUI element.",
        "returns": "LuaGuiElement",
        "args": {
          "type": {
            "name": "type",
            "type": "string",
            "doc": "Table with the following fields:   \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The kind of the element to add. Has to be one of ````\n\"button\"````\n, ````\n\"sprite-button\"````  \n````\n\"checkbox\"````\n, ````\n\"flow\"````\n, ````\n\"frame\"````\n, ````\n\"label\"````\n, ````\n\"progressbar\"````\n, ````\n\"table\"````\n, ````\n\"textfield\"````  \n````\n\"radiobutton\"````\n, ````\n\"sprite\"````\n, ````\n\"scroll-pane\"````\n, ````\n\"drop-down\"````\n, ````\n\"list-box\"````\n, ````\n\"camera\"````  \n````\n\"choose-elem-button\"````\n, ````\n\"text-box\"````\n, ````\n\"slider\"````\n, ````\n\"minimap\"````\n, or ````\n\"entity-preview\"````\n.  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the child element.  \ncaption :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): The text displayed on the child element. For frames, this is the \"heading\". For other elements, like buttons   \nlabels, this is the content. Whilst this attribute may be used on all elements, it doesn't make sense for tables and flows as they won't display it.  \ntooltip :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): Tooltip of the child element.  \nenabled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Whether the child element is enabled.  \nignored_by_interaction :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Whether the child element is ignored by interaction.  \nstyle :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Style of the new element.  \nOther attributes may have to be specified, depending on ````\ntype````  \nbutton  \nmouse_button_filter :: [MouseButtonFlags](http://lua-api.factorio.com/latest/Concepts.html#MouseButtonFlags) (optional): Which mouse buttons the button responds to.  \nflow  \ndirection :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The initial direction of the flow's layout. See [LuaGuiElement::direction](http://lua-api.factorio.com/latest/LuaGuiElement.html#LuaGuiElement.direction).  \nframe  \ndirection :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The initial direction of the frame's layout. See [LuaGuiElement::direction](http://lua-api.factorio.com/latest/LuaGuiElement.html#LuaGuiElement.direction).  \ntable  \ncolumn_count :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Number of columns.  \ndraw_vertical_lines :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the table should draw vertical grid lines. Defaults to ````\nfalse````\nif not given.  \ndraw_horizontal_lines :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the table should draw horizontal grid lines. Defaults to ````\nfalse````\nif not given.  \ndraw_horizontal_line_after_headers :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the table should draw a horizontal grid line after the headers. Defaults to ````\nfalse````\nif not given.  \nvertical_centering :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Whether the fields of this table should be vertically centered. Defaults to ````\ntrue````\nif not given.  \ntextfield  \ntext :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The initial text contained in the textfield.  \nprogressbar  \nvalue :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Initial value of the progressbar, in range [0, 1]. Defaults to 0 if not given.  \ncheckbox  \nstate :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Whether the checkbox should be checked by default.  \nradiobutton  \nstate :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Whether the radiobutton should be checked by default.  \nsprite-button  \nsprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath) (optional): Path to the image to display on the button.  \nhovered_sprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath) (optional): Path to the image to display on the button when it is hovered.  \nclicked_sprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath) (optional): Path to the image to display on the button when it is clicked.  \nnumber :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The number shown on the button.  \nshow_percent_for_small_numbers :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Format small numbers as percentages. Defaults to ````\nfalse````\nif not given.  \nmouse_button_filter :: [MouseButtonFlags](http://lua-api.factorio.com/latest/Concepts.html#MouseButtonFlags) (optional): Which mouse buttons the button responds to.  \nsprite  \nsprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath) (optional): Path to the image to display.  \nscroll-pane  \nhorizontal_scroll_policy :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Policy of the horizontal scroll bar, possible values are \"auto\" (default), \"never\", \"always\", \"auto-and-reserve-space\".  \nvertical_scroll_policy :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Policy of the vertical scroll bar, possible values are \"auto\" (default), \"never\", \"always\", \"auto-and-reserve-space\".  \ndrop-down  \nitems :: array of [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): The initial items in the dropdown.  \nselected_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The initial selected index.  \nlist-box  \nitems :: array of [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): The initial items in the listbox.  \nselected_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The initial selected index.  \ncamera  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position the camera centers on.  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The surface the camera will render else if not given the players surface is used.  \nzoom :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The camera zoom - defaults to 0.75.  \nchoose-elem-button  \nelem_type :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): \"item\", \"tile\", \"entity\", \"signal\", \"fluid\", or \"recipe\".  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If type is \"item\" - the default value for the button.  \ntile :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If type is \"tile\" - the default value for the button.  \nentity :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If type is \"entity\" - the default value for the button.  \nsignal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID) (optional): If type is \"signal\" - the default value for the button.  \nfluid :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If type is \"fluid\" - the default value for the button.  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If type is \"recipe\" - the default value for the button.  \ntext-box  \ntext :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The initial text contained in the text-box.  \nslider  \nminimum_value :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The minimum value for the slider  \nmaximum_value :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The maximum value for the slider  \nvalue :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The initial value for the slider  \nminimap  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): The position the minimap centers on or if not given it will center on the player that owns this element.  \nsurface_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The surface the camera will render else if not given the players surface is used.  \nchart_player_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The player index the map should use else if not set the player that owns this element is used.  \nforce :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The force this minimap should use else if not given the players force that owns this element is used.  \nzoom :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): The camera zoom - defaults to 0.75."
          }
        }
      },
      "add_item": {
        "name": "add_item",
        "doc": "Adds an item at the end or at the given index in this dropdown or listbo    \n\n**Parameters**  \nLocalisedString: The item.  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The index",
        "type": "function",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The index"
          },
          "LocalisedString": {
            "name": "LocalisedString",
            "doc": "LocalisedString: The item.",
            "type": "LocalisedString"
          }
        }
      },
      "caption": {
        "name": "caption",
        "type": "LocalisedString",
        "mode": "[RW]",
        "doc": "The text displayed on the element. For frames, this is the \"heading\". For other elements, like buttons   \nlabels, this is the content.   \n\n**Note: ** Whilst this attribute may be used on all elements without producing an error, it doesn't make sen  \nfor tables and flows as they won't display it."
      },
      "children": {
        "name": "children",
        "type": "array of LuaGuiElement",
        "mode": "[R]",
        "doc": "The children elemen"
      },
      "children_names": {
        "name": "children_names",
        "type": "array of string",
        "mode": "[R]",
        "doc": "Names of all the children of this element. These are the identifiers that can be used to access the chi  \nas an attribute of this element."
      },
      "clear": {
        "name": "clear",
        "doc": "Remove children of this element. Any [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html) objects referring to the destroy  \nelements become invalid after this operation.   \n\n**Example**  \n````\ngame.player.gui.top.clear()````",
        "type": "function"
      },
      "clear_items": {
        "name": "clear_items",
        "doc": "Clears the items in this dropdown or listbox.",
        "type": "function"
      },
      "clicked_sprite": {
        "name": "clicked_sprite",
        "type": "SpritePath",
        "mode": "[RW]",
        "doc": "The image to display on this sprite-button when it is clicked."
      },
      "column_count": {
        "name": "column_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "The number of columns in this tabl    \n_Can only be used if this is table_"
      },
      "destroy": {
        "name": "destroy",
        "doc": "Remove this element, along with its children. Any [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html) objects referring to the destroy  \nelements become invalid after this operation.   \n\n**Note: ** The top-level GUI elements -- [LuaGui::top](http://lua-api.factorio.com/latest/LuaGui.html#LuaGui.top), [LuaGui::left](http://lua-api.factorio.com/latest/LuaGui.html#LuaGui.left), [LuaGui::center](http://lua-api.factorio.com/latest/LuaGui.html#LuaGui.center) -- can  \nbe destroyed.  \n\n**Example**  \n````\ngame.player.gui.top.greeting.destroy()````",
        "type": "function"
      },
      "direction": {
        "name": "direction",
        "type": "string",
        "mode": "[R]",
        "doc": "Direction of the layout. May be either ````\n\"horizontal\"````\nor ````\n\"vertical\"````\n.   \n_Can only be used if this is frame or flow_"
      },
      "draw_horizontal_line_after_headers": {
        "name": "draw_horizontal_line_after_headers",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If this table should draw a horizontal grid line after the header    \n_Can only be used if this is table_"
      },
      "draw_horizontal_lines": {
        "name": "draw_horizontal_lines",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If this table should draw horizontal grid line    \n_Can only be used if this is table_"
      },
      "draw_vertical_lines": {
        "name": "draw_vertical_lines",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If this table should draw vertical grid line    \n_Can only be used if this is table_"
      },
      "elem_type": {
        "name": "elem_type",
        "type": "string",
        "mode": "[R]",
        "doc": "The elem type of this choose-elem-butto    \n_Can only be used if this is choose-elem-button_"
      },
      "elem_value": {
        "name": "elem_value",
        "type": "string or SignalID",
        "mode": "[RW]",
        "doc": "The elem value of this choose-elem-button or ````\nnil````\nif there is no valu    \n\n**Note: ** Types \"item\", \"entity\", and \"tile\" operate with strings. Type \"signal\" operates with [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID).  \n_Can only be used if this is choose-elem-button_"
      },
      "enabled": {
        "name": "enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If this GUI element is enable"
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[RW]",
        "doc": "The entity associated with this entity-preview or ````\nnil````\nif no entity is associate    \n_Can only be used if this is entity-preview_"
      },
      "focus": {
        "name": "focus",
        "doc": "Focuses this GUI element if possible.",
        "type": "function"
      },
      "force": {
        "name": "force",
        "type": "string",
        "mode": "[RW]",
        "doc": "The force this minimap is using or ````\nnil````\nif no force is se"
      },
      "get_item": {
        "name": "get_item",
        "type": "function",
        "doc": "Gets an item at the given index from this dropdown or listbo    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index to get.",
        "returns": "LocalisedString",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index to get."
          }
        }
      },
      "get_slider_maximum": {
        "name": "get_slider_maximum",
        "type": "function",
        "doc": "Gets this sliders minimum valu",
        "returns": "double"
      },
      "get_slider_minimum": {
        "name": "get_slider_minimum",
        "type": "function",
        "doc": "Gets this sliders minimum valu",
        "returns": "double"
      },
      "gui": {
        "name": "gui",
        "type": "LuaGui",
        "mode": "[R]",
        "doc": "The GUI this element is a part of."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "horizontal_scroll_policy": {
        "name": "horizontal_scroll_policy",
        "type": "string",
        "mode": "[RW]",
        "doc": "Policy of the horizontal scroll bar, possible values are \"auto\" (default), \"never\", \"always\", \"auto-and-reserve-space    \n_Can only be used if this is scroll-pane_"
      },
      "hovered_sprite": {
        "name": "hovered_sprite",
        "type": "SpritePath",
        "mode": "[RW]",
        "doc": "The image to display on this sprite-button when it is hovere    \n_Can only be used if this is sprite-button_"
      },
      "ignored_by_interaction": {
        "name": "ignored_by_interaction",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If this GUI element is ignored by interactio  \nThis means, that for example, label on a button can't steal the focus or click events of the butto"
      },
      "index": {
        "name": "index",
        "type": "uint",
        "mode": "[R]",
        "doc": "The unique index of this GUI elemen"
      },
      "items": {
        "name": "items",
        "type": "array of LocalisedString",
        "mode": "[RW]",
        "doc": "The items in this dropdown or listbo"
      },
      "locked": {
        "name": "locked",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If this choose-elem-button can be changed by the playe    \n_Can only be used if this is choose-elem-button_"
      },
      "minimap_player_index": {
        "name": "minimap_player_index",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The player index this minimap is usin    \n_Can only be used if this is minimap_"
      },
      "mouse_button_filter": {
        "name": "mouse_button_filter",
        "type": "dictionary string → boolean",
        "mode": "[RW]",
        "doc": "The mouse button filters for this button or sprite-butto  \nThe possible filters ar    \n````\n\"left-and-right\"````  \n````\n\"left\"````  \n````\n\"right\"````  \n````\n\"middle\"````  \n````\n\"button-4\"````  \n````\n\"button-5\"````  \n````\n\"button-6\"````  \n````\n\"button-7\"````  \n````\n\"button-8\"````  \n````\n\"button-9\"````"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "The name of this element.   \n\n**Example**  \n````\ngame.player.gui.top.greeting.name == \"greeting\"````"
      },
      "number": {
        "name": "number",
        "type": "double",
        "mode": "[RW]",
        "doc": "The number to be shown in the right-bottom corner of the sprite-button, or ````\nnil````\nto show nothin"
      },
      "operator []": {
        "name": "operator []",
        "type": "LuaGuiElement",
        "mode": "[R]",
        "doc": "The indexing operator. Gets children by name."
      },
      "parent": {
        "name": "parent",
        "type": "LuaGuiElement",
        "mode": "[R]",
        "doc": "The direct parent of this element; ````\nnil````\nif this is a top-level element."
      },
      "player_index": {
        "name": "player_index",
        "type": "uint",
        "mode": "[R]",
        "doc": "Index into [LuaGameScript::players](http://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.players) specifying the player who owns this element."
      },
      "position": {
        "name": "position",
        "type": "Position",
        "mode": "[RW]",
        "doc": "The position this camera or minimap is focused on if an"
      },
      "read_only": {
        "name": "read_only",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If this text-box is read-onl    \n_Can only be used if this is text-box_"
      },
      "remove_item": {
        "name": "remove_item",
        "doc": "Removes an item at the given index in this dropdown or listbo    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index",
        "type": "function",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index"
          }
        }
      },
      "resize_to_sprite": {
        "name": "resize_to_sprite",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Whether should the image widget resize its size according to the sprite in it (true by defaul"
      },
      "scroll_to_bottom": {
        "name": "scroll_to_bottom",
        "doc": "Scrolls the scroll bar to the botto    \n_Can only be used if this is scroll-pane or text-box_",
        "type": "function"
      },
      "scroll_to_element": {
        "name": "scroll_to_element",
        "doc": "Scrolls the scroll bar such that the specified GUI element is visible to the playe    \n\n**Parameters**  \nelement :: [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html): The element to scroll to.  \nscroll_mode :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Where the element should be positioned in the scroll-pane. Must be either: ````\n\"in-view\"````\n, or ````\n\"top-third\"````\n. Defaults to ````\n\"in-view\"````\n.  \n_Can only be used if this is scroll-pane_",
        "type": "function",
        "args": {
          "element": {
            "name": "element",
            "type": "LuaGuiElement",
            "doc": "element :: [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html): The element to scroll to."
          },
          "scroll_mode": {
            "name": "scroll_mode",
            "type": "string",
            "doc": "scroll_mode :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Where the element should be positioned in the scroll-pane. Must be either: ````\n\"in-view\"````\n, or ````\n\"top-third\"````\n. Defaults to ````\n\"in-view\"````\n."
          }
        }
      },
      "scroll_to_left": {
        "name": "scroll_to_left",
        "doc": "Scrolls the scroll bar to the lef    \n_Can only be used if this is scroll-pane or text-box_",
        "type": "function"
      },
      "scroll_to_right": {
        "name": "scroll_to_right",
        "doc": "Scrolls the scroll bar to the righ    \n_Can only be used if this is scroll-pane or text-box_",
        "type": "function"
      },
      "scroll_to_top": {
        "name": "scroll_to_top",
        "doc": "Scrolls the scroll bar to the to    \n_Can only be used if this is scroll-pane or text-box_",
        "type": "function"
      },
      "select": {
        "name": "select",
        "doc": "Select a range of text in the text bo    \n\n**Parameters**  \nstart :: [int](http://lua-api.factorio.com/latest/Builtin-Types.html#int): The index of the first character to select.  \nend :: [int](http://lua-api.factorio.com/latest/Builtin-Types.html#int): The index of the last character to select.  \n\n**Example**  \nSelect the characters ````\namp````\nfrom ````\nexample````    \n````\ntextbox.select(3, 5)````  \n\n**Example**  \nMove the cursor to the start of the text bo    \n````\ntextbox.select(1, 0)````  \n_Can only be used if this is textfield or text-box_",
        "type": "function",
        "args": {
          "end": {
            "name": "end",
            "type": "int",
            "doc": "end :: [int](http://lua-api.factorio.com/latest/Builtin-Types.html#int): The index of the last character to select."
          },
          "start": {
            "name": "start",
            "type": "int",
            "doc": "start :: [int](http://lua-api.factorio.com/latest/Builtin-Types.html#int): The index of the first character to select."
          }
        }
      },
      "select_all": {
        "name": "select_all",
        "doc": "Select all text in the text bo    \n_Can only be used if this is textfield or text-box_",
        "type": "function"
      },
      "selectable": {
        "name": "selectable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If the contents of this text-box are selectabl    \n_Can only be used if this is text-box_"
      },
      "selected_index": {
        "name": "selected_index",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The selected index for this dropdown or listbox. 0 if non"
      },
      "set_item": {
        "name": "set_item",
        "doc": "Sets an item at the given index in this dropdown or listbo    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index  \nLocalisedString: The item.",
        "type": "function",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index"
          },
          "LocalisedString": {
            "name": "LocalisedString",
            "doc": "LocalisedString: The item.",
            "type": "LocalisedString"
          }
        }
      },
      "set_slider_minimum_maximum": {
        "name": "set_slider_minimum_maximum",
        "doc": "Sets this sliders minimum and maximum value    \n\n**Parameters**  \nminimum :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \nmaximum :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n\n**Note: ** The minimum can't be &gt;= the maximum.",
        "type": "function",
        "args": {
          "maximum": {
            "name": "maximum",
            "type": "double",
            "doc": "maximum :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          },
          "minimum": {
            "name": "minimum",
            "type": "double",
            "doc": "minimum :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          }
        }
      },
      "show_percent_for_small_numbers": {
        "name": "show_percent_for_small_numbers",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Related to the number to be shown in the right-bottom corner of the sprite-butto  \nWhen set to true, numbers that are not 0 and smaller than one are shown as percent rather than the value,   \nfor example 0.5 is shown as 50% instea"
      },
      "slider_value": {
        "name": "slider_value",
        "type": "double",
        "mode": "[RW]",
        "doc": "The value of this slider elemen    \n_Can only be used if this is slider_"
      },
      "sprite": {
        "name": "sprite",
        "type": "SpritePath",
        "mode": "[RW]",
        "doc": "The image to display on this sprite-button or sprite in the default stat"
      },
      "state": {
        "name": "state",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Is this checkbox checked?   \n_Can only be used if this is checkbox_"
      },
      "style": {
        "name": "style",
        "type": "LuaStyle or string",
        "mode": "[RW]",
        "doc": "The style of this element. When read, this evaluates to a [LuaStyle](http://lua-api.factorio.com/latest/LuaStyle.html). For writing, it only accep  \na string that specifies the textual identifier of the desired style."
      },
      "surface_index": {
        "name": "surface_index",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The surface index this camera or minimap is usin"
      },
      "text": {
        "name": "text",
        "type": "string",
        "mode": "[RW]",
        "doc": "The text contained in a textfield or text-bo    \n_Can only be used if this is textfield or text-box_"
      },
      "tooltip": {
        "name": "tooltip",
        "type": "LocalisedString",
        "mode": "[RW]"
      },
      "type": {
        "name": "type",
        "type": "string",
        "mode": "[R]",
        "doc": "The type of this GUI elemen"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "value": {
        "name": "value",
        "type": "double",
        "mode": "[RW]",
        "doc": "How much this progress bar is filled. It is a value in range [0, 1].   \n_Can only be used if this is progressbar_"
      },
      "vertical_centering": {
        "name": "vertical_centering",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Whether the fields of this table should be vertically centered. This true by default and overrides [LuaStyle::column_alignments](http://lua-api.factorio.com/latest/LuaStyle.html#LuaStyle.column_alignments    \n_Can only be used if this is table_"
      },
      "vertical_scroll_policy": {
        "name": "vertical_scroll_policy",
        "type": "string",
        "mode": "[RW]",
        "doc": "Policy of the vertical scroll bar, possible values are \"auto\" (default), \"never\", \"always\", \"auto-and-reserve-space    \n_Can only be used if this is scroll-pane_"
      },
      "visible": {
        "name": "visible",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "When not visible the GUI element is hidden completely and takes no space in the layou"
      },
      "word_wrap": {
        "name": "word_wrap",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If this text-box will word-wrap automaticall    \n_Can only be used if this is text-box_"
      },
      "zoom": {
        "name": "zoom",
        "type": "double",
        "mode": "[RW]",
        "doc": "The zoom this camera or minimap is usin"
      }
    },
    "doc": "An element of the custom GUI. This type is used to represent any kind of a GUI element -- labels as well\n as buttons as well as frames are all instances of this type. Just like LuaEntity, different kinds\n of elements support different attributes; attempting to access an attribute on an element that doesn't support\n it (for instance, trying to access the value of a text field) will result in a run-time error."
  },
  "LuaInserterControlBehavior": {
    "name": "LuaInserterControlBehavior",
    "type": "LuaInserterControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity",
      "Inherited from LuaGenericOnOffControlBehavior: disabled, circuit_condition, logistic_condition, connect_to_logistic_network"
    ],
    "properties": {
      "circuit_condition": {
        "name": "circuit_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The circuit condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the circuit condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 cha  \nsignal    \n````\na_behavior.circuit_condition = {condition={comparator=\"&gt;\",  \n                                           first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                           constant=4}}````"
      },
      "circuit_hand_read_mode": {
        "name": "circuit_hand_read_mode",
        "type": "defines.control_behavior.inserter.hand_read_mode",
        "mode": "[RW]",
        "doc": "The hand read mode for the inserter."
      },
      "circuit_mode_of_operation": {
        "name": "circuit_mode_of_operation",
        "type": "defines.control_behavior.inserter.circuit_mode_of_operation",
        "mode": "[RW]",
        "doc": "The circuit mode of operations for the inserter."
      },
      "circuit_read_hand_contents": {
        "name": "circuit_read_hand_contents",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the contents of the inserter hand should be sent to the circuit network"
      },
      "circuit_set_stack_size": {
        "name": "circuit_set_stack_size",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If the stack size of the inserter is set through the circuit network or no"
      },
      "circuit_stack_control_signal": {
        "name": "circuit_stack_control_signal",
        "type": "SignalID",
        "mode": "[RW]",
        "doc": "The signal used to set the stack size of the inserte"
      },
      "connect_to_logistic_network": {
        "name": "connect_to_logistic_network",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif this should connect to the logistic network."
      },
      "disabled": {
        "name": "disabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the entity is currently disabled because of the control behavior."
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "logistic_condition": {
        "name": "logistic_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The logistic condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the logistic condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more th  \n4 chain signal    \n````\na_behavior.logistic_condition = {condition={comparator=\"&gt;\",  \n                                            first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                            constant=4}}````"
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for inserters."
  },
  "LuaInventory": {
    "name": "LuaInventory",
    "type": "LuaInventory",
    "inherits": [],
    "properties": {
      "can_insert": {
        "name": "can_insert",
        "type": "function",
        "doc": "Can at least some items be inserted?   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items that would be inserted.  \n\n**Return value**  \n````\ntrue````\nif at least a part of the given items could be inserted into this inventory.",
        "returns": "boolean",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items that would be inserted."
          }
        }
      },
      "can_set_filter": {
        "name": "can_set_filter",
        "type": "function",
        "doc": "If the given inventory slot filter can be set to the given filter    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The item stack index  \nfilter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item name of the filter",
        "returns": "boolean",
        "args": {
          "filter": {
            "name": "filter",
            "type": "string",
            "doc": "filter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item name of the filter"
          },
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The item stack index"
          }
        }
      },
      "clear": {
        "name": "clear",
        "doc": "Make this inventory empty.",
        "type": "function"
      },
      "entity_owner": {
        "name": "entity_owner",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity that owns this inventory or ````\nnil````\nif this isn't owned by an entity."
      },
      "equipment_owner": {
        "name": "equipment_owner",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The equipment that owns this inventory or ````\nnil````\nif this isn't owned by an equipment."
      },
      "find_item_stack": {
        "name": "find_item_stack",
        "type": "function",
        "doc": "Gets the first LuaItemStack in the inventory that matches the given item nam    \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item name to find  \n\n**Return value**  \nor ````\nnil````\n.  \n\n**Note: ** This will also return the stack index if one is found that matches as a second return value.",
        "returns": "LuaItemStack",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The item name to find"
          }
        }
      },
      "get_contents": {
        "name": "get_contents",
        "type": "function",
        "doc": "Get counts of all items in this inventory.   \n\n**Return value**  \nThe counts, indexed by item names.",
        "returns": "dictionary string → uint"
      },
      "get_filter": {
        "name": "get_filter",
        "type": "function",
        "doc": "Gets the filter for the given item stack index    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The item stack index  \n\n**Return value**  \nThe current filter or nil if none.",
        "returns": "string",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The item stack index"
          }
        }
      },
      "get_item_count": {
        "name": "get_item_count",
        "type": "function",
        "doc": "Get the number of all or some items in this inventory.   \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items.",
        "returns": "uint",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items."
          }
        }
      },
      "getbar": {
        "name": "getbar",
        "type": "function",
        "doc": "Get the current bar. This is the index at which the red area starts.   \n\n**Note: ** Only useable if this inventory has a bar.",
        "returns": "uint"
      },
      "hasbar": {
        "name": "hasbar",
        "type": "function",
        "doc": "Does this inventory have a bar? Bar is the draggable red thing, found for example on chest  \nthat limits the portion of the inventory that may be manipulated by machines    \n\n**Note: ** \"Having a bar\" doesn't mean that the bar is set to some nontrivial value. Having a b  \nmeans the inventory supports having this limit at all. The character's inventory is   \nexample of an inventory without a bar; the wooden chest's inventory is an example of o  \nwith a bar.",
        "returns": "boolean"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "index": {
        "name": "index",
        "type": "uint",
        "mode": "[R]",
        "doc": "The inventory index this inventory uses."
      },
      "insert": {
        "name": "insert",
        "type": "function",
        "doc": "Insert items into this inventory.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert.  \n\n**Return value**  \nNumber of items actually inserted.",
        "returns": "uint",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert."
          }
        }
      },
      "is_empty": {
        "name": "is_empty",
        "type": "function",
        "doc": "Does this inventory contain nothing?",
        "returns": "boolean"
      },
      "is_filtered": {
        "name": "is_filtered",
        "type": "function",
        "doc": "If this inventory supports filters and has at least 1 filter se",
        "returns": "boolean"
      },
      "operator []": {
        "name": "operator []",
        "type": "LuaItemStack",
        "mode": "[R]",
        "doc": "The indexing operator    \n\n**Example**  \nWill get the first item in the player's inventor    \n````\ngame.player.get_main_inventory()[1]````"
      },
      "operator #": {
        "name": "operator #",
        "type": "uint",
        "mode": "[R]",
        "doc": "Get the number of slots in this inventory    \n\n**Example**  \nWill print the number of slots in the player's main inventor    \n````\ngame.player.print(#game.player.get_main_inventory())````"
      },
      "player_owner": {
        "name": "player_owner",
        "type": "LuaPlayer",
        "mode": "[R]",
        "doc": "The player that owns this inventory or ````\nnil````\nif this isn't owned by a player."
      },
      "remove": {
        "name": "remove",
        "type": "function",
        "doc": "Remove items from this inventory.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove.  \n\n**Return value**  \nNumber of items actually removed.",
        "returns": "uint",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove."
          }
        }
      },
      "set_filter": {
        "name": "set_filter",
        "type": "function",
        "doc": "Sets the filter for the given item stack index    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The item stack index  \nfilter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The new filter or nil to erase the filter  \n\n**Return value**  \nIf the filter was allowed to be set.  \n\n**Note: ** Some inventory slots don't allow some filters (gun ammo can't be filtered for non-ammo).",
        "returns": "boolean",
        "args": {
          "filter": {
            "name": "filter",
            "type": "string",
            "doc": "filter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The new filter or nil to erase the filter"
          },
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The item stack index"
          }
        }
      },
      "setbar": {
        "name": "setbar",
        "doc": "Set the current bar.   \n\n**Parameters**  \nbar :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The new limit. Omitting this parameter will clear the limit.  \n\n**Note: ** Only useable if this inventory has a bar.",
        "type": "function",
        "args": {
          "bar": {
            "name": "bar",
            "type": "uint",
            "doc": "bar :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The new limit. Omitting this parameter will clear the limit."
          }
        }
      },
      "sort_and_merge": {
        "name": "sort_and_merge",
        "doc": "Sorts and merges the items in this inventory.",
        "type": "function"
      },
      "supports_filters": {
        "name": "supports_filters",
        "type": "function",
        "doc": "If this inventory supports filter",
        "returns": "boolean"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "A storage of item stacks."
  },
  "LuaItemPrototype": {
    "name": "LuaItemPrototype",
    "type": "LuaItemPrototype",
    "inherits": [],
    "properties": {
      "alt_entity_filter_mode": {
        "name": "alt_entity_filter_mode",
        "type": "string",
        "mode": "[R]",
        "doc": "The alt entity filter mode used by this selection too    \n_Can only be used if this is SelectionTool_"
      },
      "alt_entity_filters": {
        "name": "alt_entity_filters",
        "type": "dictionary string → LuaEntityPrototype",
        "mode": "[R]",
        "doc": "The alt entity filters used by this selection tool indexed by entity nam    \n_Can only be used if this is SelectionTool_"
      },
      "alt_entity_type_filters": {
        "name": "alt_entity_type_filters",
        "type": "dictionary string → boolean",
        "mode": "[R]",
        "doc": "The alt entity type filters used by this selection tool indexed by entity typ    \n\n**Note: ** The boolean value is meaningless and is used to allow easy lookup if a type exists in the dictionary.  \n_Can only be used if this is SelectionTool_"
      },
      "alt_selection_border_color": {
        "name": "alt_selection_border_color",
        "type": "Color",
        "mode": "[R]",
        "doc": "The color used when doing alt selection with this selection tool prototyp    \n_Can only be used if this is SelectionTool_"
      },
      "alt_selection_cursor_box_type": {
        "name": "alt_selection_cursor_box_type",
        "type": "string",
        "mode": "[R]",
        "doc": "_Can only be used if this is SelectionTool_"
      },
      "alt_selection_mode_flags": {
        "name": "alt_selection_mode_flags",
        "type": "SelectionModeFlags",
        "mode": "[R]",
        "doc": "Flags that affect which entities will be selected during alternate selection.  \n_Can only be used if this is SelectionTool_"
      },
      "alt_tile_filter_mode": {
        "name": "alt_tile_filter_mode",
        "type": "string",
        "mode": "[R]",
        "doc": "The alt tile filter mode used by this selection too    \n_Can only be used if this is SelectionTool_"
      },
      "alt_tile_filters": {
        "name": "alt_tile_filters",
        "type": "dictionary string → LuaTilePrototype",
        "mode": "[R]",
        "doc": "The alt tile filters used by this selection tool indexed by tile nam    \n_Can only be used if this is SelectionTool_"
      },
      "always_include_tiles": {
        "name": "always_include_tiles",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If tiles area always included when doing selection with this selection tool prototyp    \n_Can only be used if this is SelectionTool_"
      },
      "attack_parameters": {
        "name": "attack_parameters",
        "type": "AttackParameters",
        "mode": "[R]",
        "doc": "The gun attack parameters or ````\nnil````\nif not a gun item prototyp"
      },
      "burnt_result": {
        "name": "burnt_result",
        "type": "LuaItemPrototype",
        "mode": "[R]",
        "doc": "The result of burning this item as fuel or ````\nnil````\n."
      },
      "can_be_mod_opened": {
        "name": "can_be_mod_opened",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this item can be mod-opene"
      },
      "capsule_action": {
        "name": "capsule_action",
        "type": "CapsuleAction",
        "mode": "[R]",
        "doc": "The capsule action for this capsule item prototype or ````\nnil````\nif this isn't a capsule item prototyp"
      },
      "category": {
        "name": "category",
        "type": "string",
        "mode": "[R]",
        "doc": "The module category na    \n_Can only be used if this is ModuleItem_"
      },
      "curved_rail": {
        "name": "curved_rail",
        "type": "LuaEntityPrototype",
        "mode": "[R]",
        "doc": "The curved rail prototype used for this rail planner prototyp    \n_Can only be used if this is RailPlanner_"
      },
      "default_label_color": {
        "name": "default_label_color",
        "type": "Color",
        "mode": "[R]",
        "doc": "The default label color used for this item with label. ````\nnil````\nif not defined or if this isn't an item with labe    \n_Can only be used if this is ItemWithLabel_"
      },
      "default_request_amount": {
        "name": "default_request_amount",
        "type": "uint",
        "mode": "[R]",
        "doc": "The default request value."
      },
      "draw_label_for_cursor_render": {
        "name": "draw_label_for_cursor_render",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If true, and this item with label has a label it is drawn in place of the normal number when held in the curso    \n_Can only be used if this is ItemWithLabel_"
      },
      "durability": {
        "name": "durability",
        "type": "double",
        "mode": "[R]",
        "doc": "The durability of this tool item or ````\nnil````\nif not a tool ite    \n_Can only be used if this is ToolItem_"
      },
      "durability_description_key": {
        "name": "durability_description_key",
        "type": "string",
        "mode": "[R]",
        "doc": "The durability message key used when displaying the durability of this too    \n_Can only be used if this is ToolItem_"
      },
      "entity_filter_mode": {
        "name": "entity_filter_mode",
        "type": "string",
        "mode": "[R]",
        "doc": "The entity filter mode used by this selection too    \n_Can only be used if this is SelectionTool_"
      },
      "entity_filter_slots": {
        "name": "entity_filter_slots",
        "type": "uint",
        "mode": "[R]",
        "doc": "The number of entity filters this deconstruction item has or ````\nnil````\nif this isn't a deconstruction item prototyp    \n_Can only be used if this is DeconstructionItem_"
      },
      "entity_filters": {
        "name": "entity_filters",
        "type": "dictionary string → LuaEntityPrototype",
        "mode": "[R]",
        "doc": "The entity filters used by this selection tool indexed by entity nam    \n_Can only be used if this is SelectionTool_"
      },
      "entity_type_filters": {
        "name": "entity_type_filters",
        "type": "dictionary string → boolean",
        "mode": "[R]",
        "doc": "The entity type filters used by this selection tool indexed by entity typ    \n\n**Note: ** The boolean value is meaningless and is used to allow easy lookup if a type exists in the dictionary.  \n_Can only be used if this is SelectionTool_"
      },
      "equipment_grid": {
        "name": "equipment_grid",
        "type": "LuaEquipmentGridPrototype",
        "mode": "[R]",
        "doc": "The prototype of this armor equipment grid or ````\nnil````\nif none or this is not an armor ite"
      },
      "extend_inventory_by_default": {
        "name": "extend_inventory_by_default",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this item with inventory extends the inventory it resides in by defaul    \n_Can only be used if this is ItemWithInventory_"
      },
      "filter_mode": {
        "name": "filter_mode",
        "type": "string",
        "mode": "[R]",
        "doc": "The filter mode used by this item with inventor    \n_Can only be used if this is ItemWithInventory_"
      },
      "flags": {
        "name": "flags",
        "type": "dictionary string → boolean",
        "mode": "[R]",
        "doc": "The item prototype flags for this item prototype. It is a dictionary where the keys are the set fla  \nand the value is always ````\ntrue````\n-- if a flag is unset, it isn't present in the dictionary at all. The possible flags ar    \n````\n\"hidden\"````\n: If ````\ntrue````\n, the item will be hidden from all crafting menus."
      },
      "fuel_acceleration_multiplier": {
        "name": "fuel_acceleration_multiplier",
        "type": "double",
        "mode": "[R]",
        "doc": "The acceleration multiplier when this item is used as fuel in a vehicle."
      },
      "fuel_category": {
        "name": "fuel_category",
        "type": "string",
        "mode": "[R]",
        "doc": "The fuel category or ````\nnil````\n."
      },
      "fuel_emissions_multiplier": {
        "name": "fuel_emissions_multiplier",
        "type": "double",
        "mode": "[R]",
        "doc": "The emissions multiplier if this is used as fuel."
      },
      "fuel_top_speed_multiplier": {
        "name": "fuel_top_speed_multiplier",
        "type": "double",
        "mode": "[R]",
        "doc": "The fuel top speed multiplier when this item is used as fuel in a vehicle."
      },
      "fuel_value": {
        "name": "fuel_value",
        "type": "float",
        "mode": "[R]",
        "doc": "Fuel value when burned."
      },
      "get_ammo_type": {
        "name": "get_ammo_type",
        "type": "function",
        "doc": "Type of this ammo prototype or ````\nnil````\nif this is not an ammo prototyp    \n\n**Parameters**  \nammo_source_type :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): \"default\", \"player\", \"turret\", or \"vehicle\"",
        "returns": "AmmoType",
        "args": {
          "ammo_source_type": {
            "name": "ammo_source_type",
            "type": "string",
            "doc": "ammo_source_type :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): \"default\", \"player\", \"turret\", or \"vehicle\""
          }
        }
      },
      "group": {
        "name": "group",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "The group this prototype belongs to."
      },
      "has_flag": {
        "name": "has_flag",
        "type": "function",
        "doc": "Does this prototype have a flag enable  \nAny other value will cause an erro    \n\n**Parameters**  \nflag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The flag to check. Can be ````\n\"hidden\"````\n, ````\n\"hide-from-bonus-gui\"````\n, or ````\n\"hide-from-fuel-tooltip\"````\n.",
        "returns": "boolean",
        "args": {
          "flag": {
            "name": "flag",
            "type": "string",
            "doc": "flag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The flag to check. Can be ````\n\"hidden\"````\n, ````\n\"hide-from-bonus-gui\"````\n, or ````\n\"hide-from-fuel-tooltip\"````\n."
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "infinite": {
        "name": "infinite",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this tool item has infinite durability. ````\nnil````\nif not a tool type ite    \n_Can only be used if this is ToolItem_"
      },
      "insertion_priority_mode": {
        "name": "insertion_priority_mode",
        "type": "string",
        "mode": "[R]",
        "doc": "The insertion priority mode used by this item with inventor    \n_Can only be used if this is ItemWithInventory_"
      },
      "inventory_size": {
        "name": "inventory_size",
        "type": "uint",
        "mode": "[R]",
        "doc": "The main inventory size for item-with-inventory-prototype. ````\nnil````\nif not an item-with-inventory-prototyp    \n_Can only be used if this is ItemWithInventoryPrototype_"
      },
      "inventory_size_bonus": {
        "name": "inventory_size_bonus",
        "type": "uint",
        "mode": "[R]",
        "doc": "The inventory size bonus for this armor prototype. ````\nnil````\nif this isn't an armor prototyp    \n_Can only be used if this is ArmorPrototype_"
      },
      "item_filters": {
        "name": "item_filters",
        "type": "dictionary string → LuaItemPrototype",
        "mode": "[R]",
        "doc": "_Can only be used if this is ItemWithInventory_"
      },
      "item_group_filters": {
        "name": "item_group_filters",
        "type": "dictionary string → LuaGroup",
        "mode": "[R]",
        "doc": "_Can only be used if this is ItemWithInventory_"
      },
      "item_subgroup_filters": {
        "name": "item_subgroup_filters",
        "type": "dictionary string → LuaGroup",
        "mode": "[R]",
        "doc": "_Can only be used if this is ItemWithInventory_"
      },
      "limitation_message_key": {
        "name": "limitation_message_key",
        "type": "string",
        "mode": "[R]",
        "doc": "The limitation message key used when the player attempts to use this modules in some place it's not allowe    \n_Can only be used if this is ModuleItem_"
      },
      "limitations": {
        "name": "limitations",
        "type": "array of string",
        "mode": "[R]",
        "doc": "An array of recipe names this module is allowed to work wit    \n_Can only be used if this is ModuleItem_"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_filter_message": {
        "name": "localised_filter_message",
        "type": "LocalisedString",
        "mode": "[R]",
        "doc": "The localised string used when the player attempts to put items into this item with inventory that aren't allowe    \n_Can only be used if this is ItemWithInventory_"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "magazine_size": {
        "name": "magazine_size",
        "type": "float",
        "mode": "[R]",
        "doc": "Size of full magazine; ````\nnil````\nif this is not an ammo item."
      },
      "mapper_count": {
        "name": "mapper_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "How many filters an upgrade item has. ````\nnil````\nif not a upgrade ite    \n_Can only be used if this is UpgradeItem_"
      },
      "module_effects": {
        "name": "module_effects",
        "type": "Effects",
        "mode": "[R]",
        "doc": "Effects of this module; ````\nnil````\nif this is not a module. It is a dictionary indexed by the effect typ    \n_Can only be used if this is ModuleItem_"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string."
      },
      "place_as_equipment_result": {
        "name": "place_as_equipment_result",
        "type": "LuaEquipmentPrototype",
        "mode": "[R]",
        "doc": "Prototype of the equipment that will be created by placing this item in an equipment grid or ````\nnil````\nif there is no equipment defined."
      },
      "place_as_tile_result": {
        "name": "place_as_tile_result",
        "type": "PlaceAsTileResult",
        "mode": "[R]",
        "doc": "The place as tile result if one is defined else ````\nnil````"
      },
      "place_result": {
        "name": "place_result",
        "type": "LuaEntityPrototype",
        "mode": "[R]",
        "doc": "Prototype of the entity that will be created by placing this item, or ````\nnil````\nif there is no su  \nentity."
      },
      "reload_time": {
        "name": "reload_time",
        "type": "float",
        "mode": "[R]",
        "doc": "Amount of extra time (in ticks) it takes to reload the weapon after depleting the magazine or ````\nnil````\nif this is not an ammo item."
      },
      "repair_result": {
        "name": "repair_result",
        "type": "Trigger",
        "mode": "[R]",
        "doc": "The repair result of this repair tool prototype or ````\nnil````\nif this isn't a repair tool prototyp    \n_Can only be used if this is RepairTool_"
      },
      "resistances": {
        "name": "resistances",
        "type": "Resistances",
        "mode": "[R]",
        "doc": "Resistances of this armour item; ````\nnil````\nif not an armor or the armor has no resistances."
      },
      "robot_action": {
        "name": "robot_action",
        "type": "Trigger",
        "mode": "[R]",
        "doc": "The robot action for this capsule item prototype or ````\nnil````\nif this isn't a capsule item prototyp"
      },
      "rocket_launch_products": {
        "name": "rocket_launch_products",
        "type": "array of Product",
        "mode": "[R]",
        "doc": "The results from launching this item in a rocke"
      },
      "selection_border_color": {
        "name": "selection_border_color",
        "type": "Color",
        "mode": "[R]",
        "doc": "The color used when doing normal selection with this selection tool prototyp    \n_Can only be used if this is SelectionTool_"
      },
      "selection_cursor_box_type": {
        "name": "selection_cursor_box_type",
        "type": "string",
        "mode": "[R]",
        "doc": "_Can only be used if this is SelectionTool_"
      },
      "selection_mode_flags": {
        "name": "selection_mode_flags",
        "type": "SelectionModeFlags",
        "mode": "[R]",
        "doc": "Flags that affect which entities will be selected.  \n_Can only be used if this is SelectionTool_"
      },
      "show_in_library": {
        "name": "show_in_library",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this selection tool prototype available in the blueprint library. ````\nnil````\nif not selection tool or blueprint boo"
      },
      "speed": {
        "name": "speed",
        "type": "float",
        "mode": "[R]",
        "doc": "The repairing speed if this is a repairing tool; otherwise ````\nnil````\n."
      },
      "stack_size": {
        "name": "stack_size",
        "type": "uint",
        "mode": "[R]",
        "doc": "Maximum stack size of the item specified by this prototype."
      },
      "stackable": {
        "name": "stackable",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this item allowed to stack at all?"
      },
      "straight_rail": {
        "name": "straight_rail",
        "type": "LuaEntityPrototype",
        "mode": "[R]",
        "doc": "The straight rail prototype used for this rail planner prototyp    \n_Can only be used if this is RailPlanner_"
      },
      "subgroup": {
        "name": "subgroup",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "The subgroup this prototype belongs to."
      },
      "tier": {
        "name": "tier",
        "type": "float",
        "mode": "[R]",
        "doc": "The module ti    \n_Can only be used if this is ModuleItem_"
      },
      "tile_filter_mode": {
        "name": "tile_filter_mode",
        "type": "string",
        "mode": "[R]",
        "doc": "The tile filter mode used by this selection too    \n_Can only be used if this is SelectionTool_"
      },
      "tile_filter_slots": {
        "name": "tile_filter_slots",
        "type": "uint",
        "mode": "[R]",
        "doc": "The number of tile filters this deconstruction item has or ````\nnil````\nif this isn't a deconstruction item prototyp    \n_Can only be used if this is DeconstructionItem_"
      },
      "tile_filters": {
        "name": "tile_filters",
        "type": "dictionary string → LuaTilePrototype",
        "mode": "[R]",
        "doc": "The tile filters used by this selection tool indexed by tile nam    \n_Can only be used if this is SelectionTool_"
      },
      "type": {
        "name": "type",
        "type": "string",
        "mode": "[R]",
        "doc": "Type of this prototype. E.g. ````\n\"gun\"````\nor ````\n\"mining-tool\"````\n."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "wire_count": {
        "name": "wire_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "The number of items needed to connect 2 entities with this as wire."
      }
    },
    "doc": "Prototype of an item."
  },
  "LuaItemStack": {
    "name": "LuaItemStack",
    "type": "LuaItemStack",
    "inherits": [],
    "properties": {
      "active_index": {
        "name": "active_index",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The active blueprint index for this blueprint boo    \n_Can only be used if this is BlueprintBookItem_"
      },
      "add_ammo": {
        "name": "add_ammo",
        "doc": "Add ammo to this ammo item.   \n\n**Parameters**  \namount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Amount of ammo to add.  \n_Can only be used if this is AmmoItem_",
        "type": "function",
        "args": {
          "amount": {
            "name": "amount",
            "type": "uint",
            "doc": "amount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Amount of ammo to add."
          }
        }
      },
      "add_durability": {
        "name": "add_durability",
        "doc": "Add durability to this tool item.   \n\n**Parameters**  \namount :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Amount of durability to add.  \n_Can only be used if this is ToolItem_",
        "type": "function",
        "args": {
          "amount": {
            "name": "amount",
            "type": "double",
            "doc": "amount :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Amount of durability to add."
          }
        }
      },
      "allow_manual_label_change": {
        "name": "allow_manual_label_change",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If the label for this item can be manually changed. When false the label can only be changed through the AP    \n_Can only be used if this is ItemWithLabel_"
      },
      "ammo": {
        "name": "ammo",
        "type": "uint",
        "mode": "[RW]",
        "doc": "Number of bullets left in the magazin    \n_Can only be used if this is AmmoItem_"
      },
      "blueprint_icons": {
        "name": "blueprint_icons",
        "mode": "[RW]",
        "doc": "Icons of a blueprint item. Every entry of this array has the following fields:   \nsignal :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID): Slot icon to use. The slot will have the icon of the specified signal. This allo  \nthe use of any item icon, as well as virtual signal icons.  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Index of the icon in the blueprint icons slots. Has to be in {1, 2, 3, 4}.  \n_Can only be used if this is BlueprintItem_",
        "type": "array of Icon"
      },
      "build_blueprint": {
        "name": "build_blueprint",
        "type": "function",
        "doc": "Build this blueprin    \n\n**Parameters**  \nTable with the following fields:   \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to build on  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force to use for the building  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position to build at  \nforce_build :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, anything that can be built is else nothing is built if any one thing can't be built  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): The direction to use when building  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to use if any.  \n\n**Return value**  \nArray of created ghosts",
        "returns": "array of LuaEntity",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "Table with the following fields:   \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to build on  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force to use for the building  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position to build at  \nforce_build :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, anything that can be built is else nothing is built if any one thing can't be built  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): The direction to use when building  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to use if any."
          }
        }
      },
      "can_set_stack": {
        "name": "can_set_stack",
        "type": "function",
        "doc": "Would a call to [LuaItemStack::set_stack](http://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.set_stack) succeed?   \n\n**Parameters**  \nstack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) (optional): Stack that would be set, possibly ````\nnil````\n.",
        "returns": "boolean",
        "args": {
          "stack": {
            "name": "stack",
            "type": "ItemStackSpecification",
            "doc": "stack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) (optional): Stack that would be set, possibly ````\nnil````\n."
          }
        }
      },
      "cancel_deconstruct_area": {
        "name": "cancel_deconstruct_area",
        "doc": "Cancel deconstruct the given area with this deconstruction ite    \n\n**Parameters**  \nTable with the following fields:   \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to cancel deconstruct on  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force to use for canceling deconstruction  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area to deconstruct  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to use if any.",
        "type": "function",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "Table with the following fields:   \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to cancel deconstruct on  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force to use for canceling deconstruction  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area to deconstruct  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to use if any."
          }
        }
      },
      "clear": {
        "name": "clear",
        "doc": "Clear this item stack.",
        "type": "function"
      },
      "clear_blueprint": {
        "name": "clear_blueprint",
        "doc": "Clears this blueprint ite    \n_Can only be used if this is BlueprintItem_",
        "type": "function"
      },
      "clear_deconstruction_item": {
        "name": "clear_deconstruction_item",
        "doc": "Clears all settings/filters on this deconstruction item resetting it to default value    \n_Can only be used if this is DeconstructionItem_",
        "type": "function"
      },
      "clear_upgrade_item": {
        "name": "clear_upgrade_item",
        "doc": "Clears all settings/filters on this upgrade item resetting it to default value    \n_Can only be used if this is UpgradeItem_",
        "type": "function"
      },
      "cost_to_build": {
        "name": "cost_to_build",
        "type": "dictionary string → uint",
        "mode": "[R]",
        "doc": "Raw materials required to build this blueprint. Result is a dictionary mapping each item prototype na  \nto the required count.   \n_Can only be used if this is BlueprintItem_"
      },
      "count": {
        "name": "count",
        "type": "uint",
        "mode": "[RW]",
        "doc": "Number of items in this stack."
      },
      "create_blueprint": {
        "name": "create_blueprint",
        "doc": "Sets up this blueprint using the found blueprintable entities/tiles on the surface.   \n\n**Parameters**  \nTable with the following fields:   \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to create from  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force to use for the creation  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The bounding box  \nalways_include_tiles :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, blueprintable tiles are always included in the blueprint. When false they're only included if no entities exist in the setup area.",
        "type": "function",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "Table with the following fields:   \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to create from  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force to use for the creation  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The bounding box  \nalways_include_tiles :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, blueprintable tiles are always included in the blueprint. When false they're only included if no entities exist in the setup area."
          }
        }
      },
      "custom_description": {
        "name": "custom_description",
        "type": "LocalisedString",
        "mode": "[RW]",
        "doc": "The custom description this item-with-tags. This is shown over the normal item description if this is set to a non-empty valu"
      },
      "deconstruct_area": {
        "name": "deconstruct_area",
        "doc": "Deconstruct the given area with this deconstruction ite    \n\n**Parameters**  \nTable with the following fields:   \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to deconstruct on  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force to use for the deconstruction  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area to deconstruct  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to use if any.",
        "type": "function",
        "args": {
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "Table with the following fields:   \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification): Surface to deconstruct on  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force to use for the deconstruction  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area to deconstruct  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nby_player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to use if any."
          }
        }
      },
      "default_icons": {
        "name": "default_icons",
        "mode": "[R]",
        "doc": "The default icons for a blueprint item. Every entry of this array has the following fields :   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the item whose icon to use  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Index of the icon in the blueprint icons slots. Has to be in {1, 2, 3, 4}.  \n_Can only be used if this is BlueprintItem_",
        "type": "array of Icon"
      },
      "drain_ammo": {
        "name": "drain_ammo",
        "doc": "Remove ammo from this ammo item.   \n\n**Parameters**  \namount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Amount of ammo to remove.  \n_Can only be used if this is AmmoItem_",
        "type": "function",
        "args": {
          "amount": {
            "name": "amount",
            "type": "uint",
            "doc": "amount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Amount of ammo to remove."
          }
        }
      },
      "drain_durability": {
        "name": "drain_durability",
        "doc": "Remove durability from this tool item.   \n\n**Parameters**  \namount :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Amount of durability to remove.  \n_Can only be used if this is ToolItem_",
        "type": "function",
        "args": {
          "amount": {
            "name": "amount",
            "type": "double",
            "doc": "amount :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Amount of durability to remove."
          }
        }
      },
      "durability": {
        "name": "durability",
        "type": "double",
        "mode": "[RW]",
        "doc": "Durability of the contained item. Automatically capped at the item's maximum durabilit    \n\n**Note: ** When used on a non-tool item, the value of this attribute is ````\nnil````\n."
      },
      "entity_filter_count": {
        "name": "entity_filter_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "The number of entity filters this deconstruction item support    \n_Can only be used if this is DeconstructionItem_"
      },
      "entity_filter_mode": {
        "name": "entity_filter_mode",
        "type": "defines.deconstruction_item.entity_filter_mode",
        "mode": "[RW]",
        "doc": "The blacklist/whitelist entity filter mode for this deconstruction ite    \n_Can only be used if this is DeconstructionItem_"
      },
      "entity_filters": {
        "name": "entity_filters",
        "type": "array of string",
        "mode": "[RW]",
        "doc": "The entity filters for this deconstruction ite"
      },
      "export_stack": {
        "name": "export_stack",
        "type": "function",
        "doc": "Export a supported item (blueprint, blueprint-book, deconstruction-planner, upgrade-planner, item-with-tags) to a string   \n\n**Return value**  \nThe exported string",
        "returns": "string"
      },
      "extends_inventory": {
        "name": "extends_inventory",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If this item extends the inventory it resides in (provides its contents for counts, crafting, insertion). Only callable on items with inventorie    \n_Can only be used if this is ItemWithInventory_"
      },
      "get_blueprint_entities": {
        "name": "get_blueprint_entities",
        "doc": "Entities in this blueprint.   \n\n**Return value**  \nThe fields of an entity table depend on the type of the entity. Eve  \nentity has at least the following fields:   \nentity_number :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Entity's unique identifier in this blueprint  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the entity  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position of the entity  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): The direction the entity is facing. Only present for entiti  \nthat can face in different directions.  \nother: Entity-specific fields...  \n_Can only be used if this is BlueprintItem_",
        "type": "function",
        "returns": "array of blueprint entity"
      },
      "get_blueprint_tiles": {
        "name": "get_blueprint_tiles",
        "doc": "Tiles in this bluepri    \n\n**Return value**  \nA blueprint tile is a table:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the tile.  \n_Can only be used if this is BlueprintItem_",
        "type": "function",
        "returns": "array of blueprint tile"
      },
      "get_entity_filter": {
        "name": "get_entity_filter",
        "type": "function",
        "doc": "Gets the entity filter at the given index for this deconstruction ite    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n_Can only be used if this is DeconstructionItem_",
        "returns": "string",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "get_inventory": {
        "name": "get_inventory",
        "type": "function",
        "doc": "Access the inner inventory of an item.   \n\n**Parameters**  \ninventory :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \nIndex of the inventory to access -- currently can only be [defines.inventory.item_main](http://lua-api.factorio.com/latest/defines.html#defines.inventory.item_main).  \n\n**Return value**  \nor ````\nnil````\nif there is no inventory with the given index.",
        "returns": "LuaInventory",
        "args": {
          "inventory": {
            "name": "inventory",
            "type": "defines.inventory",
            "doc": "inventory :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \nIndex of the inventory to access -- currently can only be [defines.inventory.item_main](http://lua-api.factorio.com/latest/defines.html#defines.inventory.item_main)."
          }
        }
      },
      "get_mapper": {
        "name": "get_mapper",
        "type": "function",
        "doc": "Gets the filter at the given index for this upgrade ite    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index of the mapper to read.  \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): 'from' or 'to'.  \n_Can only be used if this is UpgradeItem_",
        "returns": "UpgradeFilter",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index of the mapper to read."
          },
          "type": {
            "name": "type",
            "type": "string",
            "doc": "type :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): 'from' or 'to'."
          }
        }
      },
      "get_tag": {
        "name": "get_tag",
        "type": "function",
        "doc": "Gets the tag with the given name or returns ````\nnil````\nif it doesn't exis    \n\n**Parameters**  \ntag_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n_Can only be used if this is ItemWithTags_",
        "returns": "Any",
        "args": {
          "tag_name": {
            "name": "tag_name",
            "type": "string",
            "doc": "tag_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)"
          }
        }
      },
      "get_tile_filter": {
        "name": "get_tile_filter",
        "type": "function",
        "doc": "Gets the tile filter at the given index for this deconstruction ite    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n_Can only be used if this is DeconstructionItem_",
        "returns": "string",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "grid": {
        "name": "grid",
        "type": "LuaEquipmentGrid",
        "mode": "[R]",
        "doc": "The equipment grid of this item or ````\nnil````\nif this item doesn't have a grid."
      },
      "health": {
        "name": "health",
        "type": "float",
        "mode": "[RW]",
        "doc": "How much health the item has, as a number in range [0, 1]."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "import_stack": {
        "name": "import_stack",
        "type": "function",
        "doc": "Import a supported item (blueprint, blueprint-book, deconstruction-planner, upgrade-planner, item-with-tags) from a string   \n\n**Parameters**  \ndata :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The string to import  \n\n**Return value**  \n0 if the import succeeded with no errors. -1 if the import succeeded with errors. 1 if the import failed.",
        "returns": "int",
        "args": {
          "data": {
            "name": "data",
            "type": "string",
            "doc": "data :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The string to import"
          }
        }
      },
      "is_armor": {
        "name": "is_armor",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is an armor ite"
      },
      "is_blueprint": {
        "name": "is_blueprint",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a blueprint ite"
      },
      "is_blueprint_book": {
        "name": "is_blueprint_book",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a blueprint book ite"
      },
      "is_blueprint_setup": {
        "name": "is_blueprint_setup",
        "type": "function",
        "doc": "Is this blueprint item setup? I.e. is it a non-empty blueprint?",
        "returns": "boolean"
      },
      "is_deconstruction_item": {
        "name": "is_deconstruction_item",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a deconstruction tool ite"
      },
      "is_item_with_entity_data": {
        "name": "is_item_with_entity_data",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is an item with entity data ite"
      },
      "is_item_with_inventory": {
        "name": "is_item_with_inventory",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is an item with inventory ite"
      },
      "is_item_with_label": {
        "name": "is_item_with_label",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is an item with label ite"
      },
      "is_item_with_tags": {
        "name": "is_item_with_tags",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is an item with tags ite"
      },
      "is_mining_tool": {
        "name": "is_mining_tool",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a mining tool ite"
      },
      "is_module": {
        "name": "is_module",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a module ite"
      },
      "is_repair_tool": {
        "name": "is_repair_tool",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a repair tool ite"
      },
      "is_selection_tool": {
        "name": "is_selection_tool",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a selection tool ite"
      },
      "is_tool": {
        "name": "is_tool",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a tool ite"
      },
      "is_upgrade_item": {
        "name": "is_upgrade_item",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a upgrade ite"
      },
      "item_number": {
        "name": "item_number",
        "type": "uint",
        "mode": "[R]",
        "doc": "The unique ID for this item if it has a unique ID or ````\nnil````  \nThe following item types have unique ID    \n````\n\"armor\"````  \n````\n\"blueprint\"````  \n````\n\"blueprint-book\"````  \n````\n\"deconstruction-item\"````  \n````\n\"item-with-entity-data\"````  \n````\n\"item-with-inventory\"````  \n````\n\"selection-tool\"````  \n````\n\"item-with-tags\"````"
      },
      "label": {
        "name": "label",
        "type": "string",
        "mode": "[RW]",
        "doc": "The current label for this item. Nil when non    \n_Can only be used if this is ItemWithLabel_"
      },
      "label_color": {
        "name": "label_color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "The current label color for this item. Nil when non    \n_Can only be used if this is ItemWithLabel_"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Prototype name of the item held in this stack."
      },
      "prioritize_insertion_mode": {
        "name": "prioritize_insertion_mode",
        "type": "string",
        "mode": "[RW]",
        "doc": "The insertion mode priority this ItemWithInventory uses when items are inserted into an inventory it resides in. Only callable on items with inventorie    \n_Can only be used if this is ItemWithInventory_"
      },
      "prototype": {
        "name": "prototype",
        "type": "LuaItemPrototype",
        "mode": "[R]",
        "doc": "Prototype of the item held in this stack."
      },
      "remove_tag": {
        "name": "remove_tag",
        "type": "function",
        "doc": "Removes a tag with the given nam    \n\n**Parameters**  \ntag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n\n**Return value**  \nIf the tag existed and was removed.  \n_Can only be used if this is ItemWithTags_",
        "returns": "boolean",
        "args": {
          "tag": {
            "name": "tag",
            "type": "string",
            "doc": "tag :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)"
          }
        }
      },
      "set_blueprint_entities": {
        "name": "set_blueprint_entities",
        "doc": "Set new entities to be a part of this blueprint    \n\n**Parameters**  \nentities :: array of blueprint entity: New blueprint entities. The format is the same as   \n[LuaItemStack::get_blueprint_entities](http://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.get_blueprint_entities).  \n_Can only be used if this is BlueprintItem_",
        "type": "function",
        "args": {
          "entities": {
            "name": "entities",
            "type": "array of blueprint entity",
            "doc": "entities :: array of blueprint entity: New blueprint entities. The format is the same as   \n[LuaItemStack::get_blueprint_entities](http://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.get_blueprint_entities)."
          }
        }
      },
      "set_blueprint_tiles": {
        "name": "set_blueprint_tiles",
        "doc": "Set tiles in this bluepri    \n\n**Parameters**  \ntiles :: array of blueprint tile: Tiles to be a part of the blueprint; the format is the same as   \nreturned from the corresponding get function; see [LuaItemStack::get_blueprint_tiles](http://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.get_blueprint_tiles).  \n_Can only be used if this is BlueprintItem_",
        "type": "function",
        "args": {
          "tiles": {
            "name": "tiles",
            "type": "array of blueprint tile",
            "doc": "tiles :: array of blueprint tile: Tiles to be a part of the blueprint; the format is the same as   \nreturned from the corresponding get function; see [LuaItemStack::get_blueprint_tiles](http://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.get_blueprint_tiles)."
          }
        }
      },
      "set_entity_filter": {
        "name": "set_entity_filter",
        "type": "function",
        "doc": "Sets the entity filter at the given index for this deconstruction ite    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nfilter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): Setting to nil erases the filter.  \n\n**Return value**  \nIf the new filter was set (was valid.)  \n_Can only be used if this is DeconstructionItem_",
        "returns": "boolean",
        "args": {
          "filter": {
            "name": "filter",
            "type": "string or LuaEntityPrototype or LuaEntity",
            "doc": "filter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): Setting to nil erases the filter."
          },
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "set_mapper": {
        "name": "set_mapper",
        "doc": "Sets the module filter at the given index for this upgrade ite    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index of the mapper to set.  \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): ````\nfrom````\nor ````\nto````\n.  \nfilter :: [UpgradeFilter](http://lua-api.factorio.com/latest/Concepts.html#UpgradeFilter): The filter to set or ````\nnil````  \n_Can only be used if this is UpgradeItem_",
        "type": "function",
        "args": {
          "filter": {
            "name": "filter",
            "type": "UpgradeFilter",
            "doc": "filter :: [UpgradeFilter](http://lua-api.factorio.com/latest/Concepts.html#UpgradeFilter): The filter to set or ````\nnil````"
          },
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The index of the mapper to set."
          },
          "type": {
            "name": "type",
            "type": "string",
            "doc": "type :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): ````\nfrom````\nor ````\nto````\n."
          }
        }
      },
      "set_stack": {
        "name": "set_stack",
        "type": "function",
        "doc": "Set this item stack to another item stack.   \n\n**Parameters**  \nstack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) (optional)  \nItem stack to set this one to. Omitting this parameter or passing ````\nnil````\nwill clear this item stack,   \nif by calling [LuaItemStack::clear](http://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.clear).  \n\n**Return value**  \nWas the stack set successfully?",
        "returns": "boolean",
        "args": {
          "stack": {
            "name": "stack",
            "type": "ItemStackSpecification",
            "doc": "stack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) (optional)  \nItem stack to set this one to. Omitting this parameter or passing ````\nnil````\nwill clear this item stack,   \nif by calling [LuaItemStack::clear](http://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.clear)."
          }
        }
      },
      "set_tag": {
        "name": "set_tag",
        "type": "function",
        "doc": "Sets the tag with the given name and valu    \n\n**Parameters**  \ntag_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \ntag :: [Any](http://lua-api.factorio.com/latest/Concepts.html#Any)  \n_Can only be used if this is ItemWithTags_",
        "returns": "Any",
        "args": {
          "tag": {
            "name": "tag",
            "type": "Any",
            "doc": "tag :: [Any](http://lua-api.factorio.com/latest/Concepts.html#Any)"
          },
          "tag_name": {
            "name": "tag_name",
            "type": "string",
            "doc": "tag_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)"
          }
        }
      },
      "set_tile_filter": {
        "name": "set_tile_filter",
        "type": "function",
        "doc": "Sets the tile filter at the given index for this deconstruction ite    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nfilter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaTilePrototype](http://lua-api.factorio.com/latest/LuaTilePrototype.html) or [LuaTile](http://lua-api.factorio.com/latest/LuaTile.html): Setting to nil erases the filter.  \n\n**Return value**  \nIf the new filter was set (was valid.)  \n_Can only be used if this is DeconstructionItem_",
        "returns": "boolean",
        "args": {
          "filter": {
            "name": "filter",
            "type": "string or LuaTilePrototype or LuaTile",
            "doc": "filter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaTilePrototype](http://lua-api.factorio.com/latest/LuaTilePrototype.html) or [LuaTile](http://lua-api.factorio.com/latest/LuaTile.html): Setting to nil erases the filter."
          },
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "swap_stack": {
        "name": "swap_stack",
        "type": "function",
        "doc": "Swaps this item stack with the given item stack if allowed.   \n\n**Parameters**  \nstack :: [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html)  \n\n**Return value**  \nif the 2 stacks were swapped successfully.",
        "returns": "boolean",
        "args": {
          "stack": {
            "name": "stack",
            "type": "LuaItemStack",
            "doc": "stack :: [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html)"
          }
        }
      },
      "tags": {
        "name": "tags",
        "type": "dictionary string → Any",
        "mode": "[RW]",
        "doc": "_Can only be used if this is ItemWithTags_"
      },
      "tile_filter_count": {
        "name": "tile_filter_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "The number of tile filters this deconstruction item support    \n_Can only be used if this is DeconstructionItem_"
      },
      "tile_filter_mode": {
        "name": "tile_filter_mode",
        "type": "defines.deconstruction_item.tile_filter_mode",
        "mode": "[RW]",
        "doc": "The blacklist/whitelist tile filter mode for this deconstruction ite    \n_Can only be used if this is DeconstructionItem_"
      },
      "tile_filters": {
        "name": "tile_filters",
        "type": "array of string",
        "mode": "[RW]",
        "doc": "The tile filters for this deconstruction ite"
      },
      "tile_selection_mode": {
        "name": "tile_selection_mode",
        "type": "defines.deconstruction_item.tile_selection_mode",
        "mode": "[RW]",
        "doc": "The tile selection mode for this deconstruction ite    \n_Can only be used if this is DeconstructionItem_"
      },
      "transfer_stack": {
        "name": "transfer_stack",
        "type": "function",
        "doc": "Transfers the given item stack into this item stack.   \n\n**Parameters**  \nstack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification)  \n\n**Return value**  \nTrue if the full stack was transferred.",
        "returns": "boolean",
        "args": {
          "stack": {
            "name": "stack",
            "type": "ItemStackSpecification",
            "doc": "stack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification)"
          }
        }
      },
      "trees_and_rocks_only": {
        "name": "trees_and_rocks_only",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If this deconstruction item is set to allow trees and rocks onl    \n_Can only be used if this is DeconstructionItem_"
      },
      "type": {
        "name": "type",
        "type": "string",
        "mode": "[R]",
        "doc": "Type of the item prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "valid_for_read": {
        "name": "valid_for_read",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this valid for reading? Differs from the usual ````\nvalid````\nin that ````\nvalid````\nwill be ````\ntrue````\neven   \nthe item stack is blank but the entity that holds it is still valid."
      }
    },
    "doc": "A reference to an item and count owned by some external entity."
  },
  "LuaLampControlBehavior": {
    "name": "LuaLampControlBehavior",
    "type": "LuaLampControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity",
      "Inherited from LuaGenericOnOffControlBehavior: disabled, circuit_condition, logistic_condition, connect_to_logistic_network"
    ],
    "properties": {
      "circuit_condition": {
        "name": "circuit_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The circuit condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the circuit condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 cha  \nsignal    \n````\na_behavior.circuit_condition = {condition={comparator=\"&gt;\",  \n                                           first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                           constant=4}}````"
      },
      "color": {
        "name": "color",
        "type": "Color",
        "mode": "[R]",
        "doc": "The color the lamp is showing or ````\nnil````\nif not using any colo"
      },
      "connect_to_logistic_network": {
        "name": "connect_to_logistic_network",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif this should connect to the logistic network."
      },
      "disabled": {
        "name": "disabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the entity is currently disabled because of the control behavior."
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "logistic_condition": {
        "name": "logistic_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The logistic condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the logistic condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more th  \n4 chain signal    \n````\na_behavior.logistic_condition = {condition={comparator=\"&gt;\",  \n                                            first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                            constant=4}}````"
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "use_colors": {
        "name": "use_colors",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the lamp should set the color from the circuit network signals."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for lamps."
  },
  "LuaLogisticCell": {
    "name": "LuaLogisticCell",
    "type": "LuaLogisticCell",
    "inherits": [],
    "properties": {
      "charge_approach_distance": {
        "name": "charge_approach_distance",
        "type": "float",
        "mode": "[R]",
        "doc": "Radius at which the robots hover when waiting to be charged."
      },
      "charging_robot_count": {
        "name": "charging_robot_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of robots currently charging."
      },
      "charging_robots": {
        "name": "charging_robots",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "Robots currently being charged."
      },
      "construction_radius": {
        "name": "construction_radius",
        "type": "float",
        "mode": "[R]",
        "doc": "Construction radius of this cell."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "is_in_construction_range": {
        "name": "is_in_construction_range",
        "type": "function",
        "doc": "Is a given position within the construction range of this cell?   \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)"
          }
        }
      },
      "is_in_logistic_range": {
        "name": "is_in_logistic_range",
        "type": "function",
        "doc": "Is a given position within the logistic range of this cell?   \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)"
          }
        }
      },
      "is_neighbour_with": {
        "name": "is_neighbour_with",
        "type": "function",
        "doc": "Are two cells neighbours?   \n\n**Parameters**  \nother :: [LuaLogisticCell](http://lua-api.factorio.com/latest/LuaLogisticCell.html)",
        "returns": "boolean",
        "args": {
          "other": {
            "name": "other",
            "type": "LuaLogisticCell",
            "doc": "other :: [LuaLogisticCell](http://lua-api.factorio.com/latest/LuaLogisticCell.html)"
          }
        }
      },
      "logistic_network": {
        "name": "logistic_network",
        "type": "LuaLogisticNetwork",
        "mode": "[R]",
        "doc": "The network that owns this cell or ````\nnil````\n."
      },
      "logistic_radius": {
        "name": "logistic_radius",
        "type": "float",
        "mode": "[R]",
        "doc": "Logistic radius of this cell."
      },
      "logistics_connection_distance": {
        "name": "logistics_connection_distance",
        "type": "float",
        "mode": "[R]",
        "doc": "Logistic connection distance of this cell."
      },
      "mobile": {
        "name": "mobile",
        "type": "boolean",
        "mode": "[R]",
        "doc": "````\ntrue````\nif this is a mobile cell. In vanilla, only the logistic cell created by a character's person  \nroboport is mobile."
      },
      "neighbours": {
        "name": "neighbours",
        "type": "array of LuaLogisticCell",
        "mode": "[R]",
        "doc": "Neighbouring cells."
      },
      "owner": {
        "name": "owner",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "This cell's owner."
      },
      "stationed_construction_robot_count": {
        "name": "stationed_construction_robot_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of stationed construction robots in this cell."
      },
      "stationed_logistic_robot_count": {
        "name": "stationed_logistic_robot_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of stationed logistic robots in this cell."
      },
      "to_charge_robot_count": {
        "name": "to_charge_robot_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of robots waiting to charge."
      },
      "to_charge_robots": {
        "name": "to_charge_robots",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "Robots waiting to charge."
      },
      "transmitting": {
        "name": "transmitting",
        "type": "boolean",
        "mode": "[R]",
        "doc": "````\ntrue````\nif this cell is active."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Logistic cell of a particular LuaEntity. A \"Logistic Cell\" is the given name for\n settings and properties used by what would normally be seen as a \"Roboport\". A logistic\n cell however doesn't have to be attached to the roboport entity (the character has one for\n the personal roboport)."
  },
  "LuaLogisticContainerControlBehavior": {
    "name": "LuaLogisticContainerControlBehavior",
    "type": "LuaLogisticContainerControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "circuit_mode_of_operation": {
        "name": "circuit_mode_of_operation",
        "type": "defines.control_behavior.logistic_container.circuit_mode_of_operation",
        "mode": "[RW]",
        "doc": "The circuit mode of operations for the logistic container."
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for logistic chests."
  },
  "LuaLogisticNetwork": {
    "name": "LuaLogisticNetwork",
    "type": "LuaLogisticNetwork",
    "inherits": [],
    "properties": {
      "active_provider_points": {
        "name": "active_provider_points",
        "type": "array of LuaLogisticPoint",
        "mode": "[R]",
        "doc": "All active provider points in this network."
      },
      "all_construction_robots": {
        "name": "all_construction_robots",
        "type": "uint",
        "mode": "[R]",
        "doc": "The total number of construction robots in the network (idle and active + in roboports)."
      },
      "all_logistic_robots": {
        "name": "all_logistic_robots",
        "type": "uint",
        "mode": "[R]",
        "doc": "The total number of logistic robots in the network (idle and active + in roboports)."
      },
      "available_construction_robots": {
        "name": "available_construction_robots",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of construction robots available for a job."
      },
      "available_logistic_robots": {
        "name": "available_logistic_robots",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of logistic robots available for a job."
      },
      "cells": {
        "name": "cells",
        "type": "array of LuaLogisticCell",
        "mode": "[R]",
        "doc": "All cells in this network."
      },
      "construction_robots": {
        "name": "construction_robots",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "All construction robots in this logistic networ"
      },
      "empty_provider_points": {
        "name": "empty_provider_points",
        "type": "array of LuaLogisticPoint",
        "mode": "[R]",
        "doc": "All things that have empty provider points in this network."
      },
      "empty_providers": {
        "name": "empty_providers",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "All entities that have empty logistic provider points in this network."
      },
      "find_cell_closest_to": {
        "name": "find_cell_closest_to",
        "type": "function",
        "doc": "Find logistic cell closest to a given position.   \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \n\n**Return value**  \nMay be ````\nnil````\nif no cell was found.",
        "returns": "LuaLogisticCell",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)"
          }
        }
      },
      "force": {
        "name": "force",
        "type": "LuaForce",
        "mode": "[R]",
        "doc": "The force this logistic network belongs t"
      },
      "get_contents": {
        "name": "get_contents",
        "type": "function",
        "doc": "Get item counts for the entire networ    \n\n**Return value**  \nA mapping of item prototype names to the number available in the network.  \nSee also  \n[LuaInventory::get_contents](http://lua-api.factorio.com/latest/LuaInventory.html#LuaInventory.get_contents)",
        "returns": "dictionary string → uint"
      },
      "get_item_count": {
        "name": "get_item_count",
        "type": "function",
        "doc": "Count given or all items in the network or given members    \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Item name to count. If not given, gives coun  \nof all items in the network.  \nmember :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Logistic members to check, must be either ````\n\"storage\"````  \nor ````\n\"providers\"````\n. If not given, gives count in the entire network.",
        "returns": "int",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Item name to count. If not given, gives coun  \nof all items in the network."
          },
          "member": {
            "name": "member",
            "type": "string",
            "doc": "member :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Logistic members to check, must be either ````\n\"storage\"````  \nor ````\n\"providers\"````\n. If not given, gives count in the entire network."
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "insert": {
        "name": "insert",
        "type": "function",
        "doc": "Insert items into the logistic network. This will actually insert the items into so  \nlogistic chests.   \n\n**Parameters**  \nitem :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): What to insert.  \nmembers :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Which logistic members to insert the items to. Must   \n````\n\"storage\"````\n, ````\n\"storage-empty\"````\n(storage chests that are completely empty  \n````\n\"storage-empty-slot\"````\n(storage chests that have an empty slot), or ````\n\"requester\"````\n. If n  \nspecified, inserts items into the logistic network in the usual order.  \n\n**Return value**  \nNumber of items actually inserted.",
        "returns": "uint",
        "args": {
          "item": {
            "name": "item",
            "type": "ItemStackSpecification",
            "doc": "item :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): What to insert."
          },
          "members": {
            "name": "members",
            "type": "string",
            "doc": "members :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Which logistic members to insert the items to. Must   \n````\n\"storage\"````\n, ````\n\"storage-empty\"````\n(storage chests that are completely empty  \n````\n\"storage-empty-slot\"````\n(storage chests that have an empty slot), or ````\n\"requester\"````\n. If n  \nspecified, inserts items into the logistic network in the usual order."
          }
        }
      },
      "logistic_members": {
        "name": "logistic_members",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "All other entities that have logistic points in this network (inserters mostly)."
      },
      "logistic_robots": {
        "name": "logistic_robots",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "All logistic robots in this logistic networ"
      },
      "passive_provider_points": {
        "name": "passive_provider_points",
        "type": "array of LuaLogisticPoint",
        "mode": "[R]",
        "doc": "All passive provider points in this network."
      },
      "provider_points": {
        "name": "provider_points",
        "type": "array of LuaLogisticPoint",
        "mode": "[R]",
        "doc": "All things that have provider points in this network."
      },
      "providers": {
        "name": "providers",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "All entities that have logistic provider points in this network."
      },
      "remove_item": {
        "name": "remove_item",
        "type": "function",
        "doc": "Remove items from the logistic network. This will actually remove the items from so  \nlogistic chests.   \n\n**Parameters**  \nitem :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): What to remove.  \nmembers :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Which logistic members to remove from. Must   \n````\n\"storage\"````\n, ````\n\"passive-provider\"````\n, ````\n\"buffer\"````\n, or ````\n\"active-provider\"````\n. If not specified, remov  \nfrom the network in the usual order.  \n\n**Return value**  \nNumber of items removed.",
        "returns": "uint",
        "args": {
          "item": {
            "name": "item",
            "type": "ItemStackSpecification",
            "doc": "item :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): What to remove."
          },
          "members": {
            "name": "members",
            "type": "string",
            "doc": "members :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Which logistic members to remove from. Must   \n````\n\"storage\"````\n, ````\n\"passive-provider\"````\n, ````\n\"buffer\"````\n, or ````\n\"active-provider\"````\n. If not specified, remov  \nfrom the network in the usual order."
          }
        }
      },
      "requester_points": {
        "name": "requester_points",
        "type": "array of LuaLogisticPoint",
        "mode": "[R]",
        "doc": "All things that have requester points in this network."
      },
      "requesters": {
        "name": "requesters",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "All entities that have logistic requester points in this network."
      },
      "robot_limit": {
        "name": "robot_limit",
        "type": "uint",
        "mode": "[R]",
        "doc": "Maximum number of robots the network can work with. Currently only used for the person  \nroboport."
      },
      "robots": {
        "name": "robots",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "All robots in this logistic networ"
      },
      "select_drop_point": {
        "name": "select_drop_point",
        "type": "function",
        "doc": "Find a logistic point to drop the specific item stack.   \n\n**Parameters**  \nTable with the following fields:   \nstack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Name of the item to select.  \nmembers :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): When given, it will find from only the specific type of member. Must be ````\n\"storage\"````\n, ````\n\"storage-empty\"````\n, ````\n\"storage-empty-slot\"````\nor ````\n\"requester\"````\n. If not specified, selects with normal priorities.  \n\n**Return value**  \nMay be ````\nnil````\nif no point was found.",
        "returns": "LuaLogisticPoint",
        "args": {
          "stack": {
            "name": "stack",
            "type": "ItemStackSpecification",
            "doc": "Table with the following fields:   \nstack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Name of the item to select.  \nmembers :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): When given, it will find from only the specific type of member. Must be ````\n\"storage\"````\n, ````\n\"storage-empty\"````\n, ````\n\"storage-empty-slot\"````\nor ````\n\"requester\"````\n. If not specified, selects with normal priorities."
          }
        }
      },
      "select_pickup_point": {
        "name": "select_pickup_point",
        "type": "function",
        "doc": "Find the 'best' logistic point with this item ID and from the given position or from given chest type.   \n\n**Parameters**  \nTable with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the item to select.  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): When given, it will find the storage 'best' storage point from this position.  \ninclude_buffers :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Whether to consider buffer chests or not. Defaults to false. Only considered if selecting with position.  \nmembers :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): When given, it will find from only the specific type of member. Must be ````\n\"storage\"````\n, ````\n\"passive-provider\"````\n, ````\n\"buffer\"````\nor ````\n\"active-provider\"````\n. If not specified, selects with normal priorities. Not considered if position is specified.  \n\n**Return value**  \nMay be ````\nnil````\nif no point was found.",
        "returns": "LuaLogisticPoint",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the item to select.  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): When given, it will find the storage 'best' storage point from this position.  \ninclude_buffers :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Whether to consider buffer chests or not. Defaults to false. Only considered if selecting with position.  \nmembers :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): When given, it will find from only the specific type of member. Must be ````\n\"storage\"````\n, ````\n\"passive-provider\"````\n, ````\n\"buffer\"````\nor ````\n\"active-provider\"````\n. If not specified, selects with normal priorities. Not considered if position is specified."
          }
        }
      },
      "storage_points": {
        "name": "storage_points",
        "type": "array of LuaLogisticPoint",
        "mode": "[R]",
        "doc": "All things that have storage points in this network."
      },
      "storages": {
        "name": "storages",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "All entities that have logistic storage points in this network."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "A single logistic network of a given force on a given surface."
  },
  "LuaLogisticPoint": {
    "name": "LuaLogisticPoint",
    "type": "LuaLogisticPoint",
    "inherits": [],
    "properties": {
      "exact": {
        "name": "exact",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this logistic point is using the exact mode. In exact mode robots never over-deliver request"
      },
      "filters": {
        "name": "filters",
        "type": "array of LogisticFilter",
        "mode": "[R]",
        "doc": "The logistic filters for this logistic point or ````\nnil````\nif this doesn't use logistic filter    \n\n**Note: ** The returned array will always have an entry for each filter and will be indexed in sequence when not nil."
      },
      "force": {
        "name": "force",
        "type": "LuaForce",
        "mode": "[R]",
        "doc": "The force of this logistic poin    \n\n**Note: ** This will always be the same as the [LuaLogisticPoint::owner](http://lua-api.factorio.com/latest/LuaLogisticPoint.html#LuaLogisticPoint.owner) force."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "logistic_member_index": {
        "name": "logistic_member_index",
        "type": "uint",
        "mode": "[R]",
        "doc": "The Logistic member index of this logistic poin"
      },
      "logistic_network": {
        "name": "logistic_network",
        "type": "LuaLogisticNetwork",
        "mode": "[R]"
      },
      "mode": {
        "name": "mode",
        "type": "defines.logistic_mode",
        "mode": "[R]",
        "doc": "The logistic mod"
      },
      "owner": {
        "name": "owner",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) owner of this [LuaLogisticPoint](http://lua-api.factorio.com/latest/LuaLogisticPoint.html"
      },
      "targeted_items_deliver": {
        "name": "targeted_items_deliver",
        "type": "dictionary string → uint",
        "mode": "[R]",
        "doc": "Items targeted to be dropped off into this logistic point by robot"
      },
      "targeted_items_pickup": {
        "name": "targeted_items_pickup",
        "type": "dictionary string → uint",
        "mode": "[R]",
        "doc": "Items targeted to be picked up from this logistic point by robot"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Logistic point of a particular LuaEntity. A \"Logistic point\" is the name given for\n settings and properties used by requester, provider, and storage points in a given logistic network.\n These \"points\" don't have to be a logistic container but often are. One other entity that can own several\n points is the \"character\" character type entity."
  },
  "LuaMiningDrillControlBehavior": {
    "name": "LuaMiningDrillControlBehavior",
    "type": "LuaMiningDrillControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity",
      "Inherited from LuaGenericOnOffControlBehavior: disabled, circuit_condition, logistic_condition, connect_to_logistic_network"
    ],
    "properties": {
      "circuit_condition": {
        "name": "circuit_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The circuit condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the circuit condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 cha  \nsignal    \n````\na_behavior.circuit_condition = {condition={comparator=\"&gt;\",  \n                                           first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                           constant=4}}````"
      },
      "circuit_enable_disable": {
        "name": "circuit_enable_disable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif this drill is enabled or disabled using the logistics or circuit condition."
      },
      "circuit_read_resources": {
        "name": "circuit_read_resources",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif this drill should send the resources in the field to the circuit networ  \nWhich resources depends on [LuaMiningDrillControlBehavior::resource_read_mode](http://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaMiningDrillControlBehavior.resource_read_mode)"
      },
      "connect_to_logistic_network": {
        "name": "connect_to_logistic_network",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif this should connect to the logistic network."
      },
      "disabled": {
        "name": "disabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the entity is currently disabled because of the control behavior."
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "logistic_condition": {
        "name": "logistic_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The logistic condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the logistic condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more th  \n4 chain signal    \n````\na_behavior.logistic_condition = {condition={comparator=\"&gt;\",  \n                                            first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                            constant=4}}````"
      },
      "resource_read_mode": {
        "name": "resource_read_mode",
        "type": "defines.control_behavior.mining_drill.resource_read_mode",
        "mode": "[RW]",
        "doc": "If the mining drill should send just the resources in its area or the entire field it's on to the circuit network."
      },
      "resource_read_targets": {
        "name": "resource_read_targets",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "The resource entities that the mining drill will send information about to the circuit network or an empty array."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for mining drills."
  },
  "LuaModSettingPrototype": {
    "name": "LuaModSettingPrototype",
    "type": "LuaModSettingPrototype",
    "inherits": [],
    "properties": {
      "allow_blank": {
        "name": "allow_blank",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this string setting allows blank values or ````\nnil````\nif not a string settin"
      },
      "allowed_values": {
        "name": "allowed_values",
        "type": "array of string or array of int or array of double",
        "mode": "[R]",
        "doc": "The allowed values for this setting or ````\nnil````\nif this setting doesn't use the a fixed set of value"
      },
      "auto_trim": {
        "name": "auto_trim",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this string setting auto-trims values or ````\nnil````\nif not a string settin"
      },
      "default_value": {
        "name": "default_value",
        "type": "boolean or double or int or string",
        "mode": "[R]",
        "doc": "The default value of this settin"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "maximum_value": {
        "name": "maximum_value",
        "type": "double or int",
        "mode": "[R]",
        "doc": "The maximum value for this setting or ````\nnil````\nif this setting type doesn't support a maximu"
      },
      "minimum_value": {
        "name": "minimum_value",
        "type": "double or int",
        "mode": "[R]",
        "doc": "The minimum value for this setting or ````\nnil````\nif this setting type doesn't support a minimu"
      },
      "mod": {
        "name": "mod",
        "type": "string",
        "mode": "[R]",
        "doc": "The mod that owns this settin"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "setting_type": {
        "name": "setting_type",
        "type": "string",
        "mode": "[R]"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Prototype of a mod setting."
  },
  "LuaNamedNoiseExpression": {
    "name": "LuaNamedNoiseExpression",
    "type": "LuaNamedNoiseExpression",
    "inherits": [],
    "properties": {
      "expression": {
        "name": "expression",
        "type": "NoiseExpression",
        "mode": "[R]",
        "doc": "The expression itself."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "intended_property": {
        "name": "intended_property",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of the property that this expression is intended to provide a value for, if any."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Prototype of a named noise expression."
  },
  "LuaNoiseLayerPrototype": {
    "name": "LuaNoiseLayerPrototype",
    "type": "LuaNoiseLayerPrototype",
    "inherits": [],
    "properties": {
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Prototype of a noise layer."
  },
  "LuaPermissionGroup": {
    "name": "LuaPermissionGroup",
    "type": "LuaPermissionGroup",
    "inherits": [],
    "properties": {
      "add_player": {
        "name": "add_player",
        "type": "function",
        "doc": "Adds the given player to this grou    \n\n**Parameters**  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification)  \n\n**Return value**  \nIf the player was added.",
        "returns": "boolean",
        "args": {
          "player": {
            "name": "player",
            "type": "PlayerSpecification",
            "doc": "player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification)"
          }
        }
      },
      "allows_action": {
        "name": "allows_action",
        "type": "function",
        "doc": "If this group allows the given actio    \n\n**Parameters**  \naction: The defines.input_action value.",
        "returns": "boolean",
        "args": {
          "action": {
            "name": "action",
            "doc": "action: The defines.input_action value.",
            "type": "action"
          }
        }
      },
      "destroy": {
        "name": "destroy",
        "type": "function",
        "doc": "Destroys this grou    \n\n**Return value**  \nIf the group was destroyed.",
        "returns": "boolean"
      },
      "group_id": {
        "name": "group_id",
        "type": "uint",
        "mode": "[R]",
        "doc": "The group"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[RW]",
        "doc": "The name of this grou    \n\n**Note: ** Setting to ````\nnil````\nor an empty string sets the name to the default value."
      },
      "players": {
        "name": "players",
        "type": "array of LuaPlayer",
        "mode": "[R]",
        "doc": "The players in this grou"
      },
      "remove_player": {
        "name": "remove_player",
        "type": "function",
        "doc": "Removes the given player from this grou    \n\n**Parameters**  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification)  \n\n**Return value**  \nIf the player was removed.",
        "returns": "boolean",
        "args": {
          "player": {
            "name": "player",
            "type": "PlayerSpecification",
            "doc": "player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification)"
          }
        }
      },
      "set_allows_action": {
        "name": "set_allows_action",
        "type": "function",
        "doc": "Sets if the player is allowed to perform the given actio    \n\n**Parameters**  \naction: The defines.input_action value.  \n\n**Return value**  \nIf the value was applied.",
        "returns": "boolean",
        "args": {
          "action": {
            "name": "action",
            "doc": "action: The defines.input_action value.",
            "type": "action"
          },
          "undefined": {
            "doc": ""
          }
        }
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "A permission group that defines what players in this group are allowed to do."
  },
  "LuaPermissionGroups": {
    "name": "LuaPermissionGroups",
    "type": "LuaPermissionGroups",
    "inherits": [],
    "properties": {
      "create_group": {
        "name": "create_group",
        "type": "function",
        "doc": "Creates a new permission grou    \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n\n**Note: ** May return nil if the calling player doesn't have permission to make groups.",
        "returns": "LuaPermissionGroup",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)"
          }
        }
      },
      "get_group": {
        "name": "get_group",
        "type": "function",
        "doc": "Gets the permission group with the given name or group ID or ````\nnil````\nif there is no matching grou    \n\n**Parameters**  \ngroup :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "returns": "LuaPermissionGroup",
        "args": {
          "group": {
            "name": "group",
            "type": "string or uint",
            "doc": "group :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "groups": {
        "name": "groups",
        "type": "array of LuaPermissionGroup",
        "mode": "[R]",
        "doc": "All of the permission group"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "All permission groups."
  },
  "LuaPlayer": {
    "name": "LuaPlayer",
    "type": "LuaPlayer",
    "inherits": [
      "Inherited from LuaControl: get_inventory, get_main_inventory, can_insert, insert, set_gui_arrow, clear_gui_arrow, get_item_count, has_items_inside, can_reach_entity, clear_items_inside, remove_item, teleport, update_selected_entity, clear_selected_entity, disable_flashlight, enable_flashlight, get_craftable_count, begin_crafting, cancel_crafting, mine_entity, mine_tile, is_player, open_technology_gui, surface, position, vehicle, force, selected, opened, crafting_queue_size, walking_state, riding_state, mining_state, shooting_state, picking_state, repair_state, cursor_stack, cursor_ghost, driving, crafting_queue, following_robots, cheat_mode, character_crafting_speed_modifier, character_mining_speed_modifier, character_additional_mining_categories, character_running_speed_modifier, character_build_distance_bonus, character_item_drop_distance_bonus, character_reach_distance_bonus, character_resource_reach_distance_bonus, character_item_pickup_distance_bonus, character_loot_pickup_distance_bonus, character_inventory_slots_bonus, character_logistic_slot_count_bonus, character_trash_slot_count_bonus, character_maximum_following_robot_count_bonus, character_health_bonus, auto_trash_filters, opened_gui_type, build_distance, drop_item_distance, reach_distance, item_pickup_distance, loot_pickup_distance, resource_reach_distance, in_combat, character_running_speed"
    ],
    "properties": {
      "add_alert": {
        "name": "add_alert",
        "doc": "Adds an alert to this player for the given entity of the given alert typ    \n\n**Parameters**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntype :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)",
        "type": "function",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          },
          "type": {
            "name": "type",
            "type": "defines.alert_type",
            "doc": "type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
          }
        }
      },
      "add_custom_alert": {
        "name": "add_custom_alert",
        "doc": "Adds a custom alert to this playe    \n\n**Parameters**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nicon :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID)  \nmessage :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \nshow_on_map :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)",
        "type": "function",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          },
          "icon": {
            "name": "icon",
            "type": "SignalID",
            "doc": "icon :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID)"
          },
          "message": {
            "name": "message",
            "type": "LocalisedString",
            "doc": "message :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
          },
          "show_on_map": {
            "name": "show_on_map",
            "type": "boolean",
            "doc": "show_on_map :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          }
        }
      },
      "admin": {
        "name": "admin",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the player is an admi    \n\n**Note: ** Trying to change player admin status from the console when you aren't an admin does nothing."
      },
      "afk_time": {
        "name": "afk_time",
        "type": "uint",
        "mode": "[R]",
        "doc": "How many ticks since the last action of this play"
      },
      "associate_character": {
        "name": "associate_character",
        "doc": "Associates a character with this playe    \n\n**Parameters**  \ncharacter :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The character entity.  \n\n**Note: ** The character must not be connected to any controller.  \n\n**Note: ** If this player is currently disconnected (see [LuaPlayer::connected](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.connected)) the character will be immediately \"logged off\".  \n\n**Note: ** See [LuaPlayer::get_associated_characters](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.get_associated_characters) for more information.",
        "type": "function",
        "args": {
          "character": {
            "name": "character",
            "type": "LuaEntity",
            "doc": "character :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The character entity."
          }
        }
      },
      "auto_trash_filters": {
        "name": "auto_trash_filters",
        "type": "dictionary string → uint",
        "mode": "[RW]",
        "doc": "The auto-trash filters. The keys are item prototype names, the values are the slot values.   \n\n**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character)).  \n\n**Example**  \nThis will set the auto-trash slots to keep only at most 20 iron plates and 42 copper wires in the player  \ninventor    \n````\ngame.player.auto_trash_filters = {[\"iron-plate\"] = 20, [\"copper-cable\"] = 42}````"
      },
      "begin_crafting": {
        "name": "begin_crafting",
        "type": "function",
        "doc": "Begins crafting the given count of the given recip    \n\n**Parameters**  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to craft.  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe to craft.  \nsilent :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If false and the recipe can't be crafted the requested number of times printing the failure is skipped.  \n\n**Return value**  \nThe count that was actually started crafting.",
        "returns": "uint",
        "args": {
          "count": {
            "name": "count",
            "type": "uint",
            "doc": "count :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to craft.  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe to craft.  \nsilent :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If false and the recipe can't be crafted the requested number of times printing the failure is skipped."
          }
        }
      },
      "blueprint_to_setup": {
        "name": "blueprint_to_setup",
        "type": "LuaItemStack",
        "mode": "[R]",
        "doc": "The item stack containing a blueprint to be setu"
      },
      "build_distance": {
        "name": "build_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "The build distance of this character or max uint when not a character or player connected to a characte"
      },
      "build_from_cursor": {
        "name": "build_from_cursor",
        "doc": "Builds what ever is in the cursor on the surface the player is on    \n\n**Parameters**  \nTable with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the entity would be placed  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): Direction the entity would be placed  \nalt :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If alt build should be used instead of normal build. Defaults to normal.  \nterrain_building_size :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The size for building terrain if building terrain. Defaults to 2.  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \n\n**Note: ** Anything built will fire normal player-built events.  \n\n**Note: ** The cursor stack will automatically be reduced as if the player built normally.",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "Table with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the entity would be placed  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): Direction the entity would be placed  \nalt :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If alt build should be used instead of normal build. Defaults to normal.  \nterrain_building_size :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The size for building terrain if building terrain. Defaults to 2.  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped."
          }
        }
      },
      "can_build_from_cursor": {
        "name": "can_build_from_cursor",
        "type": "function",
        "doc": "Checks if this player can build what ever is in the cursor on the surface the player is on    \n\n**Parameters**  \nTable with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the entity would be placed  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): Direction the entity would be placed  \nalt :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If alt build should be used instead of normal build. Defaults to normal.  \nterrain_building_size :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The size for building terrain if building terrain. Defaults to 2.  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "Table with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the entity would be placed  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): Direction the entity would be placed  \nalt :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If alt build should be used instead of normal build. Defaults to normal.  \nterrain_building_size :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): The size for building terrain if building terrain. Defaults to 2.  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped."
          }
        }
      },
      "can_insert": {
        "name": "can_insert",
        "type": "function",
        "doc": "Can at least some items be inserted?   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items that would be inserted.  \n\n**Return value**  \n````\ntrue````\nif at least a part of the given items could be inserted into this inventory.",
        "returns": "boolean",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items that would be inserted."
          }
        }
      },
      "can_place_entity": {
        "name": "can_place_entity",
        "type": "function",
        "doc": "Checks if this player can build the give entity at the given location on the surface the player is on    \n\n**Parameters**  \nTable with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the entity to check  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the entity would be placed  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): Direction the entity would be placed",
        "returns": "boolean",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the entity to check  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the entity would be placed  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): Direction the entity would be placed"
          }
        }
      },
      "can_reach_entity": {
        "name": "can_reach_entity",
        "type": "function",
        "doc": "Can a given entity be opened or accessed?   \n\n**Parameters**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)",
        "returns": "boolean",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          }
        }
      },
      "cancel_crafting": {
        "name": "cancel_crafting",
        "doc": "Cancels crafting the given count of the given crafting queue index   \n\n**Parameters**  \noptions: :   \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The crafting queue index.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to cancel crafting.",
        "type": "function",
        "args": {
          "options": {
            "name": "options",
            "type": "uint",
            "doc": "options: :   \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The crafting queue index.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count to cancel crafting."
          }
        }
      },
      "character": {
        "name": "character",
        "type": "LuaEntity",
        "mode": "[RW]",
        "doc": "The character attached to this player, or ````\nnil````\nif no character.   \n\n**Note: ** Will also return ````\nnil````\nwhen the player is disconnected (see [LuaPlayer::connected](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.connected))."
      },
      "character_additional_mining_categories": {
        "name": "character_additional_mining_categories",
        "type": "array of string",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_build_distance_bonus": {
        "name": "character_build_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_crafting_speed_modifier": {
        "name": "character_crafting_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_health_bonus": {
        "name": "character_health_bonus",
        "type": "float",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_inventory_slots_bonus": {
        "name": "character_inventory_slots_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_item_drop_distance_bonus": {
        "name": "character_item_drop_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_item_pickup_distance_bonus": {
        "name": "character_item_pickup_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_logistic_slot_count_bonus": {
        "name": "character_logistic_slot_count_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_loot_pickup_distance_bonus": {
        "name": "character_loot_pickup_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_maximum_following_robot_count_bonus": {
        "name": "character_maximum_following_robot_count_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_mining_speed_modifier": {
        "name": "character_mining_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_reach_distance_bonus": {
        "name": "character_reach_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_resource_reach_distance_bonus": {
        "name": "character_resource_reach_distance_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_running_speed": {
        "name": "character_running_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "Gets the current movement speed of this character, including effects from exoskeletons, tiles, stickers and shootin"
      },
      "character_running_speed_modifier": {
        "name": "character_running_speed_modifier",
        "type": "double",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "character_trash_slot_count_bonus": {
        "name": "character_trash_slot_count_bonus",
        "type": "uint",
        "mode": "[RW]",
        "doc": "**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character (see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "chat_color": {
        "name": "chat_color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "The color used when this player talks in game."
      },
      "cheat_mode": {
        "name": "cheat_mode",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "When ````\ntrue````\nhand crafting is free and instant"
      },
      "clean_cursor": {
        "name": "clean_cursor",
        "type": "function",
        "doc": "Invokes the \"clean cursor\" action on the player as if the user pressed i    \n\n**Return value**  \nIf the cursor is now empty.",
        "returns": "boolean"
      },
      "clear_console": {
        "name": "clear_console",
        "doc": "Clear the chat console.",
        "type": "function"
      },
      "clear_gui_arrow": {
        "name": "clear_gui_arrow",
        "doc": "Removes the arrow created by ````\nset_gui_arrow````\n.",
        "type": "function"
      },
      "clear_items_inside": {
        "name": "clear_items_inside",
        "doc": "Remove all items from this entity.",
        "type": "function"
      },
      "clear_selected_entity": {
        "name": "clear_selected_entity",
        "doc": "Unselect any selected entity.",
        "type": "function"
      },
      "close_map": {
        "name": "close_map",
        "doc": "Queues request to switch to the normal game view from the map or zoom to world vie  \nRender mode change requests are processed before rendering of the next frame.",
        "type": "function"
      },
      "color": {
        "name": "color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "The color associated with the player. This will be used to tint the player's character as well as the  \nbuildings and vehicles."
      },
      "connected": {
        "name": "connected",
        "type": "boolean",
        "mode": "[R]",
        "doc": "````\ntrue````\nif the player is currently connected to the game."
      },
      "controller_type": {
        "name": "controller_type",
        "type": "defines.controllers",
        "mode": "[R]"
      },
      "crafting_queue": {
        "name": "crafting_queue",
        "mode": "[R]",
        "doc": "Gets the current crafting queue items. Each CraftingQueueItem is a table:   \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The crafting queue index  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The recipe.  \ncount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The count being crafted.",
        "type": "array of CraftingQueueItem"
      },
      "crafting_queue_size": {
        "name": "crafting_queue_size",
        "type": "uint",
        "mode": "[R]",
        "doc": "Size of the crafting queue."
      },
      "create_character": {
        "name": "create_character",
        "type": "function",
        "doc": "Creates and attaches a character entity to this playe    \n\n**Parameters**  \ncharacter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The character to create else the default is used.  \n\n**Return value**  \nWhether the character was created.  \n\n**Note: ** The player must not have a character already connected and must be online (see [LuaPlayer::connected](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.connected)).",
        "returns": "boolean",
        "args": {
          "character": {
            "name": "character",
            "type": "string",
            "doc": "character :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): The character to create else the default is used."
          }
        }
      },
      "create_local_flying_text": {
        "name": "create_local_flying_text",
        "doc": "Spawn a flying text that is only visible to this playe    \n\n**Parameters**  \nTable with the following fields:   \ntext :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \nspeed :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Movement per second  \n\n**Note: ** Local flying text is not saved, this means it will disappear after save/load.",
        "type": "function",
        "args": {
          "text": {
            "name": "text",
            "type": "LocalisedString",
            "doc": "Table with the following fields:   \ntext :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \nspeed :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Movement per second"
          }
        }
      },
      "cursor_ghost": {
        "name": "cursor_ghost",
        "type": "ItemPrototypeSpecification",
        "mode": "[RW]",
        "doc": "The ghost prototype in the player's curso    \n\n**Note: ** When read, it will be a [LuaItemPrototype](http://lua-api.factorio.com/latest/LuaItemPrototype.html).  \n\n**Note: ** Items in the cursor stack will take priority over the cursor ghost."
      },
      "cursor_stack": {
        "name": "cursor_stack",
        "type": "LuaItemStack",
        "mode": "[R]",
        "doc": "The player's cursor stack."
      },
      "disable_alert": {
        "name": "disable_alert",
        "type": "function",
        "doc": "Disables alerts for the given alert categor    \n\n**Parameters**  \nalert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)  \n\n**Return value**  \nIf the alert type was disabled (false if it was already disabled).",
        "returns": "boolean",
        "args": {
          "alert_type": {
            "name": "alert_type",
            "type": "defines.alert_type",
            "doc": "alert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
          }
        }
      },
      "disable_flashlight": {
        "name": "disable_flashlight",
        "doc": "Disable the flashlight.",
        "type": "function"
      },
      "disable_recipe_groups": {
        "name": "disable_recipe_groups",
        "doc": "Disable recipe groups.",
        "type": "function"
      },
      "disable_recipe_subgroups": {
        "name": "disable_recipe_subgroups",
        "doc": "Disable recipe subgroups.",
        "type": "function"
      },
      "disassociate_character": {
        "name": "disassociate_character",
        "doc": "Disassociates a character from this playe  \nThis is functionally the same as setting [LuaEntity::associated_player](http://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.associated_player) to ````\nnil````    \n\n**Parameters**  \ncharacter :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The character entity  \n\n**Note: ** See [LuaPlayer::get_associated_characters](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.get_associated_characters) for more information.",
        "type": "function",
        "args": {
          "character": {
            "name": "character",
            "type": "LuaEntity",
            "doc": "character :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The character entity"
          }
        }
      },
      "display_resolution": {
        "name": "display_resolution",
        "type": "DisplayResolution",
        "mode": "[R]",
        "doc": "The display resolution for this playe"
      },
      "display_scale": {
        "name": "display_scale",
        "type": "double",
        "mode": "[R]",
        "doc": "The display scale for this playe"
      },
      "driving": {
        "name": "driving",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the player is in a vehicle. Writing to this attribute puts the player in or out of  \nvehicle."
      },
      "drop_item_distance": {
        "name": "drop_item_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "The item drop distance of this character or max uint when not a character or player connected to a characte"
      },
      "enable_alert": {
        "name": "enable_alert",
        "type": "function",
        "doc": "Enables alerts for the given alert categor    \n\n**Parameters**  \nalert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)  \n\n**Return value**  \nIf the alert type was enabled (false if it was already enabled).",
        "returns": "boolean",
        "args": {
          "alert_type": {
            "name": "alert_type",
            "type": "defines.alert_type",
            "doc": "alert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
          }
        }
      },
      "enable_flashlight": {
        "name": "enable_flashlight",
        "doc": "Enable the flashlight.",
        "type": "function"
      },
      "enable_recipe_groups": {
        "name": "enable_recipe_groups",
        "doc": "Enable recipe groups.",
        "type": "function"
      },
      "enable_recipe_subgroups": {
        "name": "enable_recipe_subgroups",
        "doc": "Enable recipe subgroups.",
        "type": "function"
      },
      "entity_copy_source": {
        "name": "entity_copy_source",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The source entity used during entity settings copy-paste if an  \n````\nnil````\nif there isn't currently a source entity."
      },
      "exit_cutscene": {
        "name": "exit_cutscene",
        "doc": "Exit the current cutscene. Errors if not in a cutscene.",
        "type": "function"
      },
      "following_robots": {
        "name": "following_robots",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "The current combat robots following the charact    \n\n**Note: ** When called on a [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html), it must be associated with a character(see [LuaPlayer::character](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character))."
      },
      "force": {
        "name": "force",
        "type": "ForceSpecification",
        "mode": "[RW]",
        "doc": "The force of this entity. Reading will always give a [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html), but it is possible   \nassign either [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) to this attribute to change the forc"
      },
      "game_view_settings": {
        "name": "game_view_settings",
        "type": "GameViewSettings",
        "mode": "[RW]",
        "doc": "The player's game view settings."
      },
      "get_active_quick_bar_page": {
        "name": "get_active_quick_bar_page",
        "type": "function",
        "doc": "Gets which quick bar page is being used for the given screen page or ````\nnil````\nif not know    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change.",
        "returns": "uint8",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change."
          }
        }
      },
      "get_alerts": {
        "name": "get_alerts",
        "type": "function",
        "doc": "Gets all alerts matching the given filters or if no filters are given all alerts are returne    \nA mapping of surface index to an array of arrays of alerts indexed by the alert typ  \nAn alert is a table:   \ntarget :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional)  \nprototype :: [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html) (optional)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \ntick :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The tick this alert was created  \nicon :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID) (optional): The SignalID used for a custom alert. Only present for custom alerts.  \nmessage :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): The message for a custom alert. Only present for custom alerts.  \n\n**Parameters**  \nTable with the following fields:   \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional)  \nprototype :: [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html) (optional)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \ntype :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type) (optional)  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)",
        "returns": "dictionary uint → dictionary defines.alert_type → array of alert",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "Table with the following fields:   \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional)  \nprototype :: [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html) (optional)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \ntype :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type) (optional)  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)"
          }
        }
      },
      "get_associated_characters": {
        "name": "get_associated_characters",
        "type": "function",
        "doc": "The characters associated with this playe    \n\n**Note: ** The array will always be empty when the player is disconnected (see [LuaPlayer::connected](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.connected)) regardless of there being associated characters.  \n\n**Note: ** Characters associated with this player will be logged off when this player disconnects but are not controlled by any player.",
        "returns": "array of LuaEntity"
      },
      "get_craftable_count": {
        "name": "get_craftable_count",
        "type": "function",
        "doc": "Gets the count of the given recipe that can be crafted    \n\n**Parameters**  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe.  \n\n**Return value**  \nThe count that can be crafted.",
        "returns": "uint",
        "args": {
          "recipe": {
            "name": "recipe",
            "type": "string or LuaRecipe",
            "doc": "recipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](http://lua-api.factorio.com/latest/LuaRecipe.html): The recipe."
          }
        }
      },
      "get_goal_description": {
        "name": "get_goal_description",
        "type": "function",
        "doc": "Get the current goal description, as a localised string.",
        "returns": "LocalisedString"
      },
      "get_inventory": {
        "name": "get_inventory",
        "type": "function",
        "doc": "Get an inventory belonging to this entity. This can be either the \"main\" inventory or some auxilia  \none, like the module slots or logistic trash slot    \n\n**Parameters**  \ninventory :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \n\n**Return value**  \nor ````\nnil````\nif this entity doesn't have an inventory with the given index.  \n\n**Note: ** A given [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory) is only meaningful for the corresponding LuaObject type. EG: get_inventory(defines.inventory.character_main) is only meaningful if 'this' is a player character. You may get a value back but if the type of 'this' isn't the type referred to by the [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory) it's almost guaranteed to not be the inventory asked for.",
        "returns": "LuaInventory",
        "args": {
          "inventory": {
            "name": "inventory",
            "type": "defines.inventory",
            "doc": "inventory :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)"
          }
        }
      },
      "get_item_count": {
        "name": "get_item_count",
        "type": "function",
        "doc": "Get the number of all or some items in this entity.   \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items.",
        "returns": "uint",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items."
          }
        }
      },
      "get_main_inventory": {
        "name": "get_main_inventory",
        "type": "function",
        "doc": "Gets the main inventory for this character or player if this is a character or player.   \n\n**Return value**  \nor ````\nnil````\nif this entity is not a character or player.",
        "returns": "LuaInventory"
      },
      "get_quick_bar_slot": {
        "name": "get_quick_bar_slot",
        "type": "function",
        "doc": "Gets the quick bar filter for the given slot or ````\nnil````    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc.",
        "returns": "LuaItemPrototype",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc."
          }
        }
      },
      "gui": {
        "name": "gui",
        "type": "LuaGui",
        "mode": "[R]"
      },
      "has_items_inside": {
        "name": "has_items_inside",
        "type": "function",
        "doc": "Does this entity have any item inside it?",
        "returns": "boolean"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "in_combat": {
        "name": "in_combat",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this character entity is in comba"
      },
      "index": {
        "name": "index",
        "type": "uint",
        "mode": "[R]",
        "doc": "This player's index in [LuaGameScript::players](http://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.players)."
      },
      "insert": {
        "name": "insert",
        "type": "function",
        "doc": "Insert items into this entity. This works the same way as inserters or shift-clicking: the \"bes  \ninventory is chosen automatically.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert.  \n\n**Return value**  \nNumber of items actually inserted.",
        "returns": "uint",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert."
          }
        }
      },
      "is_alert_enabled": {
        "name": "is_alert_enabled",
        "type": "function",
        "doc": "If the given alert type is currently enable    \n\n**Parameters**  \nalert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)",
        "returns": "boolean",
        "args": {
          "alert_type": {
            "name": "alert_type",
            "type": "defines.alert_type",
            "doc": "alert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
          }
        }
      },
      "is_alert_muted": {
        "name": "is_alert_muted",
        "type": "function",
        "doc": "If the given alert type is currently mute    \n\n**Parameters**  \nalert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)",
        "returns": "boolean",
        "args": {
          "alert_type": {
            "name": "alert_type",
            "type": "defines.alert_type",
            "doc": "alert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
          }
        }
      },
      "is_player": {
        "name": "is_player",
        "type": "function",
        "doc": "When ````\ntrue````\ncontrol adapter is a LuaPlayer object, ````\nfalse````\nfor entities including characters with players",
        "returns": "boolean"
      },
      "is_shortcut_available": {
        "name": "is_shortcut_available",
        "type": "function",
        "doc": "Is a custom shortcut currently availabl    \n\n**Parameters**  \nprototype_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the custom shortcut.",
        "returns": "boolean",
        "args": {
          "prototype_name": {
            "name": "prototype_name",
            "type": "string",
            "doc": "prototype_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the custom shortcut."
          }
        }
      },
      "is_shortcut_toggled": {
        "name": "is_shortcut_toggled",
        "type": "function",
        "doc": "Is a custom shortcut currently toggle    \n\n**Parameters**  \nprototype_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the custom shortcut.",
        "returns": "boolean",
        "args": {
          "prototype_name": {
            "name": "prototype_name",
            "type": "string",
            "doc": "prototype_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the custom shortcut."
          }
        }
      },
      "item_pickup_distance": {
        "name": "item_pickup_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The item pickup distance of this character or max double when not a character or player connected to a characte"
      },
      "jump_to_cutscene_waypoint": {
        "name": "jump_to_cutscene_waypoint",
        "doc": "Jump to the specified cutscene waypoint. Only works when the player is viewing a cutscen    \n\n**Parameters**  \nwaypoint_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "function",
        "args": {
          "waypoint_index": {
            "name": "waypoint_index",
            "type": "uint",
            "doc": "waypoint_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "last_online": {
        "name": "last_online",
        "type": "uint",
        "mode": "[R]",
        "doc": "At what tick this player was last onlin"
      },
      "loot_pickup_distance": {
        "name": "loot_pickup_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The loot pickup distance of this character or max double when not a character or player connected to a characte"
      },
      "map_view_settings": {
        "name": "map_view_settings",
        "type": "MapViewSettings",
        "mode": "[W]",
        "doc": "The player's map view settings. To write to this, use a table containing the fields that should be change"
      },
      "mine_entity": {
        "name": "mine_entity",
        "type": "function",
        "doc": "Mines the given entity as if this player (or character) mined i    \n\n**Parameters**  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity to mine  \nforce :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Forces mining the entity even if the items can't fit in the player.  \n\n**Return value**  \nIf the mining succeeded.",
        "returns": "boolean",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "entity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The entity to mine"
          },
          "force": {
            "name": "force",
            "type": "boolean",
            "doc": "force :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Forces mining the entity even if the items can't fit in the player."
          }
        }
      },
      "mine_tile": {
        "name": "mine_tile",
        "type": "function",
        "doc": "Mines the given tile as if this player (or character) mined i    \n\n**Parameters**  \ntile :: [LuaTile](http://lua-api.factorio.com/latest/LuaTile.html): The tile to mine.  \n\n**Return value**  \nIf the mining succeeded.",
        "returns": "boolean",
        "args": {
          "tile": {
            "name": "tile",
            "type": "LuaTile",
            "doc": "tile :: [LuaTile](http://lua-api.factorio.com/latest/LuaTile.html): The tile to mine."
          }
        }
      },
      "minimap_enabled": {
        "name": "minimap_enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the minimap is visible."
      },
      "mining_state": {
        "name": "mining_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current mining stat  \nIt is a table with two fields:   \nmining :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Whether the player is mining at all  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): What tiles the player is mining; only used when the player is mining tiles (holding a tile in the cursor).  \n\n**Note: ** When the player isn't mining tiles the player will mine what ever entity is currently selected. See [LuaControl::selected](http://lua-api.factorio.com/latest/LuaControl.html#LuaControl.selected) and [LuaControl::update_selected_entity](http://lua-api.factorio.com/latest/LuaControl.html#LuaControl.update_selected_entity)."
      },
      "mod_settings": {
        "name": "mod_settings",
        "mode": "[R]",
        "doc": "**Note: ** This can become invalid if during operation this player becomes invalid."
      },
      "mute_alert": {
        "name": "mute_alert",
        "type": "function",
        "doc": "Mutes alerts for the given alert categor    \n\n**Parameters**  \nalert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)  \n\n**Return value**  \nIf the alert type was muted (false if it was already muted).",
        "returns": "boolean",
        "args": {
          "alert_type": {
            "name": "alert_type",
            "type": "defines.alert_type",
            "doc": "alert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
          }
        }
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[RW]",
        "doc": "The player's username."
      },
      "online_time": {
        "name": "online_time",
        "type": "uint",
        "mode": "[R]",
        "doc": "How many ticks did this player spend playing this save (all sessions combine"
      },
      "open_map": {
        "name": "open_map",
        "doc": "Queues a request to open the map at the specified position. If the map is already opened, the request will simply set the position (and scale  \nRender mode change requests are processed before rendering of the next fram    \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \nscale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)"
          },
          "scale": {
            "name": "scale",
            "type": "double",
            "doc": "scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)"
          }
        }
      },
      "open_technology_gui": {
        "name": "open_technology_gui",
        "doc": "Open the technology GUI and select a given technolog    \n\n**Parameters**  \ntechnology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional): The technology to select after opening the GUI.",
        "type": "function",
        "args": {
          "technology": {
            "name": "technology",
            "type": "TechnologySpecification",
            "doc": "technology :: [TechnologySpecification](http://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional): The technology to select after opening the GUI."
          }
        }
      },
      "opened": {
        "name": "opened",
        "type": "LuaEntity or LuaItemStack or LuaEquipment or LuaEquipmentGrid or LuaPlayer or LuaGuiElement or defines.gui_type",
        "mode": "[RW]",
        "doc": "The GUI target the player currently has open; ````\nnil````\nif non    \n\n**Note: ** Write supports any of the types. Read will return the entity, equipment, element or nil."
      },
      "opened_gui_type": {
        "name": "opened_gui_type",
        "type": "defines.gui_type",
        "mode": "[R]",
        "doc": "Returns the [defines.gui_type](http://lua-api.factorio.com/latest/defines.html#defines.gui_type) or ````\nnil````\n."
      },
      "opened_self": {
        "name": "opened_self",
        "type": "boolean",
        "mode": "[R]",
        "doc": "````\ntrue````\nif the player opened itself. I.e. if they opened the character or god-controller GUI."
      },
      "permission_group": {
        "name": "permission_group",
        "type": "LuaPermissionGroup",
        "mode": "[RW]",
        "doc": "The permission group this player is part of or ````\nnil````\nif not part of any grou"
      },
      "picking_state": {
        "name": "picking_state",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Current item-picking stat"
      },
      "pipette_entity": {
        "name": "pipette_entity",
        "type": "function",
        "doc": "Invokes the \"smart pipette\" action on the player as if the user pressed i    \n\n**Parameters**  \nentity :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html)  \n\n**Return value**  \nIf the smart pipette found something to place",
        "returns": "boolean",
        "args": {
          "entity": {
            "name": "entity",
            "type": "string or LuaEntity or LuaEntityPrototype",
            "doc": "entity :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html)"
          }
        }
      },
      "play_sound": {
        "name": "play_sound",
        "type": "function",
        "doc": "Plays a sound for this playe    \n\n**Parameters**  \nTable with the following fields:   \npath :: [SoundPath](http://lua-api.factorio.com/latest/Concepts.html#SoundPath): The sound to play  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Where the sound should be played. If not given it's played 'everywhere'.  \nvolume_modifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Must be between 0 and 1 inclusive.",
        "returns": "boolean",
        "args": {
          "path": {
            "name": "path",
            "type": "SoundPath",
            "doc": "Table with the following fields:   \npath :: [SoundPath](http://lua-api.factorio.com/latest/Concepts.html#SoundPath): The sound to play  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Where the sound should be played. If not given it's played 'everywhere'.  \nvolume_modifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Must be between 0 and 1 inclusive."
          }
        }
      },
      "position": {
        "name": "position",
        "type": "Position",
        "mode": "[R]",
        "doc": "Current position of the entity."
      },
      "print": {
        "name": "print",
        "doc": "Print text to the chat console.   \n\n**Parameters**  \nmessage :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)",
        "type": "function",
        "args": {
          "color": {
            "name": "color",
            "type": "Color",
            "doc": "color :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)"
          },
          "message": {
            "name": "message",
            "type": "LocalisedString",
            "doc": "message :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
          }
        }
      },
      "print_entity_statistics": {
        "name": "print_entity_statistics",
        "doc": "Print entity statistics to the player's consol    \n\n**Parameters**  \nentities :: array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Entity prototypes to get statistics for. If not specified or empt  \ndisplay statistics for all entities.",
        "type": "function",
        "args": {
          "entities": {
            "name": "entities",
            "type": "array of string",
            "doc": "entities :: array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Entity prototypes to get statistics for. If not specified or empt  \ndisplay statistics for all entities."
          }
        }
      },
      "print_lua_object_statistics": {
        "name": "print_lua_object_statistics",
        "doc": "Print LuaObject counts per mod.",
        "type": "function"
      },
      "print_robot_jobs": {
        "name": "print_robot_jobs",
        "doc": "Print construction robot job counts to the players console.",
        "type": "function"
      },
      "reach_distance": {
        "name": "reach_distance",
        "type": "uint",
        "mode": "[R]",
        "doc": "The reach distance of this character or max uint when not a character or player connected to a characte"
      },
      "remove_alert": {
        "name": "remove_alert",
        "doc": "Removes all alerts matching the given filters or if an empty filters table is given all alerts are remove    \n\n**Parameters**  \nTable with the following fields:   \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional)  \nprototype :: [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html) (optional)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \ntype :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type) (optional)  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \nicon :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID) (optional)  \nmessage :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional)",
        "type": "function",
        "args": {
          "entity": {
            "name": "entity",
            "type": "LuaEntity",
            "doc": "Table with the following fields:   \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional)  \nprototype :: [LuaEntityPrototype](http://lua-api.factorio.com/latest/LuaEntityPrototype.html) (optional)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \ntype :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type) (optional)  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \nicon :: [SignalID](http://lua-api.factorio.com/latest/Concepts.html#SignalID) (optional)  \nmessage :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional)"
          }
        }
      },
      "remove_item": {
        "name": "remove_item",
        "type": "function",
        "doc": "Remove items from this entity.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove.  \n\n**Return value**  \nNumber of items actually removed.",
        "returns": "uint",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove."
          }
        }
      },
      "render_mode": {
        "name": "render_mode",
        "type": "defines.render_mode",
        "mode": "[R]",
        "doc": "The render mode of the player, like map or zoom to worl  \nThe render mode can be set using [LuaPlayer::open_map](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.open_map), [LuaPlayer::zoom_to_world](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.zoom_to_world) and [LuaPlayer::close_map](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.close_map"
      },
      "repair_state": {
        "name": "repair_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current repair stat  \nIt is a table with two fields:   \nrepairing :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): The current state  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position being repaired"
      },
      "resource_reach_distance": {
        "name": "resource_reach_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The resource reach distance of this character or max double when not a character or player connected to a characte"
      },
      "riding_state": {
        "name": "riding_state",
        "type": "RidingState",
        "mode": "[RW]",
        "doc": "Current riding state of this car or the vehicle this player is riding i"
      },
      "selected": {
        "name": "selected",
        "type": "LuaEntity",
        "mode": "[RW]",
        "doc": "The currently selected entity; ````\nnil````\nif none. Assigning an entity will select it if selectable otherwise clears selection."
      },
      "set_active_quick_bar_page": {
        "name": "set_active_quick_bar_page",
        "doc": "Sets which quick bar page is being used for the given screen pag    \n\n**Parameters**  \nscreen_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change.  \npage_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The new quick bar page.",
        "type": "function",
        "args": {
          "page_index": {
            "name": "page_index",
            "type": "uint",
            "doc": "page_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The new quick bar page."
          },
          "screen_index": {
            "name": "screen_index",
            "type": "uint",
            "doc": "screen_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change."
          }
        }
      },
      "set_controller": {
        "name": "set_controller",
        "doc": "Set the controller type of the player.   \n\n**Parameters**  \nTable with the following fields:   \ntype :: [defines.controllers](http://lua-api.factorio.com/latest/defines.html#defines.controllers): Which controller to use  \ncharacter :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): Entity to control. Mandatory when ````\ntype````  \n[defines.controllers.character](http://lua-api.factorio.com/latest/defines.html#defines.controllers.character), ignored otherwise.  \nwaypoints (optional): List of waypoints for the cutscene controller. This parameter is mandatory wh  \n````\ntype````\nis [defines.controllers.cutscene](http://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene). Each waypoint is a tabl    \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Position to pan the camera to.  \ntarget :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [LuaUnitGroup](http://lua-api.factorio.com/latest/LuaUnitGroup.html) (optional): Entity or unit group to pan the camera to.  \ntransition_time :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): How many ticks it will take to reach this waypoint from the previous one.  \ntime_to_wait :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Time in ticks to wait before moving to the next waypoint.  \nzoom :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Zoom level to be set when the waypoint is reached. When not specified, t  \nprevious waypoint's zoom is used.  \nchart_mode_cutoff :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): If specified, the game will switch to chart-mode (map zoomed ou  \nrendering when the zoom level is less than this value.  \nfinal_transition_time :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): Mandatory when ````\ntype````\nis [defines.controllers.cutscene](http://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene  \nIt is the time in ticks it will take for the camera to pan from the final waypoint back to the starti  \nposition.  \n\n**Note: ** Setting a player to [defines.controllers.editor](http://lua-api.factorio.com/latest/defines.html#defines.controllers.editor) auto promotes the player to admin and enables cheat mode.  \n\n**Note: ** Setting a player to [defines.controllers.editor](http://lua-api.factorio.com/latest/defines.html#defines.controllers.editor) also requires the calling player be an admin.",
        "type": "function",
        "args": {
          "type": {
            "name": "type",
            "type": "defines.controllers",
            "doc": "Table with the following fields:   \ntype :: [defines.controllers](http://lua-api.factorio.com/latest/defines.html#defines.controllers): Which controller to use  \ncharacter :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): Entity to control. Mandatory when ````\ntype````  \n[defines.controllers.character](http://lua-api.factorio.com/latest/defines.html#defines.controllers.character), ignored otherwise.  \nwaypoints (optional): List of waypoints for the cutscene controller. This parameter is mandatory wh  \n````\ntype````\nis [defines.controllers.cutscene](http://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene). Each waypoint is a tabl    \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Position to pan the camera to.  \ntarget :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) or [LuaUnitGroup](http://lua-api.factorio.com/latest/LuaUnitGroup.html) (optional): Entity or unit group to pan the camera to.  \ntransition_time :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): How many ticks it will take to reach this waypoint from the previous one.  \ntime_to_wait :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Time in ticks to wait before moving to the next waypoint.  \nzoom :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Zoom level to be set when the waypoint is reached. When not specified, t  \nprevious waypoint's zoom is used.  \nchart_mode_cutoff :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): If specified, the game will switch to chart-mode (map zoomed ou  \nrendering when the zoom level is less than this value.  \nfinal_transition_time :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): Mandatory when ````\ntype````\nis [defines.controllers.cutscene](http://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene  \nIt is the time in ticks it will take for the camera to pan from the final waypoint back to the starti  \nposition."
          }
        }
      },
      "set_ending_screen_data": {
        "name": "set_ending_screen_data",
        "doc": "Setup the screen to be shown when the game is finished.   \n\n**Parameters**  \nmessage :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString): Message to be shown.  \nfile :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Path to image to be shown.",
        "type": "function",
        "args": {
          "file": {
            "name": "file",
            "type": "string",
            "doc": "file :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Path to image to be shown."
          },
          "message": {
            "name": "message",
            "type": "LocalisedString",
            "doc": "message :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString): Message to be shown."
          }
        }
      },
      "set_goal_description": {
        "name": "set_goal_description",
        "doc": "Set the text in the goal window (top left).   \n\n**Parameters**  \ntext :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): The text to display. \\n can be used to delimit lines. Passing emp  \nstring or omitting this parameter entirely will make the goal window disappear.  \nonly_update :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When ````\ntrue````\n, won't play the \"goal updated\" sound.",
        "type": "function",
        "args": {
          "only_update": {
            "name": "only_update",
            "type": "boolean",
            "doc": "only_update :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When ````\ntrue````\n, won't play the \"goal updated\" sound."
          },
          "text": {
            "name": "text",
            "type": "LocalisedString",
            "doc": "text :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional): The text to display. \\n can be used to delimit lines. Passing emp  \nstring or omitting this parameter entirely will make the goal window disappear."
          }
        }
      },
      "set_gui_arrow": {
        "name": "set_gui_arrow",
        "doc": "Create an arrow which points at this entity. This is used in the tutorial. For examples, see ````\ncontrol.lua````  \nin the campaign missions.   \n\n**Parameters**  \nTable with the following fields:   \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Where to point to. This field determines what other fields are mandator  \nMay be ````\n\"nowhere\"````\n, ````\n\"goal\"````\n, ````\n\"entity_info\"````\n, ````\n\"active_window\"````\n, ````\n\"entity\"````\n, ````\n\"position\"````  \n````\n\"crafting_queue\"````\n, or ````\n\"item_stack\"````\n.  \nAdditional ````\ntype````\n-specific parameters  \nentity  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nposition  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \ncrafting_queue  \ncrafting_queueindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nitem_stack  \ninventory_index :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \nitem_stack_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nsource :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): May be either ````\n\"player\"````\nor ````\n\"target\"````\n.",
        "type": "function",
        "args": {
          "type": {
            "name": "type",
            "type": "string",
            "doc": "Table with the following fields:   \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Where to point to. This field determines what other fields are mandator  \nMay be ````\n\"nowhere\"````\n, ````\n\"goal\"````\n, ````\n\"entity_info\"````\n, ````\n\"active_window\"````\n, ````\n\"entity\"````\n, ````\n\"position\"````  \n````\n\"crafting_queue\"````\n, or ````\n\"item_stack\"````\n.  \nAdditional ````\ntype````\n-specific parameters  \nentity  \nentity :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nposition  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \ncrafting_queue  \ncrafting_queueindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nitem_stack  \ninventory_index :: [defines.inventory](http://lua-api.factorio.com/latest/defines.html#defines.inventory)  \nitem_stack_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nsource :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): May be either ````\n\"player\"````\nor ````\n\"target\"````\n."
          }
        }
      },
      "set_quick_bar_slot": {
        "name": "set_quick_bar_slot",
        "doc": "Sets the quick bar filter for the given slo    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc.  \nfilter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaItemPrototype](http://lua-api.factorio.com/latest/LuaItemPrototype.html) or [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html): The filter or ````\nnil````\n.",
        "type": "function",
        "args": {
          "filter": {
            "name": "filter",
            "type": "string or LuaItemPrototype or LuaItemStack",
            "doc": "filter :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaItemPrototype](http://lua-api.factorio.com/latest/LuaItemPrototype.html) or [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html): The filter or ````\nnil````\n."
          },
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc."
          }
        }
      },
      "set_shortcut_available": {
        "name": "set_shortcut_available",
        "doc": "Make a custom shortcut available or unavailabl    \n\n**Parameters**  \nprototype_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the custom shortcut.  \navailable :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)",
        "type": "function",
        "args": {
          "available": {
            "name": "available",
            "type": "boolean",
            "doc": "available :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          },
          "prototype_name": {
            "name": "prototype_name",
            "type": "string",
            "doc": "prototype_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the custom shortcut."
          }
        }
      },
      "set_shortcut_toggled": {
        "name": "set_shortcut_toggled",
        "doc": "Toggle or untoggle a custom shortc    \n\n**Parameters**  \nprototype_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the custom shortcut.  \ntoggled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)",
        "type": "function",
        "args": {
          "prototype_name": {
            "name": "prototype_name",
            "type": "string",
            "doc": "prototype_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the custom shortcut."
          },
          "toggled": {
            "name": "toggled",
            "type": "boolean",
            "doc": "toggled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          }
        }
      },
      "shooting_state": {
        "name": "shooting_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current shooting stat  \nIt is a table with two fields:   \nstate :: [defines.shooting](http://lua-api.factorio.com/latest/defines.html#defines.shooting): The current state  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position being shot at"
      },
      "spectator": {
        "name": "spectator",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If ````\ntrue````\n, zoom-to-world noise effect will be disabled and environmental sounds will be bas  \non zoom-to-world view instead of position of player's character."
      },
      "surface": {
        "name": "surface",
        "type": "LuaSurface",
        "mode": "[R]",
        "doc": "The surface this entity is currently on."
      },
      "tag": {
        "name": "tag",
        "type": "string",
        "mode": "[RW]",
        "doc": "The tag that is shown after the player in chat and on the map."
      },
      "teleport": {
        "name": "teleport",
        "type": "function",
        "doc": "Teleport the entity to a given position, possibly on another surface    \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to teleport to.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Surface to teleport to. If not given, will telepo  \nto the entity's current surface.  \n\n**Return value**  \n````\ntrue````\nwhen the entity was successfully teleported.  \n\n**Note: ** Some entities may not be teleported. For instance, rail signa  \nwon't allow teleportation and this method will always return ````\nfalse````\nwhen used on any such entity.  \n\n**Note: ** You can also pass 1 or 2 numbers as the parameters and they will be used as relative teleport coordinat  \n````\n'teleport(0, 1)'````\nto move the entity 1 tile positive   \n````\n'teleport(4)'````\nto move the entity 4 tiles to the positive x.",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to teleport to."
          },
          "surface": {
            "name": "surface",
            "type": "SurfaceSpecification",
            "doc": "surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional): Surface to teleport to. If not given, will telepo  \nto the entity's current surface."
          }
        }
      },
      "ticks_to_respawn": {
        "name": "ticks_to_respawn",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The number of ticks until this player will respawn or ````\nnil````\nif not waiting to respaw    \n\n**Note: ** Set to ````\nnil````\nto immediately respawn the player.  \n\n**Note: ** Set to any positive value to trigger the respawn state for this player."
      },
      "unlock_achievement": {
        "name": "unlock_achievement",
        "doc": "Unlock the achievements of the given playe  \nThis has any effect only when this is the local player, the achievement isn't unlocked so far and the achievement is of the type \"achievement    \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): name of the achievement to unlock",
        "type": "function",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): name of the achievement to unlock"
          }
        }
      },
      "unmute_alert": {
        "name": "unmute_alert",
        "type": "function",
        "doc": "Unmutes alerts for the given alert categor    \n\n**Parameters**  \nalert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)  \n\n**Return value**  \nIf the alert type was unmuted (false if it was wasn't muted).",
        "returns": "boolean",
        "args": {
          "alert_type": {
            "name": "alert_type",
            "type": "defines.alert_type",
            "doc": "alert_type :: [defines.alert_type](http://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
          }
        }
      },
      "update_selected_entity": {
        "name": "update_selected_entity",
        "doc": "Select an entity, as if by hovering the mouse above it.   \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position of the entity to select",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Position of the entity to select"
          }
        }
      },
      "use_from_cursor": {
        "name": "use_from_cursor",
        "doc": "Uses the current item in the cursor if it's a capsule or does nothing if no    \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the item would be used.",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the item would be used."
          }
        }
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "vehicle": {
        "name": "vehicle",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The vehicle the player is currently sitting in; ````\nnil````\nif none."
      },
      "walking_state": {
        "name": "walking_state",
        "type": "table",
        "mode": "[RW]",
        "doc": "Current walking stat  \nIt is a table with two fields:   \nwalking :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If ````\nfalse````\n, the player is currently not walking; otherwise it's going somewhere  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction): Direction where the player is walking  \n\n**Example**  \nMake the player go north. Note that a one-shot action like this will only make the player walk for one tic    \n````\ngame.player.walking_state = {walking = true, direction = defines.direction.north}````"
      },
      "zoom": {
        "name": "zoom",
        "type": "double",
        "mode": "[W]",
        "doc": "The player's zoom-level."
      },
      "zoom_to_world": {
        "name": "zoom_to_world",
        "doc": "Queues a request to zoom to world at the specified position. If the player is already zooming to world, the request will simply set the position (and scale  \nRender mode change requests are processed before rendering of the next fram    \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \nscale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)"
          },
          "scale": {
            "name": "scale",
            "type": "double",
            "doc": "scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)"
          }
        }
      }
    },
    "doc": "A player in the game. Pay attention that a player may or may not have a character, which is the\n LuaEntity of the little guy running around the world doing things."
  },
  "LuaProfiler": {
    "name": "LuaProfiler",
    "type": "LuaProfiler",
    "inherits": [],
    "properties": {
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "reset": {
        "name": "reset",
        "doc": "Resets the clock, also restarting it.",
        "type": "function"
      },
      "restart": {
        "name": "restart",
        "doc": "Start the clock again, without resetting it.",
        "type": "function"
      },
      "stop": {
        "name": "stop",
        "doc": "Stops the clock.",
        "type": "function"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "An object used to measure script performance."
  },
  "LuaProgrammableSpeakerControlBehavior": {
    "name": "LuaProgrammableSpeakerControlBehavior",
    "type": "LuaProgrammableSpeakerControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "circuit_condition": {
        "name": "circuit_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]"
      },
      "circuit_parameters": {
        "name": "circuit_parameters",
        "type": "ProgrammableSpeakerCircuitParameters",
        "mode": "[RW]"
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for programmable speakers."
  },
  "LuaRCON": {
    "name": "LuaRCON",
    "type": "LuaRCON",
    "inherits": [],
    "properties": {
      "print": {
        "name": "print",
        "doc": "Print text to the calling RCON interface if an    \n\n**Parameters**  \nmessage :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)",
        "type": "function",
        "args": {
          "message": {
            "name": "message",
            "type": "LocalisedString",
            "doc": "message :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
          }
        }
      }
    },
    "doc": "An interface to send messages to the calling RCON interface."
  },
  "LuaRailChainSignalControlBehavior": {
    "name": "LuaRailChainSignalControlBehavior",
    "type": "LuaRailChainSignalControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "blue_signal": {
        "name": "blue_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "green_signal": {
        "name": "green_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "orange_signal": {
        "name": "orange_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "red_signal": {
        "name": "red_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for rail chain signals."
  },
  "LuaRailPath": {
    "name": "LuaRailPath",
    "type": "LuaRailPath",
    "inherits": [],
    "properties": {
      "current": {
        "name": "current",
        "type": "uint",
        "mode": "[R]",
        "doc": "The current rail inde"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "rails": {
        "name": "rails",
        "type": "custom dictionary uint → LuaEntity",
        "mode": "[R]",
        "doc": "The rails this path travel"
      },
      "size": {
        "name": "size",
        "type": "uint",
        "mode": "[R]",
        "doc": "The total number of rails in this pat"
      },
      "total_distance": {
        "name": "total_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The total path distanc"
      },
      "travelled_distance": {
        "name": "travelled_distance",
        "type": "double",
        "mode": "[R]",
        "doc": "The total distance travelle"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "A rail path."
  },
  "LuaRailSignalControlBehavior": {
    "name": "LuaRailSignalControlBehavior",
    "type": "LuaRailSignalControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "circuit_condition": {
        "name": "circuit_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The circuit condition when controlling the signal through the circuit networ"
      },
      "close_signal": {
        "name": "close_signal",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If this will close the rail signal based off the circuit conditio"
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "green_signal": {
        "name": "green_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "orange_signal": {
        "name": "orange_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "read_signal": {
        "name": "read_signal",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If this will read the rail signal stat"
      },
      "red_signal": {
        "name": "red_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for rail signals."
  },
  "LuaRandomGenerator": {
    "name": "LuaRandomGenerator",
    "type": "LuaRandomGenerator",
    "inherits": [],
    "properties": {
      "()": {
        "name": "()",
        "type": "function",
        "doc": "Generates a random numbe  \nIf no parameters are given a number in the [0, 1) range is returne  \nIf a single parameter is given a floored number in the [0, N] range is returne  \nIf 2 parameters are given a floored number in the [N1, N2] range is returne    \n\n**Parameters**  \nlower :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Inclusive lower bound on the result  \nupper :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Inclusive upper bound on the result",
        "returns": "double",
        "args": {
          "lower": {
            "name": "lower",
            "type": "double",
            "doc": "lower :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Inclusive lower bound on the result"
          },
          "upper": {
            "name": "upper",
            "type": "double",
            "doc": "upper :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Inclusive upper bound on the result"
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "re_seed": {
        "name": "re_seed",
        "doc": "Re-seeds the random generator with the given valu    \n\n**Parameters**  \nseed :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n\n**Note: ** Seeds that are close together will produce similar results. Seeds from 0 to 341 will produce the same results.",
        "type": "function",
        "args": {
          "seed": {
            "name": "seed",
            "type": "uint",
            "doc": "seed :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "A deterministic random generator independent from the core games random generator that can be seeded and re-seeded at will.\n This random generator can be saved and loaded and will maintain its state.\n Note this is entirely different from calling  math.random() and you should be sure you actually want to use this over calling math.random().\n If you aren't sure if you need to use this over calling math.random() then you probably don't need to use this."
  },
  "LuaRecipe": {
    "name": "LuaRecipe",
    "type": "LuaRecipe",
    "inherits": [],
    "properties": {
      "category": {
        "name": "category",
        "type": "string",
        "mode": "[R]",
        "doc": "Category of the recip"
      },
      "enabled": {
        "name": "enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Can the recipe be use"
      },
      "energy": {
        "name": "energy",
        "type": "double",
        "mode": "[R]",
        "doc": "Energy required to execute this recipe. This directly affects the crafting time: Recipe's ener  \nis exactly its crafting time in seconds, when crafted in an assembling machine with crafting spe  \nexactly equal to one."
      },
      "force": {
        "name": "force",
        "type": "LuaForce",
        "mode": "[R]",
        "doc": "The force that owns this recip"
      },
      "group": {
        "name": "group",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "Group of this recip"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "hidden": {
        "name": "hidden",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is the recipe hidden? Hidden recipe don't show up in the crafting men"
      },
      "hidden_from_flow_stats": {
        "name": "hidden_from_flow_stats",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Is the recipe hidden from flow statistic"
      },
      "ingredients": {
        "name": "ingredients",
        "type": "array of Ingredient",
        "mode": "[R]",
        "doc": "Ingredients for this recip    \n\n**Example**  \nWhat the \"steel-chest\" recipe would retu    \n````\n{ {type=\"item\", name=\"steel-plate\", amount=8} }````  \n\n**Example**  \nWhat the \"advanced-oil-processing\" recipe would retu    \n````\n{ {type=\"fluid\", name=\"crude-oil\", amount=10}, {type=\"fluid\", name=\"water\", amount=5} }````"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]",
        "doc": "Localised name of the recip"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of the recipe. This can be different than the name of the result items as there cou  \nbe more recipes to make the same ite"
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string. This is used to sort the crafting men"
      },
      "products": {
        "name": "products",
        "type": "array of Product",
        "mode": "[R]",
        "doc": "The results of this recipe."
      },
      "prototype": {
        "name": "prototype",
        "type": "LuaRecipePrototype",
        "mode": "[R]",
        "doc": "The prototype for this recip"
      },
      "reload": {
        "name": "reload",
        "doc": "Reload the recipe from the prototype.",
        "type": "function"
      },
      "subgroup": {
        "name": "subgroup",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "Subgroup of this recip"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "A crafting recipe. Recipes belong to forces (see LuaForce) because some recipes\n are unlocked by research, and researches are per-force."
  },
  "LuaRecipePrototype": {
    "name": "LuaRecipePrototype",
    "type": "LuaRecipePrototype",
    "inherits": [],
    "properties": {
      "allow_as_intermediate": {
        "name": "allow_as_intermediate",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this recipe is enabled for the purpose of intermediate hand-craftin"
      },
      "allow_decomposition": {
        "name": "allow_decomposition",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this recipe is allowed to be broken down for \"total-raw\" calculation"
      },
      "allow_intermediates": {
        "name": "allow_intermediates",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this recipe is allowed to use intermediate recipes when hand-craftin"
      },
      "always_show_made_in": {
        "name": "always_show_made_in",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Should this recipe always show \"made-in\" in the toolti"
      },
      "always_show_products": {
        "name": "always_show_products",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the products are always shown in the recipe toolti"
      },
      "category": {
        "name": "category",
        "type": "string",
        "mode": "[R]",
        "doc": "Category of the recip"
      },
      "emissions_multiplier": {
        "name": "emissions_multiplier",
        "type": "double",
        "mode": "[R]",
        "doc": "The emissions multiplier for this recip"
      },
      "enabled": {
        "name": "enabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this recipe prototype is enabled by default (enabled at the beginning of a game"
      },
      "energy": {
        "name": "energy",
        "type": "double",
        "mode": "[R]",
        "doc": "Energy required to execute this recipe. This directly affects the crafting time: Recipe's ener  \nis exactly its crafting time in seconds, when crafted in an assembling machine with crafting spe  \nexactly equal to one."
      },
      "group": {
        "name": "group",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "Group of this recip"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "hidden": {
        "name": "hidden",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is the recipe hidden? Hidden recipe don't show up in the crafting men"
      },
      "hidden_from_flow_stats": {
        "name": "hidden_from_flow_stats",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is the recipe hidden from flow statistic"
      },
      "ingredients": {
        "name": "ingredients",
        "type": "array of Ingredient",
        "mode": "[R]",
        "doc": "Ingredients for this recip"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]",
        "doc": "Localised name of the recip"
      },
      "main_product": {
        "name": "main_product",
        "type": "Product",
        "mode": "[R]",
        "doc": "The main product of this recipe, ````\nnil````\nif no main product is defined."
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of the recipe. This can be different than the name of the result items as there cou  \nbe more recipes to make the same ite"
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string. This is used to sort the crafting men"
      },
      "overload_multiplier": {
        "name": "overload_multiplier",
        "type": "uint",
        "mode": "[R]",
        "doc": "Used to determine how many extra items are put into an assembling machine before it's considered \"full enough"
      },
      "products": {
        "name": "products",
        "type": "array of Product",
        "mode": "[R]",
        "doc": "The results of this recipe."
      },
      "request_paste_multiplier": {
        "name": "request_paste_multiplier",
        "type": "uint",
        "mode": "[R]",
        "doc": "The multiplier used when this recipe is copied from an assembling machine to a requester ches  \nFor each item in the recipe the item count * this value is set in the requester ches"
      },
      "show_amount_in_title": {
        "name": "show_amount_in_title",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the amount is shown in the recipe tooltip title when the recipe produces more than 1 produc"
      },
      "subgroup": {
        "name": "subgroup",
        "type": "LuaGroup",
        "mode": "[R]",
        "doc": "Subgroup of this recip"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "A crafting recipe prototype."
  },
  "LuaRemote": {
    "name": "LuaRemote",
    "type": "LuaRemote",
    "inherits": [],
    "properties": {
      "add_interface": {
        "name": "add_interface",
        "doc": "Add a remote interface    \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the interface.  \nfunctions :: dictionary [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) → function: List of functions that are members of the new interface.  \n\n**Note: ** It is an error if the given interface ````\nname````\nis already registered.",
        "type": "function",
        "args": {
          "functions": {
            "name": "functions",
            "type": "dictionary string → function",
            "doc": "functions :: dictionary [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) → function: List of functions that are members of the new interface."
          },
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the interface."
          }
        }
      },
      "call": {
        "name": "call",
        "doc": "Call a function of an interface.   \n\n**Parameters**  \ninterface :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Interface to look up ````\nfunction````\nin.  \nfunction :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Function name that belongs to ````\ninterface````\n.  \n...: Arguments to pass to the called function.  \n\n**Return value**  \nAnything, including most LuaObjects.",
        "type": "function",
        "returns": "Anything",
        "args": {
          "...": {
            "name": "...",
            "doc": "...: Arguments to pass to the called function.",
            "type": "..."
          },
          "function": {
            "name": "function",
            "type": "string",
            "doc": "function :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Function name that belongs to ````\ninterface````\n."
          },
          "interface": {
            "name": "interface",
            "type": "string",
            "doc": "interface :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Interface to look up ````\nfunction````\nin."
          }
        }
      },
      "interfaces": {
        "name": "interfaces",
        "type": "dictionary string → dictionary string → boolean",
        "mode": "[R]",
        "doc": "List of all registered interfaces. For each interface name, ````\nremote.interfaces[name]````\nis a dictiona  \nmapping the interface's registered functions to the value ````\ntrue````\n.   \n\n**Example**  \nAssuming the \"human interactor\" interface is registered as abo    \n````\ngame.player.print(tostring(remote.interfaces[\"human interactor\"][\"hello\"]))        -- prints true  \ngame.player.print(tostring(remote.interfaces[\"human interactor\"][\"nonexistent\"]))  -- prints nil````"
      },
      "remove_interface": {
        "name": "remove_interface",
        "type": "function",
        "doc": "Removes an interface with the given nam    \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the interface.  \n\n**Return value**  \nIf the interface was removed. ````\nFalse````\nif the interface didn't exist.",
        "returns": "boolean",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the interface."
          }
        }
      }
    },
    "doc": "Registry of interfaces between scripts. An interface is simply a dictionary mapping names to functions. A\n script or mod can then register an interface with LuaRemote, after that any script can call the\n registered functions, provided it knows the interface name and the desired function name. An instance of\n LuaRemote is available through the global object named remote."
  },
  "LuaRendering": {
    "name": "LuaRendering",
    "type": "LuaRendering",
    "inherits": [],
    "properties": {
      "clear": {
        "name": "clear",
        "doc": "Destroys all render object    \n\n**Parameters**  \nmod_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If provided, only the render objects created by this mod are destroyed.",
        "type": "function",
        "args": {
          "mod_name": {
            "name": "mod_name",
            "type": "string",
            "doc": "mod_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If provided, only the render objects created by this mod are destroyed."
          }
        }
      },
      "destroy": {
        "name": "destroy",
        "doc": "Destroy the object with the given i    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "draw_animation": {
        "name": "draw_animation",
        "type": "function",
        "doc": "Create an animatio    \n\n**Parameters**  \nTable with the following fields:   \nanimation :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of an \"animation\" prototype.  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The orientation of the animation. Default is 0.  \nx_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Horizontal scale of the animation. Default is 1.  \ny_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Vertical scale of the animation. Default is 1.  \ntint :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \nrender_layer :: [RenderLayer](http://lua-api.factorio.com/latest/Concepts.html#RenderLayer) (optional)  \nanimation_speed :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): How many frames the animation goes forward per tick. Default is 1.  \nanimation_offset :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Offset of the animation in frames. Default is 0.  \norientation_target :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): If given, the animation rotates so that it faces this target. Note that ````\norientation````\nis still applied to the animation.  \norientation_target_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\norientation_target````\nis a LuaEntity.  \noriented_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Offsets the center of the animation if ````\norientation_target````\nis given. This offset will rotate together with the animation.  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): Center of the animation.  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false.  \n\n**Return value**  \nId of the render object",
        "returns": "uint64",
        "args": {
          "animation": {
            "name": "animation",
            "type": "string",
            "doc": "Table with the following fields:   \nanimation :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of an \"animation\" prototype.  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The orientation of the animation. Default is 0.  \nx_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Horizontal scale of the animation. Default is 1.  \ny_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Vertical scale of the animation. Default is 1.  \ntint :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \nrender_layer :: [RenderLayer](http://lua-api.factorio.com/latest/Concepts.html#RenderLayer) (optional)  \nanimation_speed :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): How many frames the animation goes forward per tick. Default is 1.  \nanimation_offset :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Offset of the animation in frames. Default is 0.  \norientation_target :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): If given, the animation rotates so that it faces this target. Note that ````\norientation````\nis still applied to the animation.  \norientation_target_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\norientation_target````\nis a LuaEntity.  \noriented_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Offsets the center of the animation if ````\norientation_target````\nis given. This offset will rotate together with the animation.  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): Center of the animation.  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false."
          }
        }
      },
      "draw_arc": {
        "name": "draw_arc",
        "type": "function",
        "doc": "Create an ar    \n\n**Parameters**  \nTable with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nmax_radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The radius of the outer edge of the arc, in tiles.  \nmin_radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The radius of the inner edge of the arc, in tiles.  \nstart_angle :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): Where the arc starts, in radian.  \nangle :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): The angle of the arc, in radian.  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false.  \n\n**Return value**  \nId of the render object",
        "returns": "uint64",
        "args": {
          "color": {
            "name": "color",
            "type": "Color",
            "doc": "Table with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nmax_radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The radius of the outer edge of the arc, in tiles.  \nmin_radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The radius of the inner edge of the arc, in tiles.  \nstart_angle :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): Where the arc starts, in radian.  \nangle :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): The angle of the arc, in radian.  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false."
          }
        }
      },
      "draw_circle": {
        "name": "draw_circle",
        "type": "function",
        "doc": "Create a circl    \n\n**Parameters**  \nTable with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nradius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): In tiles.  \nwidth :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): Width of the outline, used only if filled = false. Value is in pixels (32 per tile).  \nfilled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If the circle should be filled.  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false.  \n\n**Return value**  \nId of the render object",
        "returns": "uint64",
        "args": {
          "color": {
            "name": "color",
            "type": "Color",
            "doc": "Table with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nradius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): In tiles.  \nwidth :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): Width of the outline, used only if filled = false. Value is in pixels (32 per tile).  \nfilled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If the circle should be filled.  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false."
          }
        }
      },
      "draw_light": {
        "name": "draw_light",
        "type": "function",
        "doc": "Create a ligh    \n\n**Parameters**  \nTable with the following fields:   \nsprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath)  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The orientation of the light. Default is 0.  \nscale :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): Default is 1.  \nintensity :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): Default is 1.  \nminimum_darkness :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The minimum darkness at which this light is rendered. Default is 0.  \noriented :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this light has the same orientation as the entity target, default is false. Note that ````\norientation````\nis still applied to the sprite.  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional): Defaults to white (no tint).  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): Center of the light.  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false.  \n\n**Return value**  \nId of the render object  \n\n**Note: ** The base game uses the utility sprites ````\nlight_medium````\nand ````\nlight_small````\nfor lights.",
        "returns": "uint64",
        "args": {
          "sprite": {
            "name": "sprite",
            "type": "SpritePath",
            "doc": "Table with the following fields:   \nsprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath)  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The orientation of the light. Default is 0.  \nscale :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): Default is 1.  \nintensity :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): Default is 1.  \nminimum_darkness :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The minimum darkness at which this light is rendered. Default is 0.  \noriented :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this light has the same orientation as the entity target, default is false. Note that ````\norientation````\nis still applied to the sprite.  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional): Defaults to white (no tint).  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): Center of the light.  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false."
          }
        }
      },
      "draw_line": {
        "name": "draw_line",
        "type": "function",
        "doc": "Create a lin    \n\n**Parameters**  \nTable with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nwidth :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): In pixels (32 per tile).  \ngap_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Length of the gaps that this line has, in tiles. Default is 0.  \ndash_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Length of the dashes that this line has. Used only if gap_length &gt; 0. Default is 0.  \nfrom :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nfrom_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\nfrom````\nis a LuaEntity.  \nto :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nto_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\nto````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false.  \n\n**Return value**  \nId of the render object",
        "returns": "uint64",
        "args": {
          "color": {
            "name": "color",
            "type": "Color",
            "doc": "Table with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nwidth :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): In pixels (32 per tile).  \ngap_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Length of the gaps that this line has, in tiles. Default is 0.  \ndash_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Length of the dashes that this line has. Used only if gap_length &gt; 0. Default is 0.  \nfrom :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nfrom_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\nfrom````\nis a LuaEntity.  \nto :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nto_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\nto````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false."
          }
        }
      },
      "draw_polygon": {
        "name": "draw_polygon",
        "type": "function",
        "doc": "Create a polygo    \n\n**Parameters**  \nTable with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nvertices :: array of ScriptRenderTarget    \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false.  \n\n**Return value**  \nId of the render object",
        "returns": "uint64",
        "args": {
          "color": {
            "name": "color",
            "type": "Color",
            "doc": "Table with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nvertices :: array of ScriptRenderTarget    \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false."
          }
        }
      },
      "draw_rectangle": {
        "name": "draw_rectangle",
        "type": "function",
        "doc": "Create a rectangl    \n\n**Parameters**  \nTable with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nwidth :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): Width of the outline, used only if filled = false. Value is in pixels (32 per tile).  \nfilled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If the rectangle should be filled.  \nleft_top :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nleft_top_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\nleft_top````\nis a LuaEntity.  \nright_bottom :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nright_bottom_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\nright_bottom````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false.  \n\n**Return value**  \nId of the render object",
        "returns": "uint64",
        "args": {
          "color": {
            "name": "color",
            "type": "Color",
            "doc": "Table with the following fields:   \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nwidth :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): Width of the outline, used only if filled = false. Value is in pixels (32 per tile).  \nfilled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If the rectangle should be filled.  \nleft_top :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nleft_top_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\nleft_top````\nis a LuaEntity.  \nright_bottom :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nright_bottom_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\nright_bottom````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false."
          }
        }
      },
      "draw_sprite": {
        "name": "draw_sprite",
        "type": "function",
        "doc": "Create a sprit    \n\n**Parameters**  \nTable with the following fields:   \nsprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath)  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The orientation of the sprite. Default is 0.  \nx_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Horizontal scale of the sprite. Default is 1.  \ny_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Vertical scale of the sprite. Default is 1.  \ntint :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \nrender_layer :: [RenderLayer](http://lua-api.factorio.com/latest/Concepts.html#RenderLayer) (optional)  \norientation_target :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): If given, the sprite rotates so that it faces this target. Note that ````\norientation````\nis still applied to the sprite.  \norientation_target_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\norientation_target````\nis a LuaEntity.  \noriented_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Offsets the center of the sprite if ````\norientation_target````\nis given. This offset will rotate together with the sprite.  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): Center of the sprite.  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false.  \n\n**Return value**  \nId of the render object",
        "returns": "uint64",
        "args": {
          "sprite": {
            "name": "sprite",
            "type": "SpritePath",
            "doc": "Table with the following fields:   \nsprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath)  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The orientation of the sprite. Default is 0.  \nx_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Horizontal scale of the sprite. Default is 1.  \ny_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Vertical scale of the sprite. Default is 1.  \ntint :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \nrender_layer :: [RenderLayer](http://lua-api.factorio.com/latest/Concepts.html#RenderLayer) (optional)  \norientation_target :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): If given, the sprite rotates so that it faces this target. Note that ````\norientation````\nis still applied to the sprite.  \norientation_target_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\norientation_target````\nis a LuaEntity.  \noriented_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Offsets the center of the sprite if ````\norientation_target````\nis given. This offset will rotate together with the sprite.  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): Center of the sprite.  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false."
          }
        }
      },
      "draw_text": {
        "name": "draw_text",
        "type": "function",
        "doc": "Create a tex    \n\n**Parameters**  \nTable with the following fields:   \ntext :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString): The text to display.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nscale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \nfont :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Name of font to use. Defaults to the same font as flying-text.  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The orientation of the text. Default is 0.  \nalignment :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Defaults to \"left\". Other options are \"right\" and \"center\".  \nscale_with_zoom :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Defaults to false. If true, the text scales with player zoom, resulting in it always being the same size on screen, and the size compared to the game world changes.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false.  \n\n**Return value**  \nId of the render object  \n\n**Note: ** Not all fonts support scaling.",
        "returns": "uint64",
        "args": {
          "text": {
            "name": "text",
            "type": "LocalisedString",
            "doc": "Table with the following fields:   \ntext :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString): The text to display.  \nsurface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Only used if ````\ntarget````\nis a LuaEntity.  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \nscale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \nfont :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Name of font to use. Defaults to the same font as flying-text.  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): In ticks. Defaults to living forever.  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The forces that this object is rendered to.  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The players that this object is rendered to.  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this is rendered to anyone at all. Defaults to true.  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should be drawn below sprites and entities.  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional): The orientation of the text. Default is 0.  \nalignment :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Defaults to \"left\". Other options are \"right\" and \"center\".  \nscale_with_zoom :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Defaults to false. If true, the text scales with player zoom, resulting in it always being the same size on screen, and the size compared to the game world changes.  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If this should only be rendered in alt mode. Defaults to false."
          }
        }
      },
      "get_alignment": {
        "name": "get_alignment",
        "type": "function",
        "doc": "Get the alignment of the text with this id or ````\nnil````\nif the object is not a tex    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Text_",
        "returns": "string",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_all_ids": {
        "name": "get_all_ids",
        "type": "function",
        "doc": "Gets an array of all valid object id    \n\n**Parameters**  \nmod_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If provided, get only the render objects created by this mod.",
        "returns": "array of uint64",
        "args": {
          "mod_name": {
            "name": "mod_name",
            "type": "string",
            "doc": "mod_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): If provided, get only the render objects created by this mod."
          }
        }
      },
      "get_angle": {
        "name": "get_angle",
        "type": "function",
        "doc": "Get the angle of the arc with this id or ````\nnil````\nif the object is not a ar    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n\n**Return value**  \nangle in radian  \n_Can only be used if this is Arc_",
        "returns": "float",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_animation": {
        "name": "get_animation",
        "type": "function",
        "doc": "Get the animation prototype name of the animation with this id or ````\nnil````\nif the object is not an animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Animation_",
        "returns": "string",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_animation_offset": {
        "name": "get_animation_offset",
        "type": "function",
        "doc": "Get the animation offset of the animation with this id or ````\nnil````\nif the object is not an animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n\n**Return value**  \nAnimation offset in frames.  \n_Can only be used if this is Animation_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_animation_speed": {
        "name": "get_animation_speed",
        "type": "function",
        "doc": "Get the animation speed of the animation with this id or ````\nnil````\nif the object is not an animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n\n**Return value**  \nAnimation speed in frames per tick.  \n_Can only be used if this is Animation_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_color": {
        "name": "get_color",
        "type": "function",
        "doc": "Get the color or tint of the object with this i    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n\n**Return value**  \nor ````\nnil````\nif the object does not support color.  \n_Can only be used if this is Text, Line, Circle, Rectangle, Arc, Polygon, Sprite, Light, or Animation_",
        "returns": "Color",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_dash_length": {
        "name": "get_dash_length",
        "type": "function",
        "doc": "Get the dash length of the line with this id or ````\nnil````\nif the object is not a lin    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Line_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_draw_on_ground": {
        "name": "get_draw_on_ground",
        "type": "function",
        "doc": "Get whether this is being drawn on the ground, under most entities and sprite    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Text, Line, Circle, Rectangle, Arc, or Polygon_",
        "returns": "boolean",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_filled": {
        "name": "get_filled",
        "type": "function",
        "doc": "Get if the circle or rectangle with this id is filled or ````\nnil````\nif the object is not a circle or rectangl    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Circle or Rectangle_",
        "returns": "boolean",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_font": {
        "name": "get_font",
        "type": "function",
        "doc": "Get the font of the text with this id or ````\nnil````\nif the object is not a tex    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Text_",
        "returns": "string",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_forces": {
        "name": "get_forces",
        "type": "function",
        "doc": "Get the forces that the object with this id is rendered to or ````\nnil````\nif visible to all force    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)",
        "returns": "array of LuaForce",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_from": {
        "name": "get_from",
        "type": "function",
        "doc": "Get from where the line with this id is drawn or ````\nnil````\nif this object is not a lin    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Line_",
        "returns": "ScriptRenderTarget",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_gap_length": {
        "name": "get_gap_length",
        "type": "function",
        "doc": "Get the length of the gaps in the line with this id or ````\nnil````\nif the object is not a lin    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Line_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_intensity": {
        "name": "get_intensity",
        "type": "function",
        "doc": "Get the intensity of the light with this id or ````\nnil````\nif the object is not a ligh    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Light_",
        "returns": "float",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_left_top": {
        "name": "get_left_top",
        "type": "function",
        "doc": "Get where top left corner of the rectangle with this id is drawn or ````\nnil````\nif the object is not a rectangl    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Rectangle_",
        "returns": "ScriptRenderTarget",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_max_radius": {
        "name": "get_max_radius",
        "type": "function",
        "doc": "Get the radius of the outer edge of the arc with this id or ````\nnil````\nif the object is not a ar    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Arc_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_min_radius": {
        "name": "get_min_radius",
        "type": "function",
        "doc": "Get the radius of the inner edge of the arc with this id or ````\nnil````\nif the object is not a ar    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Arc_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_minimum_darkness": {
        "name": "get_minimum_darkness",
        "type": "function",
        "doc": "Get the minimum darkness at which the light with this id is rendered or ````\nnil````\nif the object is not a ligh    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Light_",
        "returns": "float",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_only_in_alt_mode": {
        "name": "get_only_in_alt_mode",
        "type": "function",
        "doc": "Get whether this is only rendered in alt-mod    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)",
        "returns": "boolean",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_orientation": {
        "name": "get_orientation",
        "type": "function",
        "doc": "Get the orientation of the text, sprite, light or animation with this id or ````\nnil````\nif the object is not a text, sprite, light or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Text, Sprite, Light, or Animation_",
        "returns": "float",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_orientation_target": {
        "name": "get_orientation_target",
        "type": "function",
        "doc": "The sprite or animation rotates so that it faces this target. Note that ````\norientation````\nis still applied to the sprite or animatio  \nGet the orientation_target of the sprite or animation with this id or ````\nnil````\nif no target or if this object is not a sprite or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Sprite or Animation_",
        "returns": "ScriptRenderTarget",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_oriented": {
        "name": "get_oriented",
        "type": "function",
        "doc": "Get if the light with this id is rendered has the same orientation as the target entity or ````\nnil````\nif the object is not a ligh  \nNote that ````\norientation````\nis still applied to the sprit    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Light_",
        "returns": "boolean",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_oriented_offset": {
        "name": "get_oriented_offset",
        "type": "function",
        "doc": "Offsets the center of the sprite or animation if ````\norientation_target````\nis given. This offset will rotate together with the sprite or animatio  \nGet the oriented_offset of the sprite or animation with this id or ````\nnil````\nif this object is not a sprite or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Sprite or Animation_",
        "returns": "Vector",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_players": {
        "name": "get_players",
        "type": "function",
        "doc": "Get the players that the object with this id is rendered to or ````\nnil````\nif visible to all player    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)",
        "returns": "array of LuaPlayer",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_radius": {
        "name": "get_radius",
        "type": "function",
        "doc": "Get the radius of the circle with this id or ````\nnil````\nif the object is not a circl    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Circle_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_render_layer": {
        "name": "get_render_layer",
        "type": "function",
        "doc": "Get the render layer of the sprite or animation with this id or ````\nnil````\nif the object is not a sprite or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Sprite or Animation_",
        "returns": "RenderLayer",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_right_bottom": {
        "name": "get_right_bottom",
        "type": "function",
        "doc": "Get where bottom right corner of the rectangle with this id is drawn or ````\nnil````\nif the object is not a rectangl    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Rectangle_",
        "returns": "ScriptRenderTarget",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_scale": {
        "name": "get_scale",
        "type": "function",
        "doc": "Get the scale of the text or light with this id or ````\nnil````\nif the object is not a text or ligh    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Text or Light_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_scale_with_zoom": {
        "name": "get_scale_with_zoom",
        "type": "function",
        "doc": "Get if the text with this id scales with player zoom or ````\nnil````\nif the object is not a tex    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Text_",
        "returns": "boolean",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_sprite": {
        "name": "get_sprite",
        "type": "function",
        "doc": "Get the sprite of the sprite or light with this id or ````\nnil````\nif the object is not a sprite or ligh    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Sprite or Light_",
        "returns": "SpritePath",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_start_angle": {
        "name": "get_start_angle",
        "type": "function",
        "doc": "Get where the arc with this id starts or ````\nnil````\nif the object is not a ar    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n\n**Return value**  \nangle in radian  \n_Can only be used if this is Arc_",
        "returns": "float",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_surface": {
        "name": "get_surface",
        "type": "function",
        "doc": "The surface the object with this id is rendered o    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)",
        "returns": "LuaSurface",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_target": {
        "name": "get_target",
        "type": "function",
        "doc": "Get where the object with this id is drawn or ````\nnil````\nif the object does not support targe    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Text, Circle, Arc, Sprite, Light, or Animation_",
        "returns": "ScriptRenderTarget",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_text": {
        "name": "get_text",
        "type": "function",
        "doc": "Get the text that is displayed by the text with this id or ````\nnil````\nif the object is not a tex    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Text_",
        "returns": "LocalisedString",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_time_to_live": {
        "name": "get_time_to_live",
        "type": "function",
        "doc": "Get the time to live of the object with this id. This will be 0 if the object does not expir    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)",
        "returns": "uint",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_to": {
        "name": "get_to",
        "type": "function",
        "doc": "Get where the line with this id is drawn to or ````\nnil````\nif the object is not a lin    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Line_",
        "returns": "ScriptRenderTarget",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_type": {
        "name": "get_type",
        "type": "function",
        "doc": "Gets the type of the given object. The types are \"text\", \"line\", \"circle\", \"rectangle\", \"arc\", \"polygon\", \"sprite\", \"light\" and \"animation    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)",
        "returns": "string",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_vertices": {
        "name": "get_vertices",
        "type": "function",
        "doc": "Get the vertices of the polygon with this id or ````\nnil````\nif the object is not a polygo    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Polygon_",
        "returns": "array of ScriptRenderTarget",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_visible": {
        "name": "get_visible",
        "type": "function",
        "doc": "Get whether this is rendered to anyone at al    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)",
        "returns": "boolean",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_width": {
        "name": "get_width",
        "type": "function",
        "doc": "Get the width of the object with this id. Value is in pixels (32 per tile    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n\n**Return value**  \nor ````\nnil````\nif the object does not support width.  \n_Can only be used if this is Line, Circle, or Rectangle_",
        "returns": "float",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_x_scale": {
        "name": "get_x_scale",
        "type": "function",
        "doc": "Get the horizontal scale of the sprite or animation with this id or ````\nnil````\nif the object is not a sprite or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Sprite or Animation_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "get_y_scale": {
        "name": "get_y_scale",
        "type": "function",
        "doc": "Get the vertical scale of the sprite or animation with this id or ````\nnil````\nif the object is not a sprite or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n_Can only be used if this is Sprite or Animation_",
        "returns": "double",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "is_font_valid": {
        "name": "is_font_valid",
        "type": "function",
        "doc": "Does a font with this name exis    \n\n**Parameters**  \nfont_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)",
        "returns": "boolean",
        "args": {
          "font_name": {
            "name": "font_name",
            "type": "string",
            "doc": "font_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)"
          }
        }
      },
      "is_valid": {
        "name": "is_valid",
        "type": "function",
        "doc": "Does a valid object with this id exis    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)",
        "returns": "boolean",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_alignment": {
        "name": "set_alignment",
        "doc": "Set the alignment of the text with this id. Does nothing if this object is not a tex    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nalignment :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): \"left\", \"right\" or \"center\".  \n_Can only be used if this is Text_",
        "type": "function",
        "args": {
          "alignment": {
            "name": "alignment",
            "type": "string",
            "doc": "alignment :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): \"left\", \"right\" or \"center\"."
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_angle": {
        "name": "set_angle",
        "doc": "Set the angle of the arc with this id. Does nothing if this object is not a ar    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nangle :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): angle in radian  \n_Can only be used if this is Arc_",
        "type": "function",
        "args": {
          "angle": {
            "name": "angle",
            "type": "float",
            "doc": "angle :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): angle in radian"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_animation": {
        "name": "set_animation",
        "doc": "Set the animation prototype name of the animation with this id. Does nothing if this object is not an animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nanimation :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n_Can only be used if this is Animation_",
        "type": "function",
        "args": {
          "animation": {
            "name": "animation",
            "type": "string",
            "doc": "animation :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_animation_offset": {
        "name": "set_animation_offset",
        "doc": "Set the animation offset of the animation with this id. Does nothing if this object is not an animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nanimation_offset :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Animation offset in frames.  \n_Can only be used if this is Animation_",
        "type": "function",
        "args": {
          "animation_offset": {
            "name": "animation_offset",
            "type": "double",
            "doc": "animation_offset :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Animation offset in frames."
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_animation_speed": {
        "name": "set_animation_speed",
        "doc": "Set the animation speed of the animation with this id. Does nothing if this object is not an animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nanimation_speed :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Animation speed in frames per tick.  \n_Can only be used if this is Animation_",
        "type": "function",
        "args": {
          "animation_speed": {
            "name": "animation_speed",
            "type": "double",
            "doc": "animation_speed :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Animation speed in frames per tick."
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_color": {
        "name": "set_color",
        "doc": "Set the color or tint of the object with this id. Does nothing if this object does not support colo    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)  \n_Can only be used if this is Text, Line, Circle, Rectangle, Arc, Polygon, Sprite, Light, or Animation_",
        "type": "function",
        "args": {
          "color": {
            "name": "color",
            "type": "Color",
            "doc": "color :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color)"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_corners": {
        "name": "set_corners",
        "doc": "Set the corners of the rectangle with this id. Does nothing if this object is not a rectangl    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nleft_top :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nleft_top_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)  \nright_bottom :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nright_bottom_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)  \n_Can only be used if this is Rectangle_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "left_top": {
            "name": "left_top",
            "type": "Position or LuaEntity",
            "doc": "left_top :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          },
          "left_top_offset": {
            "name": "left_top_offset",
            "type": "Vector",
            "doc": "left_top_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)"
          },
          "right_bottom": {
            "name": "right_bottom",
            "type": "Position or LuaEntity",
            "doc": "right_bottom :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          },
          "right_bottom_offset": {
            "name": "right_bottom_offset",
            "type": "Vector",
            "doc": "right_bottom_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)"
          }
        }
      },
      "set_dash_length": {
        "name": "set_dash_length",
        "doc": "Set the dash length of the line with this id. Does nothing if this object is not a lin    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \ndash_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n_Can only be used if this is Line_",
        "type": "function",
        "args": {
          "dash_length": {
            "name": "dash_length",
            "type": "double",
            "doc": "dash_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_dashes": {
        "name": "set_dashes",
        "doc": "Set the length of the dashes and the length of the gaps in the line with this id. Does nothing if this object is not a lin    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \ndash_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \ngap_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n_Can only be used if this is Line_",
        "type": "function",
        "args": {
          "dash_length": {
            "name": "dash_length",
            "type": "double",
            "doc": "dash_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          },
          "gap_length": {
            "name": "gap_length",
            "type": "double",
            "doc": "gap_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_draw_on_ground": {
        "name": "set_draw_on_ground",
        "doc": "Set whether this is being drawn on the ground, under most entities and sprite    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \ndraw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n_Can only be used if this is Text, Line, Circle, Rectangle, Arc, or Polygon_",
        "type": "function",
        "args": {
          "draw_on_ground": {
            "name": "draw_on_ground",
            "type": "boolean",
            "doc": "draw_on_ground :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_filled": {
        "name": "set_filled",
        "doc": "Set if the circle or rectangle with this id is filled. Does nothing if this object is not a circle or rectangl    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nfilled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n_Can only be used if this is Circle or Rectangle_",
        "type": "function",
        "args": {
          "filled": {
            "name": "filled",
            "type": "boolean",
            "doc": "filled :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_font": {
        "name": "set_font",
        "doc": "Set the font of the text with this id. Does nothing if this object is not a tex    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nfont :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n_Can only be used if this is Text_",
        "type": "function",
        "args": {
          "font": {
            "name": "font",
            "type": "string",
            "doc": "font :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_forces": {
        "name": "set_forces",
        "doc": "Set the forces that the object with this id is rendered t    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nforces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Providing an empty array will set the object to be visible to all forces.",
        "type": "function",
        "args": {
          "forces": {
            "name": "forces",
            "type": "array of ForceSpecification",
            "doc": "forces :: array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Providing an empty array will set the object to be visible to all forces."
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_from": {
        "name": "set_from",
        "doc": "Set from where the line with this id is drawn. Does nothing if the object is not a lin    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nfrom :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nfrom_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \n_Can only be used if this is Line_",
        "type": "function",
        "args": {
          "from": {
            "name": "from",
            "type": "Position or LuaEntity",
            "doc": "from :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          },
          "from_offset": {
            "name": "from_offset",
            "type": "Vector",
            "doc": "from_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_gap_length": {
        "name": "set_gap_length",
        "doc": "Set the length of the gaps in the line with this id. Does nothing if this object is not a lin    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \ngap_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n_Can only be used if this is Line_",
        "type": "function",
        "args": {
          "gap_length": {
            "name": "gap_length",
            "type": "double",
            "doc": "gap_length :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          },
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          }
        }
      },
      "set_intensity": {
        "name": "set_intensity",
        "doc": "Set the intensity of the light with this id. Does nothing if this object is not a ligh    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nintensity :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n_Can only be used if this is Light_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "intensity": {
            "name": "intensity",
            "type": "float",
            "doc": "intensity :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)"
          }
        }
      },
      "set_left_top": {
        "name": "set_left_top",
        "doc": "Set where top left corner of the rectangle with this id is drawn. Does nothing if this object is not a rectangl    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nleft_top :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nleft_top_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \n_Can only be used if this is Rectangle_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "left_top": {
            "name": "left_top",
            "type": "Position or LuaEntity",
            "doc": "left_top :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          },
          "left_top_offset": {
            "name": "left_top_offset",
            "type": "Vector",
            "doc": "left_top_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)"
          }
        }
      },
      "set_max_radius": {
        "name": "set_max_radius",
        "doc": "Set the radius of the outer edge of the arc with this id. Does nothing if this object is not a ar    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nmax_radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n_Can only be used if this is Arc_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "max_radius": {
            "name": "max_radius",
            "type": "double",
            "doc": "max_radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          }
        }
      },
      "set_min_radius": {
        "name": "set_min_radius",
        "doc": "Set the radius of the inner edge of the arc with this id. Does nothing if this object is not a ar    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nmin_radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n_Can only be used if this is Arc_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "min_radius": {
            "name": "min_radius",
            "type": "double",
            "doc": "min_radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          }
        }
      },
      "set_minimum_darkness": {
        "name": "set_minimum_darkness",
        "doc": "Set the minimum darkness at which the light with this id is rendered. Does nothing if this object is not a ligh    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nminimum_darkness :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n_Can only be used if this is Light_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "minimum_darkness": {
            "name": "minimum_darkness",
            "type": "float",
            "doc": "minimum_darkness :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)"
          }
        }
      },
      "set_only_in_alt_mode": {
        "name": "set_only_in_alt_mode",
        "doc": "Set whether this is only rendered in alt-mod    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nonly_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "only_in_alt_mode": {
            "name": "only_in_alt_mode",
            "type": "boolean",
            "doc": "only_in_alt_mode :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          }
        }
      },
      "set_orientation": {
        "name": "set_orientation",
        "doc": "Set the orientation of the text, sprite, light or animation with this id. Does nothing if this object is not a text, sprite, light or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \norientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n_Can only be used if this is Text, Sprite, Light, or Animation_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "orientation": {
            "name": "orientation",
            "type": "float",
            "doc": "orientation :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)"
          }
        }
      },
      "set_orientation_target": {
        "name": "set_orientation_target",
        "doc": "The sprite or animation rotates so that it faces this target. Note that ````\norientation````\nis still applied to the sprite or animatio  \nSet the orientation_target of the sprite or animation with this id. Does nothing if this object is not a sprite or animatio  \nSet to ````\nnil````\nif the sprite or animation should not have an orientation_targe    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \norientation_target :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \norientation_target_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \n_Can only be used if this is Sprite or Animation_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "orientation_target": {
            "name": "orientation_target",
            "type": "Position or LuaEntity",
            "doc": "orientation_target :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          },
          "orientation_target_offset": {
            "name": "orientation_target_offset",
            "type": "Vector",
            "doc": "orientation_target_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)"
          }
        }
      },
      "set_oriented": {
        "name": "set_oriented",
        "doc": "Set if the light with this id is rendered has the same orientation as the target entity. Does nothing if this object is not a ligh  \nNote that ````\norientation````\nis still applied to the sprit    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \noriented :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n_Can only be used if this is Light_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "oriented": {
            "name": "oriented",
            "type": "boolean",
            "doc": "oriented :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          }
        }
      },
      "set_oriented_offset": {
        "name": "set_oriented_offset",
        "doc": "Offsets the center of the sprite or animation if ````\norientation_target````\nis given. This offset will rotate together with the sprite or animatio  \nSet the oriented_offset of the sprite or animation with this id. Does nothing if this object is not a sprite or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \noriented_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)  \n_Can only be used if this is Sprite or Animation_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "oriented_offset": {
            "name": "oriented_offset",
            "type": "Vector",
            "doc": "oriented_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)"
          }
        }
      },
      "set_players": {
        "name": "set_players",
        "doc": "Set the players that the object with this id is rendered t    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nplayers :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification): Providing an empty array will set the object to be visible to all players.",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "players": {
            "name": "players",
            "type": "array of PlayerSpecification",
            "doc": "players :: array of [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification): Providing an empty array will set the object to be visible to all players."
          }
        }
      },
      "set_radius": {
        "name": "set_radius",
        "doc": "Set the radius of the circle with this id. Does nothing if this object is not a circl    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nradius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n_Can only be used if this is Circle_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "radius": {
            "name": "radius",
            "type": "double",
            "doc": "radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          }
        }
      },
      "set_render_layer": {
        "name": "set_render_layer",
        "doc": "Set the render layer of the sprite or animation with this id. Does nothing if this object is not a sprite or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nrender_layer :: [RenderLayer](http://lua-api.factorio.com/latest/Concepts.html#RenderLayer)  \n_Can only be used if this is Sprite or Animation_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "render_layer": {
            "name": "render_layer",
            "type": "RenderLayer",
            "doc": "render_layer :: [RenderLayer](http://lua-api.factorio.com/latest/Concepts.html#RenderLayer)"
          }
        }
      },
      "set_right_bottom": {
        "name": "set_right_bottom",
        "doc": "Set where top bottom right of the rectangle with this id is drawn. Does nothing if this object is not a rectangl    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nright_bottom :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nright_bottom_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \n_Can only be used if this is Rectangle_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "right_bottom": {
            "name": "right_bottom",
            "type": "Position or LuaEntity",
            "doc": "right_bottom :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          },
          "right_bottom_offset": {
            "name": "right_bottom_offset",
            "type": "Vector",
            "doc": "right_bottom_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)"
          }
        }
      },
      "set_scale": {
        "name": "set_scale",
        "doc": "Set the scale of the text or light with this id. Does nothing if this object is not a text or ligh    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nscale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n_Can only be used if this is Text or Light_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "scale": {
            "name": "scale",
            "type": "double",
            "doc": "scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          }
        }
      },
      "set_scale_with_zoom": {
        "name": "set_scale_with_zoom",
        "doc": "Set if the text with this id scales with player zoom, resulting in it always being the same size on screen, and the size compared to the game world change  \nDoes nothing if this object is not a tex    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nscale_with_zoom :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n_Can only be used if this is Text_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "scale_with_zoom": {
            "name": "scale_with_zoom",
            "type": "boolean",
            "doc": "scale_with_zoom :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          }
        }
      },
      "set_sprite": {
        "name": "set_sprite",
        "doc": "Set the sprite of the sprite or light with this id. Does nothing if this object is not a sprite or ligh    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nsprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath)  \n_Can only be used if this is Sprite or Light_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "sprite": {
            "name": "sprite",
            "type": "SpritePath",
            "doc": "sprite :: [SpritePath](http://lua-api.factorio.com/latest/Concepts.html#SpritePath)"
          }
        }
      },
      "set_start_angle": {
        "name": "set_start_angle",
        "doc": "Set where the arc with this id starts. Does nothing if this object is not a ar    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nstart_angle :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): angle in radian  \n_Can only be used if this is Arc_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "start_angle": {
            "name": "start_angle",
            "type": "float",
            "doc": "start_angle :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): angle in radian"
          }
        }
      },
      "set_target": {
        "name": "set_target",
        "doc": "Set where the object with this id is drawn. Does nothing if this object does not support targe    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \ntarget :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ntarget_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \n_Can only be used if this is Text, Circle, Arc, Sprite, Light, or Animation_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "target": {
            "name": "target",
            "type": "Position or LuaEntity",
            "doc": "target :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          },
          "target_offset": {
            "name": "target_offset",
            "type": "Vector",
            "doc": "target_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)"
          }
        }
      },
      "set_text": {
        "name": "set_text",
        "doc": "Set the text that is displayed by the text with this id. Does nothing if this object is not a tex    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \ntext :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \n_Can only be used if this is Text_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "text": {
            "name": "text",
            "type": "LocalisedString",
            "doc": "text :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
          }
        }
      },
      "set_time_to_live": {
        "name": "set_time_to_live",
        "doc": "Set the time to live of the object with this id. Set to 0 if the object should not expir    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "time_to_live": {
            "name": "time_to_live",
            "type": "uint",
            "doc": "time_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "set_to": {
        "name": "set_to",
        "doc": "Set where the line with this id is drawn to. Does nothing if this object is not a lin    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nto :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \nto_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \n_Can only be used if this is Line_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "to": {
            "name": "to",
            "type": "Position or LuaEntity",
            "doc": "to :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          },
          "to_offset": {
            "name": "to_offset",
            "type": "Vector",
            "doc": "to_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)"
          }
        }
      },
      "set_vertices": {
        "name": "set_vertices",
        "doc": "Set the vertices of the polygon with this id. Does nothing if this object is not a polygo    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nvertices :: array of [ScriptRenderTarget](http://lua-api.factorio.com/latest/Concepts.html#ScriptRenderTarget)  \n_Can only be used if this is Polygon_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "vertices": {
            "name": "vertices",
            "type": "array of ScriptRenderTarget",
            "doc": "vertices :: array of [ScriptRenderTarget](http://lua-api.factorio.com/latest/Concepts.html#ScriptRenderTarget)"
          }
        }
      },
      "set_visible": {
        "name": "set_visible",
        "doc": "Set whether this is rendered to anyone at al    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nvisible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "visible": {
            "name": "visible",
            "type": "boolean",
            "doc": "visible :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
          }
        }
      },
      "set_width": {
        "name": "set_width",
        "doc": "Set the width of the object with this id. Does nothing if this object does not support width. Value is in pixels (32 per tile    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nwidth :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n_Can only be used if this is Line, Circle, or Rectangle_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "width": {
            "name": "width",
            "type": "float",
            "doc": "width :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)"
          }
        }
      },
      "set_x_scale": {
        "name": "set_x_scale",
        "doc": "Set the horizontal scale of the sprite or animation with this id. Does nothing if this object is not a sprite or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \nx_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n_Can only be used if this is Sprite or Animation_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "x_scale": {
            "name": "x_scale",
            "type": "double",
            "doc": "x_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          }
        }
      },
      "set_y_scale": {
        "name": "set_y_scale",
        "doc": "Set the vertical scale of the sprite or animation with this id. Does nothing if this object is not a sprite or animatio    \n\n**Parameters**  \nid :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \ny_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n_Can only be used if this is Sprite or Animation_",
        "type": "function",
        "args": {
          "id": {
            "name": "id",
            "type": "uint64",
            "doc": "id :: [uint64](http://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
          },
          "y_scale": {
            "name": "y_scale",
            "type": "double",
            "doc": "y_scale :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)"
          }
        }
      }
    },
    "doc": "Allows rendering of geometric shapes, text and sprites in the game world. Each render object is identified by an id that is universally unique for the lifetime of a whole game."
  },
  "LuaRoboportControlBehavior": {
    "name": "LuaRoboportControlBehavior",
    "type": "LuaRoboportControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "available_construction_output_signal": {
        "name": "available_construction_output_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "available_logistic_output_signal": {
        "name": "available_logistic_output_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "mode_of_operations": {
        "name": "mode_of_operations",
        "type": "defines.control_behavior.roboport.circuit_mode_of_operation",
        "mode": "[RW]"
      },
      "total_construction_output_signal": {
        "name": "total_construction_output_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "total_logistic_output_signal": {
        "name": "total_logistic_output_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for roboports."
  },
  "LuaSettings": {
    "name": "LuaSettings",
    "type": "LuaSettings",
    "inherits": [],
    "properties": {
      "get_player_settings": {
        "name": "get_player_settings",
        "type": "function",
        "args": {
          "player": {
            "name": "player",
            "type": "LuaPlayer",
            "doc": "player :: [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html)"
          }
        },
        "doc": "**Parameters**  \nplayer :: [LuaPlayer](http://lua-api.factorio.com/latest/LuaPlayer.html)  \n\n**Note: ** This can become invalid if during operation if the given player becomes invalid."
      },
      "global": {
        "name": "global",
        "type": "custom dictionary string → ModSetting",
        "mode": "[R]"
      },
      "player": {
        "name": "player",
        "type": "custom dictionary string → ModSetting",
        "mode": "[R]"
      },
      "startup": {
        "name": "startup",
        "type": "custom dictionary string → ModSetting",
        "mode": "[R]"
      }
    },
    "doc": "Runtime settings can be changed through console commands and by the mod that owns the settings."
  },
  "LuaStorageTankControlBehavior": {
    "name": "LuaStorageTankControlBehavior",
    "type": "LuaStorageTankControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for storage tanks."
  },
  "LuaStyle": {
    "name": "LuaStyle",
    "type": "LuaStyle",
    "inherits": [],
    "properties": {
      "bottom_cell_padding": {
        "name": "bottom_cell_padding",
        "type": "int",
        "mode": "[RW]",
        "doc": "Space between the table cell contents bottom and borde    \n_Can only be used if this is LuaTableStyle_"
      },
      "bottom_margin": {
        "name": "bottom_margin",
        "type": "int",
        "mode": "[RW]"
      },
      "bottom_padding": {
        "name": "bottom_padding",
        "type": "int",
        "mode": "[RW]"
      },
      "cell_padding": {
        "name": "cell_padding",
        "type": "int",
        "mode": "[W]",
        "doc": "Space between the table cell contents and border. (Sets top/right/bottom/left paddings to this valu    \n_Can only be used if this is LuaTableStyle_"
      },
      "clicked_font_color": {
        "name": "clicked_font_color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LuaButtonStyle_"
      },
      "clicked_vertical_offset": {
        "name": "clicked_vertical_offset",
        "type": "int",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LuaButtonStyle_"
      },
      "color": {
        "name": "color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LuaProgressBarStyle_"
      },
      "column_alignments": {
        "name": "column_alignments",
        "type": "custom array of Alignment",
        "mode": "[R]",
        "doc": "Alignments of columns of the table"
      },
      "disabled_font_color": {
        "name": "disabled_font_color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LuaButtonStyle_"
      },
      "extra_bottom_margin_when_activated": {
        "name": "extra_bottom_margin_when_activated",
        "type": "int",
        "mode": "[RW]",
        "doc": "_Can only be used if this is ScrollPaneStyle_"
      },
      "extra_left_margin_when_activated": {
        "name": "extra_left_margin_when_activated",
        "type": "int",
        "mode": "[RW]",
        "doc": "_Can only be used if this is ScrollPaneStyle_"
      },
      "extra_padding_when_activated": {
        "name": "extra_padding_when_activated",
        "type": "int",
        "mode": "[RW]",
        "doc": "_Can only be used if this is ScrollPaneStyle_"
      },
      "extra_right_margin_when_activated": {
        "name": "extra_right_margin_when_activated",
        "type": "int",
        "mode": "[RW]",
        "doc": "_Can only be used if this is ScrollPaneStyle_"
      },
      "extra_top_margin_when_activated": {
        "name": "extra_top_margin_when_activated",
        "type": "int",
        "mode": "[RW]",
        "doc": "_Can only be used if this is ScrollPaneStyle_"
      },
      "font": {
        "name": "font",
        "type": "string",
        "mode": "[RW]"
      },
      "font_color": {
        "name": "font_color",
        "type": "Color",
        "mode": "[RW]"
      },
      "gui": {
        "name": "gui",
        "type": "LuaGui",
        "mode": "[R]",
        "doc": "Gui of the [LuaGuiElement](http://lua-api.factorio.com/latest/LuaGuiElement.html) of this style."
      },
      "height": {
        "name": "height",
        "type": "int",
        "mode": "[W]",
        "doc": "Sets both minimal and maximal height to the given value"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "horizontal_align": {
        "name": "horizontal_align",
        "type": "string",
        "mode": "[RW]",
        "doc": "Horizontal align of the inner content of the widget, possible values are \"left\", \"center\" or \"righ"
      },
      "horizontal_spacing": {
        "name": "horizontal_spacing",
        "type": "int",
        "mode": "[RW]",
        "doc": "Horizontal space between individual cell    \n_Can only be used if this is LuaTableStyle, LuaFlowStyle, or LuaHorizontalFlow_"
      },
      "horizontally_squashable": {
        "name": "horizontally_squashable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If the GUI element can be squashed (by maximal with of some parent element) horizontall  \nThis is mainly meant to be used for scroll-pane The default value is fals"
      },
      "horizontally_stretchable": {
        "name": "horizontally_stretchable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If the GUI element stretches its size horizontally to other element"
      },
      "hovered_font_color": {
        "name": "hovered_font_color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LuaButtonStyle_"
      },
      "left_cell_padding": {
        "name": "left_cell_padding",
        "type": "int",
        "mode": "[RW]",
        "doc": "Space between the table cell contents left and borde    \n_Can only be used if this is LuaTableStyle_"
      },
      "left_margin": {
        "name": "left_margin",
        "type": "int",
        "mode": "[RW]"
      },
      "left_padding": {
        "name": "left_padding",
        "type": "int",
        "mode": "[RW]"
      },
      "maximal_height": {
        "name": "maximal_height",
        "type": "int",
        "mode": "[RW]"
      },
      "maximal_width": {
        "name": "maximal_width",
        "type": "int",
        "mode": "[RW]"
      },
      "minimal_height": {
        "name": "minimal_height",
        "type": "int",
        "mode": "[RW]"
      },
      "minimal_width": {
        "name": "minimal_width",
        "type": "int",
        "mode": "[RW]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this style."
      },
      "natural_height": {
        "name": "natural_height",
        "type": "int",
        "mode": "[RW]"
      },
      "natural_width": {
        "name": "natural_width",
        "type": "int",
        "mode": "[RW]"
      },
      "pie_progress_color": {
        "name": "pie_progress_color",
        "type": "Color",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LuaButtonStyle_"
      },
      "right_cell_padding": {
        "name": "right_cell_padding",
        "type": "int",
        "mode": "[RW]",
        "doc": "Space between the table cell contents right and borde    \n_Can only be used if this is LuaTableStyle_"
      },
      "right_margin": {
        "name": "right_margin",
        "type": "int",
        "mode": "[RW]"
      },
      "right_padding": {
        "name": "right_padding",
        "type": "int",
        "mode": "[RW]"
      },
      "single_line": {
        "name": "single_line",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LabelStyle_"
      },
      "stretch_image_to_widget_size": {
        "name": "stretch_image_to_widget_size",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "_Can only be used if this is ImageStyle_"
      },
      "top_cell_padding": {
        "name": "top_cell_padding",
        "type": "int",
        "mode": "[RW]",
        "doc": "Space between the table cell contents top and borde    \n_Can only be used if this is LuaTableStyle_"
      },
      "top_margin": {
        "name": "top_margin",
        "type": "int",
        "mode": "[RW]"
      },
      "top_padding": {
        "name": "top_padding",
        "type": "int",
        "mode": "[RW]"
      },
      "use_header_filler": {
        "name": "use_header_filler",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LuaFrameStyle_"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "vertical_align": {
        "name": "vertical_align",
        "type": "string",
        "mode": "[RW]",
        "doc": "Vertical align of the inner content of the widget, possible values are \"top\", \"center\" or \"botto"
      },
      "vertical_spacing": {
        "name": "vertical_spacing",
        "type": "int",
        "mode": "[RW]",
        "doc": "Vertical space between individual cell    \n_Can only be used if this is LuaTableStyle, LuaFlowStyle, or LuaVerticalFlow_"
      },
      "vertically_squashable": {
        "name": "vertically_squashable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If the GUI element can be squashed (by maximal height of some parent element) verticall  \nThis is mainly meant to be used for scroll-pane The default (parent) value for scroll pane is true, false otherwis"
      },
      "vertically_stretchable": {
        "name": "vertically_stretchable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If the GUI element stretches its size vertically to other element"
      },
      "want_ellipsis": {
        "name": "want_ellipsis",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "_Can only be used if this is LabelStyle_"
      },
      "width": {
        "name": "width",
        "type": "int",
        "mode": "[W]",
        "doc": "Sets both minimal and maximal width to the given value"
      }
    },
    "doc": "Style of a GUI element. All of the attributes listed here may be nil if not available for a\n particular GUI element."
  },
  "LuaSurface": {
    "name": "LuaSurface",
    "type": "LuaSurface",
    "inherits": [],
    "properties": {
      "always_day": {
        "name": "always_day",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "When set to true, the sun will always shin"
      },
      "build_enemy_base": {
        "name": "build_enemy_base",
        "doc": "Send a group to build a new base    \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Location of the new base.  \nunit_count :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Number of biters to send for the base-building task.  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): Force the new base will belong to. Defaults to enemy.  \n\n**Note: ** The specified force must be AI-controlled; i.e. ````\nforce.ai_controllable````\nmust be ````\ntrue````\n.",
        "type": "function",
        "args": {
          "force": {
            "name": "force",
            "type": "ForceSpecification",
            "doc": "force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): Force the new base will belong to. Defaults to enemy."
          },
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Location of the new base."
          },
          "unit_count": {
            "name": "unit_count",
            "type": "uint",
            "doc": "unit_count :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Number of biters to send for the base-building task."
          }
        }
      },
      "can_fast_replace": {
        "name": "can_fast_replace",
        "type": "function",
        "doc": "If there exists an entity at the given location that can be fast-replaced with the given entity parameter    \n\n**Parameters**  \nTable with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the entity to check  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the entity would be placed  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): Direction the entity would be placed  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The force that would place the entit  \nIf not specified, the enemy force is assumed.",
        "returns": "boolean",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the entity to check  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the entity would be placed  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): Direction the entity would be placed  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The force that would place the entit  \nIf not specified, the enemy force is assumed."
          }
        }
      },
      "can_place_entity": {
        "name": "can_place_entity",
        "type": "function",
        "doc": "Check for collisions with terrain or other entities    \n\n**Parameters**  \nTable with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the entity to check  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the entity would be placed  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): Direction the entity would be placed  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The force that would place the entity. If not specified, the enemy force is assumed.  \nbuild_check_type :: [defines.build_check_type](http://lua-api.factorio.com/latest/defines.html#defines.build_check_type) (optional): What check type should be done.  \nforced :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If [defines.build_check_type](http://lua-api.factorio.com/latest/defines.html#defines.build_check_type) is \"ghost_place\" and this is true things that can be marked for deconstruction are ignored.",
        "returns": "boolean",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Name of the entity to check  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where the entity would be placed  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): Direction the entity would be placed  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The force that would place the entity. If not specified, the enemy force is assumed.  \nbuild_check_type :: [defines.build_check_type](http://lua-api.factorio.com/latest/defines.html#defines.build_check_type) (optional): What check type should be done.  \nforced :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If [defines.build_check_type](http://lua-api.factorio.com/latest/defines.html#defines.build_check_type) is \"ghost_place\" and this is true things that can be marked for deconstruction are ignored."
          }
        }
      },
      "cancel_deconstruct_area": {
        "name": "cancel_deconstruct_area",
        "doc": "Cancel a deconstruction orde    \n\n**Parameters**  \nTable with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area to cancel deconstruction orders in.  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force whose deconstruction orders to cancel.  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any.  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nitem :: [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html) (optional): The deconstruction item to use if any.",
        "type": "function",
        "args": {
          "area": {
            "name": "area",
            "type": "BoundingBox",
            "doc": "Table with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area to cancel deconstruction orders in.  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force whose deconstruction orders to cancel.  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any.  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nitem :: [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html) (optional): The deconstruction item to use if any."
          }
        }
      },
      "cancel_upgrade_area": {
        "name": "cancel_upgrade_area",
        "doc": "Cancel a upgrade orde    \n\n**Parameters**  \nTable with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area to cancel upgrade orders in.  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force whose upgrade orders to cancel.  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any.  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nitem :: [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html) (optional): The upgrade item to use if any.",
        "type": "function",
        "args": {
          "area": {
            "name": "area",
            "type": "BoundingBox",
            "doc": "Table with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area to cancel upgrade orders in.  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force whose upgrade orders to cancel.  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any.  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nitem :: [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html) (optional): The upgrade item to use if any."
          }
        }
      },
      "clear": {
        "name": "clear",
        "doc": "Clears this surface deleting all entities and chunks on i    \n\n**Note: ** This won't clear the surface immediately. It will be cleared at the end of the current tick.",
        "type": "function"
      },
      "clear_pollution": {
        "name": "clear_pollution",
        "doc": "Clears all pollution on this surface.",
        "type": "function"
      },
      "clone_area": {
        "name": "clone_area",
        "doc": "Clones the given are    \n\n**Parameters**  \nTable with the following fields:   \nsource_area :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox)  \ndestination_area :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox)  \ndestination_surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \ndestination_force :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nclone_tiles :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If tiles should be cloned  \nclone_entities :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If entities should be cloned  \nclone_decoratives :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If decoratives should be cloned  \nclear_destination :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the destination entities should be cleared  \nexpand_map :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the destination surface should be expanded when destination_area is outside current bounds. Default false.  \n\n**Note: ** [defines.events.on_entity_cloned](http://lua-api.factorio.com/latest/defines.html#defines.events.on_entity_cloned) is raised for each entity, and then [defines.events.on_area_cloned](http://lua-api.factorio.com/latest/defines.html#defines.events.on_area_cloned) is raised.  \n\n**Note: ** Entities are cloned in an order such that they can always be created, eg rails before trains.",
        "type": "function",
        "args": {
          "source_area": {
            "name": "source_area",
            "type": "BoundingBox",
            "doc": "Table with the following fields:   \nsource_area :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox)  \ndestination_area :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox)  \ndestination_surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \ndestination_force :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nclone_tiles :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If tiles should be cloned  \nclone_entities :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If entities should be cloned  \nclone_decoratives :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If decoratives should be cloned  \nclear_destination :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the destination entities should be cleared  \nexpand_map :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the destination surface should be expanded when destination_area is outside current bounds. Default false."
          }
        }
      },
      "clone_entities": {
        "name": "clone_entities",
        "doc": "Clones the given entitie    \n\n**Parameters**  \nTable with the following fields:   \nentities :: array of [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ndestination_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)  \ndestination_surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \ndestination_force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)  \nsnap_to_grid :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \n\n**Note: ** [defines.events.on_entity_cloned](http://lua-api.factorio.com/latest/defines.html#defines.events.on_entity_cloned) is raised for each entity.  \n\n**Note: ** Entities are cloned in an order such that they can always be created, eg rails before trains.",
        "type": "function",
        "args": {
          "entities": {
            "name": "entities",
            "type": "array of LuaEntity",
            "doc": "Table with the following fields:   \nentities :: array of [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \ndestination_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)  \ndestination_surface :: [SurfaceSpecification](http://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \ndestination_force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)  \nsnap_to_grid :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)"
          }
        }
      },
      "count_entities_filtered": {
        "name": "count_entities_filtered",
        "type": "function",
        "doc": "Count entities of given type or name in a given area. Works just li  \n[LuaSurface::find_entities_filtered](http://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.find_entities_filtered), except this only returns the count. As it doesn  \nconstruct all the wrapper objects, this is more efficient if one is only interested in t  \nnumber of entities. If no area and no position are given, then the entire surface is searche  \nIf both area and position are specified, counts only entities matching the positio  \nIf position and radius are given, counts only entities within that radius of the position    \n\n**Parameters**  \nTable with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \nradius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): If given with position, will count all entities within the radius of the position.  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nghost_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nghost_type :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) or array of [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional)  \ncollision_mask :: [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) or array of [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) (optional)  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) or array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)  \nlimit :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \ninvert :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the filters should be inverted.",
        "returns": "uint",
        "args": {
          "area": {
            "name": "area",
            "type": "BoundingBox",
            "doc": "Table with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \nradius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): If given with position, will count all entities within the radius of the position.  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nghost_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nghost_type :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) or array of [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional)  \ncollision_mask :: [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) or array of [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) (optional)  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) or array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)  \nlimit :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \ninvert :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the filters should be inverted."
          }
        }
      },
      "count_tiles_filtered": {
        "name": "count_tiles_filtered",
        "type": "function",
        "doc": "Count tiles of a given name in a given area. Works just li  \n[LuaSurface::find_tiles_filtered](http://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.find_tiles_filtered), except this only returns the count. As it doesn  \nconstruct all the wrapper objects, this is more efficient if one is only interested in t  \nnumber of tiles. If no area is given, then the entire surface is searche  \nIf position and radius are given, only tiles within the radius of the position are counted    \n\n**Parameters**  \nTable with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Ignored if not given with radius.  \nradius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): If given with position, will return all entities within the radius of the position.  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nlimit :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \nhas_hidden_tile :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \ncollision_mask :: [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) or array of [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) (optional)",
        "returns": "uint",
        "args": {
          "area": {
            "name": "area",
            "type": "BoundingBox",
            "doc": "Table with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Ignored if not given with radius.  \nradius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): If given with position, will return all entities within the radius of the position.  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nlimit :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \nhas_hidden_tile :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \ncollision_mask :: [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) or array of [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) (optional)"
          }
        }
      },
      "create_decoratives": {
        "name": "create_decoratives",
        "doc": "Adds the given decoratives to the surfac  \nEach Decorative     \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \namount :: [uint8](http://lua-api.factorio.com/latest/Builtin-Types.html#uint8)  \n\n**Parameters**  \nTable with the following fields:   \ncheck_collision :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If collision should be checked against entities/tiles.  \ndecoratives :: array of Decorative  \n\n**Note: ** This will merge decoratives of the same type that already exist effectively increasing the \"amount\" field.",
        "type": "function",
        "args": {
          "check_collision": {
            "name": "check_collision",
            "type": "boolean",
            "doc": "Table with the following fields:   \ncheck_collision :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If collision should be checked against entities/tiles.  \ndecoratives :: array of Decorative"
          }
        }
      },
      "create_entity": {
        "name": "create_entity",
        "type": "function",
        "doc": "Create an entity on this surface    \n\n**Parameters**  \nTable with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The entity prototype name to create.  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to create the entity.  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): Desired orientation of the entity after creation.  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): Force of the entity, default is enemy.  \ntarget :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): Entity with health for the new entity to target.  \nsource :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): Source entity. Used for beams.  \nfast_replace :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If true, building will attempt to simulate fast-replace building.  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): If given set the last_user to this player. If fast_replace is true simulate fast replace using this player.  \nspill :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If false while fast_replace is true and player is nil any items from fast-replacing will be deleted instead of dropped on the ground.  \nraise_built :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If true; [defines.events.script_raised_built](http://lua-api.factorio.com/latest/defines.html#defines.events.script_raised_built) will be fired on successful entity creation.  \ncreate_build_effect_smoke :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If false, the building effect smoke will not be shown around the new entity.  \nAdditional entity-specific parameters  \nassembling-machine  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nbeam  \ntarget_position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Absolute target position that can be used instead of target entity (entity has precedence if both entity and position are defined).  \nsource_position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Absolute source position that can be used instead of source entity (entity has precedence if both entity and position are defined).  \nmax_length :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): If set, beam will be destroyed when distance between source and target is greater than this value.  \nduration :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): If set, beam will be destroyed after this value of ticks.  \nsource_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Source position will be offset by this value when rendering the beam.  \ncontainer  \nbar :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): Inventory index where the red limiting bar should be set.  \nflying-text  \ntext :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString): The string to show.  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional): Color of the displayed text.  \nrender_player_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \nentity-ghost  \ninner_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The prototype name of the entity contained in the ghost.  \nexpires :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If ````\nfalse````\nthe ghost entity will not expire. Default is ````\nfalse````\n.  \nfire  \ninitial_ground_flame_count :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): With how many small flames should the fire on ground be created.  \ninserter  \nconditions: Table with the following fields:   \ncircuit :: [CircuitCondition](http://lua-api.factorio.com/latest/Concepts.html#CircuitCondition) (optional)  \nlogistics :: [CircuitCondition](http://lua-api.factorio.com/latest/Concepts.html#CircuitCondition) (optional)  \nfilters :: array of [Filter](http://lua-api.factorio.com/latest/Concepts.html#Filter)  \nitem-entity  \nstack :: [SimpleItemStack](http://lua-api.factorio.com/latest/Concepts.html#SimpleItemStack): The stack of items to create.  \nitem-request-proxy  \ntarget :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The target items are to be delivered to.  \nmodules :: dictionary [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) → [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The stacks of items to be delivered to target entity from logistic network.  \nlogistic-container  \nrequest_filters :: array of [Filter](http://lua-api.factorio.com/latest/Concepts.html#Filter) (optional)  \nparticle  \nmovement :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)  \nheight :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nvertical_speed :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nframe_speed :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nprojectile  \nspeed :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \nmax_range :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \nresource  \namount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nenable_tree_removal :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If colliding trees are removed normally for this resource entity based off the prototype tree removal values. Default is true.  \nenable_cliff_removal :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If colliding cliffs are removed. Default is true.  \nunderground-belt  \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): ````\n\"output\"````\nor ````\n\"input\"````\n; default is ````\n\"input\"````\n.  \nprogrammable-speaker  \nparameters :: [ProgrammableSpeaker\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#ProgrammableSpeaker\n\n**Parameters**  \n) (optional)  \nalert_parameters :: [ProgrammableSpeakerAlert\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#ProgrammableSpeakerAlert\n\n**Parameters**  \n) (optional)  \ncharacter-corpse  \ninventory_size :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \nhighlight-box  \nbounding_box :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \nbox_type :: [CursorBoxRenderType](http://lua-api.factorio.com/latest/Concepts.html#CursorBoxRenderType) (optional)  \nrender_player_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \nblink_interval :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \nsimple-entity-with-owner &amp; simple-entity-with-force  \nrender_player_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n\n**Return value**  \nThe created entity or ````\nnil````\nif the creation failed.  \n\n**Example**  \n````\nasm = game.surfaces[1].create_entity{name = \"assembling-machine-1\", position = {15, 3}, force = game.forces.player, recipe = \"iron-stick\"}````  \n\n**Example**  \nCreates a filter inserter with circuit conditions and a filt    \n````\ngame.surfaces[1].create_entity{  \n  name = \"filter-inserter\", position = {20, 15}, force = game.player.force,  \n  conditions = {red = {name = \"wood\", count = 3, operator = \"&gt;\"},  \n              green = {name = \"iron-ore\", count = 1, operator =  \n  logistics = {name = \"wood\", count = 3, operator = \"=\"}},  \n  filters = {{index = 1, name = \"iron-ore\"}}  \n}````  \n\n**Example**  \nCreates a requester chest already set to request 128 iron plate    \n````\ngame.surfaces[1].create_entity{  \n  name = \"logistic-chest-requester\", position = {game.player.position.x+3, game.player.position.y},  \n  force = game.player.force, request_filters = {{index = 1, name = \"iron-plate\", count = 128}}  \n}````  \n\n**Example**  \n````\ngame.surfaces[1].create_entity{name = \"big-biter\", position = {15, 3}, force = game.forces.player} -- Friendly biter  \ngame.surfaces[1].create_entity{name = \"medium-biter\", position = {15, 3}, force = game.forces.enemy} -- Enemy biter````  \n\n**Example**  \nCreates a basic inserter at the player's location facing nor    \n````\ngame.surfaces[1].create_entity{name = \"inserter\", position = game.player.position, direction = defines.direction.north}````",
        "returns": "LuaEntity",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The entity prototype name to create.  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to create the entity.  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional): Desired orientation of the entity after creation.  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): Force of the entity, default is enemy.  \ntarget :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): Entity with health for the new entity to target.  \nsource :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html) (optional): Source entity. Used for beams.  \nfast_replace :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If true, building will attempt to simulate fast-replace building.  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): If given set the last_user to this player. If fast_replace is true simulate fast replace using this player.  \nspill :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If false while fast_replace is true and player is nil any items from fast-replacing will be deleted instead of dropped on the ground.  \nraise_built :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If true; [defines.events.script_raised_built](http://lua-api.factorio.com/latest/defines.html#defines.events.script_raised_built) will be fired on successful entity creation.  \ncreate_build_effect_smoke :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If false, the building effect smoke will not be shown around the new entity.  \nAdditional entity-specific parameters  \nassembling-machine  \nrecipe :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nbeam  \ntarget_position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Absolute target position that can be used instead of target entity (entity has precedence if both entity and position are defined).  \nsource_position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Absolute source position that can be used instead of source entity (entity has precedence if both entity and position are defined).  \nmax_length :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): If set, beam will be destroyed when distance between source and target is greater than this value.  \nduration :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): If set, beam will be destroyed after this value of ticks.  \nsource_offset :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector) (optional): Source position will be offset by this value when rendering the beam.  \ncontainer  \nbar :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): Inventory index where the red limiting bar should be set.  \nflying-text  \ntext :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString): The string to show.  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional): Color of the displayed text.  \nrender_player_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \nentity-ghost  \ninner_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The prototype name of the entity contained in the ghost.  \nexpires :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If ````\nfalse````\nthe ghost entity will not expire. Default is ````\nfalse````\n.  \nfire  \ninitial_ground_flame_count :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): With how many small flames should the fire on ground be created.  \ninserter  \nconditions: Table with the following fields:   \ncircuit :: [CircuitCondition](http://lua-api.factorio.com/latest/Concepts.html#CircuitCondition) (optional)  \nlogistics :: [CircuitCondition](http://lua-api.factorio.com/latest/Concepts.html#CircuitCondition) (optional)  \nfilters :: array of [Filter](http://lua-api.factorio.com/latest/Concepts.html#Filter)  \nitem-entity  \nstack :: [SimpleItemStack](http://lua-api.factorio.com/latest/Concepts.html#SimpleItemStack): The stack of items to create.  \nitem-request-proxy  \ntarget :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The target items are to be delivered to.  \nmodules :: dictionary [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) → [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The stacks of items to be delivered to target entity from logistic network.  \nlogistic-container  \nrequest_filters :: array of [Filter](http://lua-api.factorio.com/latest/Concepts.html#Filter) (optional)  \nparticle  \nmovement :: [Vector](http://lua-api.factorio.com/latest/Concepts.html#Vector)  \nheight :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nvertical_speed :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nframe_speed :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float)  \nprojectile  \nspeed :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \nmax_range :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double)  \nresource  \namount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \nenable_tree_removal :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If colliding trees are removed normally for this resource entity based off the prototype tree removal values. Default is true.  \nenable_cliff_removal :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If colliding cliffs are removed. Default is true.  \nunderground-belt  \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): ````\n\"output\"````\nor ````\n\"input\"````\n; default is ````\n\"input\"````\n.  \nprogrammable-speaker  \nparameters :: [ProgrammableSpeaker\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#ProgrammableSpeaker\n\n**Parameters**  \n) (optional)  \nalert_parameters :: [ProgrammableSpeakerAlert\n\n**Parameters**  \n](http://lua-api.factorio.com/latest/Concepts.html#ProgrammableSpeakerAlert\n\n**Parameters**  \n) (optional)  \ncharacter-corpse  \ninventory_size :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \nplayer_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \nhighlight-box  \nbounding_box :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \nbox_type :: [CursorBoxRenderType](http://lua-api.factorio.com/latest/Concepts.html#CursorBoxRenderType) (optional)  \nrender_player_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \nblink_interval :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \ntime_to_live :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \nsimple-entity-with-owner &amp; simple-entity-with-force  \nrender_player_index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)"
          }
        }
      },
      "create_trivial_smoke": {
        "name": "create_trivial_smoke",
        "type": "function",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The smoke prototype name to create.  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to create the smoke."
          }
        },
        "doc": "**Parameters**  \nTable with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The smoke prototype name to create.  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to create the smoke."
      },
      "create_unit_group": {
        "name": "create_unit_group",
        "type": "function",
        "doc": "Create a new unit group at a given position    \n\n**Parameters**  \nTable with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Initial position of the new unit group.  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): Force of the new unit group. Defaults to ````\n\"enemy\"````\n.",
        "returns": "LuaUnitGroup",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "Table with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Initial position of the new unit group.  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): Force of the new unit group. Defaults to ````\n\"enemy\"````\n."
          }
        }
      },
      "darkness": {
        "name": "darkness",
        "type": "float",
        "mode": "[R]",
        "doc": "Amount of darkness at the current time."
      },
      "dawn": {
        "name": "dawn",
        "type": "double",
        "mode": "[RW]",
        "doc": "The daytime when dawn start"
      },
      "daytime": {
        "name": "daytime",
        "type": "float",
        "mode": "[RW]",
        "doc": "Current time of day, as a number in range [0, 1)."
      },
      "deconstruct_area": {
        "name": "deconstruct_area",
        "doc": "Place a deconstruction reques    \n\n**Parameters**  \nTable with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area to mark for deconstruction.  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force whose bots should perform the deconstruction.  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any.  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nitem :: [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html) (optional): The deconstruction item to use if any.",
        "type": "function",
        "args": {
          "area": {
            "name": "area",
            "type": "BoundingBox",
            "doc": "Table with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area to mark for deconstruction.  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force whose bots should perform the deconstruction.  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any.  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nitem :: [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html) (optional): The deconstruction item to use if any."
          }
        }
      },
      "decorative_prototype_collides": {
        "name": "decorative_prototype_collides",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position to check"
          },
          "prototype": {
            "name": "prototype",
            "type": "string",
            "doc": "prototype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The decorative prototype to check"
          }
        },
        "doc": "**Parameters**  \nprototype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The decorative prototype to check  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position to check"
      },
      "delete_chunk": {
        "name": "delete_chunk",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "ChunkPosition",
            "doc": "position :: [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition): The chunk position to delete"
          }
        },
        "doc": "**Parameters**  \nposition :: [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition): The chunk position to delete  \n\n**Note: ** This won't delete the chunk immediately. Chunks are deleted at the end of the current tick."
      },
      "destroy_decoratives": {
        "name": "destroy_decoratives",
        "doc": "Removes all decoratives from the given area. If no area and no position are given, then the entire surface is searched.   \n\n**Parameters**  \nTable with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \nposition :: [TilePosition](http://lua-api.factorio.com/latest/Concepts.html#TilePosition) (optional)  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaDecorativePrototype](http://lua-api.factorio.com/latest/LuaDecorativePrototype.html) or array of [LuaDecorativePrototype](http://lua-api.factorio.com/latest/LuaDecorativePrototype.html) (optional)  \nlimit :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \ninvert :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the filters should be inverted.",
        "type": "function",
        "args": {
          "area": {
            "name": "area",
            "type": "BoundingBox",
            "doc": "Table with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \nposition :: [TilePosition](http://lua-api.factorio.com/latest/Concepts.html#TilePosition) (optional)  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaDecorativePrototype](http://lua-api.factorio.com/latest/LuaDecorativePrototype.html) or array of [LuaDecorativePrototype](http://lua-api.factorio.com/latest/LuaDecorativePrototype.html) (optional)  \nlimit :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \ninvert :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the filters should be inverted."
          }
        }
      },
      "dusk": {
        "name": "dusk",
        "type": "double",
        "mode": "[RW]",
        "doc": "The daytime when dusk start"
      },
      "entity_prototype_collides": {
        "name": "entity_prototype_collides",
        "type": "function",
        "args": {
          "direction": {
            "name": "direction",
            "type": "defines.direction",
            "doc": "direction :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional)"
          },
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position to check"
          },
          "prototype": {
            "name": "prototype",
            "type": "EntityPrototypeSpecification",
            "doc": "prototype :: [EntityPrototypeSpecification](http://lua-api.factorio.com/latest/Concepts.html#EntityPrototypeSpecification): The entity prototype to check"
          },
          "use_map_generation_bounding_box": {
            "name": "use_map_generation_bounding_box",
            "type": "boolean",
            "doc": "use_map_generation_bounding_box :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If the map generation bounding box should be used instead of the collision bounding box"
          }
        },
        "doc": "**Parameters**  \nprototype :: [EntityPrototypeSpecification](http://lua-api.factorio.com/latest/Concepts.html#EntityPrototypeSpecification): The entity prototype to check  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The position to check  \nuse_map_generation_bounding_box :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): If the map generation bounding box should be used instead of the collision bounding box  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional)"
      },
      "evening": {
        "name": "evening",
        "type": "double",
        "mode": "[RW]",
        "doc": "The daytime when evening start"
      },
      "find_decoratives_filtered": {
        "name": "find_decoratives_filtered",
        "doc": "Find decoratives of a given name in a given area. If no filters are given, returns all decoratives in the search are  \nIf multiple filters are specified, returns only decoratives matching all given filters. If no area and no position are given, then the entire surface is searched  \nEach DecorativeResult is a table:   \nposition :: [TilePosition](http://lua-api.factorio.com/latest/Concepts.html#TilePosition)  \ndecorative :: [LuaDecorativePrototype](http://lua-api.factorio.com/latest/LuaDecorativePrototype.html)  \namount :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n\n**Parameters**  \nTable with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \nposition :: [TilePosition](http://lua-api.factorio.com/latest/Concepts.html#TilePosition) (optional)  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaDecorativePrototype](http://lua-api.factorio.com/latest/LuaDecorativePrototype.html) or array of [LuaDecorativePrototype](http://lua-api.factorio.com/latest/LuaDecorativePrototype.html) (optional)  \nlimit :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \ninvert :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the filters should be inverted.  \n\n**Example**  \n````\ngame.surfaces[1].find_decoratives_filtered{area = {{-10, -10}, {10, 10}}, name = \"sand-decal\"} -- gets all sand-decals in the rectangle  \ngame.surfaces[1].find_decoratives_filtered{area = {{-10, -10}, {10, 10}}, limit = 5}  -- gets the first 5 decoratives in the rectangle````",
        "type": "function",
        "returns": "array of DecorativeResult",
        "args": {
          "area": {
            "name": "area",
            "type": "BoundingBox",
            "doc": "Table with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \nposition :: [TilePosition](http://lua-api.factorio.com/latest/Concepts.html#TilePosition) (optional)  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaDecorativePrototype](http://lua-api.factorio.com/latest/LuaDecorativePrototype.html) or array of [LuaDecorativePrototype](http://lua-api.factorio.com/latest/LuaDecorativePrototype.html) (optional)  \nlimit :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \ninvert :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the filters should be inverted."
          }
        }
      },
      "find_enemy_units": {
        "name": "find_enemy_units",
        "type": "function",
        "doc": "Find enemy units of a given force within an area    \n\n**Parameters**  \ncenter :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Center of the search area  \nradius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Radius of the circular search area  \nforce :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Force to find enemies of. If not give  \nuses the player force.  \n\n**Note: ** This is more efficient than [LuaSurface::find_entities](http://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.find_entities).  \n\n**Example**  \nFind all units who would be interested to attack the player, within 100-tile are    \n````\nlocal enemies = game.player.surface.find_enemy_units(game.player.position, 100)````",
        "returns": "array of LuaEntity",
        "args": {
          "center": {
            "name": "center",
            "type": "Position",
            "doc": "center :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Center of the search area"
          },
          "force": {
            "name": "force",
            "type": "LuaForce or string",
            "doc": "force :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Force to find enemies of. If not give  \nuses the player force."
          },
          "radius": {
            "name": "radius",
            "type": "double",
            "doc": "radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Radius of the circular search area"
          }
        }
      },
      "find_entities": {
        "name": "find_entities",
        "type": "function",
        "doc": "Find entities in a given area. If no area is given all entities on the surface are returned    \n\n**Parameters**  \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \n\n**Example**  \nWill evaluate to a list of all entities within given are    \n````\ngame.surfaces[\"nauvis\"].find_entities({{-10, -10}, {10, 10}})````",
        "returns": "array of LuaEntity",
        "args": {
          "area": {
            "name": "area",
            "type": "BoundingBox",
            "doc": "area :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)"
          }
        }
      },
      "find_entities_filtered": {
        "name": "find_entities_filtered",
        "type": "function",
        "doc": "Find entities of given type or name in a given area. If no filters (````\nname````\n, ````\ntype````\n, or ````\nforce````\n) are given, returns all entities in the search are  \nIf multiple filters are specified, returns only entities matching all given filters. If no area and no position are given, then the entire surface is searche  \nIf both area and position are specified, returns only entities matching the positio  \nIf position and radius are given, returns only entities within that radius of the position    \n\n**Parameters**  \nTable with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \nradius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): If given with position, will return all entities within the radius of the position.  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nghost_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nghost_type :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) or array of [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional)  \ncollision_mask :: [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) or array of [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) (optional)  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) or array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)  \nlimit :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \ninvert :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the filters should be inverted.  \n\n**Example**  \n````\ngame.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, type = \"resource\"} -- gets all resources in the rectangle  \ngame.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, name = \"iron-ore\"} -- gets all iron ores in the rectangle  \ngame.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, name = {\"iron-ore\", \"copper-ore\"}} -- gets all iron ore and copper ore in the rectangle  \ngame.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, force = \"player\"}  -- gets player owned entities in the rectangle  \ngame.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, limit = 5}  -- gets the first 5 entities in the rectangle  \ngame.surfaces[1].find_entities_filtered{position = {0, 0}, radius = 10}  -- gets all entities within 10 tiles of the position [0,0].````",
        "returns": "array of LuaEntity",
        "args": {
          "area": {
            "name": "area",
            "type": "BoundingBox",
            "doc": "Table with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \nradius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): If given with position, will return all entities within the radius of the position.  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \ntype :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nghost_name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nghost_type :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \ndirection :: [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) or array of [defines.direction](http://lua-api.factorio.com/latest/defines.html#defines.direction) (optional)  \ncollision_mask :: [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) or array of [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) (optional)  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) or array of [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)  \nlimit :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \ninvert :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the filters should be inverted."
          }
        }
      },
      "find_entity": {
        "name": "find_entity",
        "type": "function",
        "doc": "Find a specific entity at a specific position    \n\n**Parameters**  \nentity :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Entity to look for  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Coordinates to look at  \n\n**Return value**  \nWill be ````\nnil````\nif no such entity is found.  \n\n**Example**  \n````\ngame.player.selected.surface.find_entity('filter-inserter', {0,0})````",
        "returns": "LuaEntity",
        "args": {
          "entity": {
            "name": "entity",
            "type": "string",
            "doc": "entity :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Entity to look for"
          },
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Coordinates to look at"
          }
        }
      },
      "find_logistic_network_by_position": {
        "name": "find_logistic_network_by_position",
        "type": "function",
        "doc": "Find the logistic network that covers a given position.   \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force the logistic network should belong to.  \n\n**Return value**  \nThe found network or ````\nnil````\nif no such network was found.",
        "returns": "LuaLogisticNetwork",
        "args": {
          "force": {
            "name": "force",
            "type": "ForceSpecification",
            "doc": "force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force the logistic network should belong to."
          },
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)"
          }
        }
      },
      "find_logistic_networks_by_construction_area": {
        "name": "find_logistic_networks_by_construction_area",
        "type": "function",
        "doc": "Finds all of the logistics networks whose construction area intersects with the given position.   \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force the logistic networks should belong to.",
        "returns": "array of LuaLogisticNetwork",
        "args": {
          "force": {
            "name": "force",
            "type": "ForceSpecification",
            "doc": "force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): Force the logistic networks should belong to."
          },
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)"
          }
        }
      },
      "find_nearest_enemy": {
        "name": "find_nearest_enemy",
        "type": "function",
        "doc": "Find the enemy unit closest to the given position    \n\n**Parameters**  \nTable with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Center of the search area.  \nmax_distance :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Radius of the circular search area.  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The force the result will be an enemy o  \nUses the player force if not specified.  \n\n**Return value**  \nThe nearest enemy unit or ````\nnil````\nif no enemy could be found within t  \ngiven area.",
        "returns": "LuaEntity",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "Table with the following fields:   \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Center of the search area.  \nmax_distance :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Radius of the circular search area.  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): The force the result will be an enemy o  \nUses the player force if not specified."
          }
        }
      },
      "find_non_colliding_position": {
        "name": "find_non_colliding_position",
        "type": "function",
        "doc": "Find a non-colliding position within a given radius    \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the entity to find a position for. (The boundi  \nbox for the collision checking is taken from this prototype.)  \ncenter :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Center of the search area.  \nradius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Max distance from ````\ncenter````\nto search in. ````\n0````\nfor infinitely-lar  \nsearch area.  \nprecision :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The step length from the given position as it searches, in tiles. Minimum value is 0.01.  \nforce_to_tile_center :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Will only check tile centers. This can be useful when your intent is to place a building at the resulting positio  \nas they must generally be placed at tile centers. Default false.  \n\n**Return value**  \nThe non-colliding position. May be ````\nnil````\nif no suitable position was found.",
        "returns": "Position",
        "args": {
          "center": {
            "name": "center",
            "type": "Position",
            "doc": "center :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Center of the search area."
          },
          "force_to_tile_center": {
            "name": "force_to_tile_center",
            "type": "boolean",
            "doc": "force_to_tile_center :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Will only check tile centers. This can be useful when your intent is to place a building at the resulting positio  \nas they must generally be placed at tile centers. Default false."
          },
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the entity to find a position for. (The boundi  \nbox for the collision checking is taken from this prototype.)"
          },
          "precision": {
            "name": "precision",
            "type": "double",
            "doc": "precision :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The step length from the given position as it searches, in tiles. Minimum value is 0.01."
          },
          "radius": {
            "name": "radius",
            "type": "double",
            "doc": "radius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Max distance from ````\ncenter````\nto search in. ````\n0````\nfor infinitely-lar  \nsearch area."
          }
        }
      },
      "find_non_colliding_position_in_box": {
        "name": "find_non_colliding_position_in_box",
        "type": "function",
        "doc": "Find a non-colliding position within a given rectangle    \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the entity to find a position for. (The boundi  \nbox for the collision checking is taken from this prototype.)  \nsearch_space :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The rectangle to search inside.  \nprecision :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The step length from the given position as it searches, in tiles. Minimum value is 0.01.  \nforce_to_tile_center :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Will only check tile centers. This can be useful when your intent is to place a building at the resulting positio  \nas they must generally be placed at tile centers. Default false.  \n\n**Return value**  \nThe non-colliding position. May be ````\nnil````\nif no suitable position was found.",
        "returns": "Position",
        "args": {
          "force_to_tile_center": {
            "name": "force_to_tile_center",
            "type": "boolean",
            "doc": "force_to_tile_center :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Will only check tile centers. This can be useful when your intent is to place a building at the resulting positio  \nas they must generally be placed at tile centers. Default false."
          },
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Prototype name of the entity to find a position for. (The boundi  \nbox for the collision checking is taken from this prototype.)"
          },
          "precision": {
            "name": "precision",
            "type": "double",
            "doc": "precision :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): The step length from the given position as it searches, in tiles. Minimum value is 0.01."
          },
          "search_space": {
            "name": "search_space",
            "type": "BoundingBox",
            "doc": "search_space :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The rectangle to search inside."
          }
        }
      },
      "find_tiles_filtered": {
        "name": "find_tiles_filtered",
        "type": "function",
        "doc": "Find tiles of a given name in a given area. If no filters are given returns all tiles in the search area. If no area is given, then the entire surface is searche  \nIf position and radius are given, only tiles within the radius of the position are included    \n\n**Parameters**  \nTable with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Ignored if not given with radius.  \nradius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): If given with position, will return all entities within the radius of the position.  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nlimit :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \nhas_hidden_tile :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \ncollision_mask :: [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) or array of [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) (optional)",
        "returns": "array of LuaTile",
        "args": {
          "area": {
            "name": "area",
            "type": "BoundingBox",
            "doc": "Table with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Ignored if not given with radius.  \nradius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): If given with position, will return all entities within the radius of the position.  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nlimit :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \nhas_hidden_tile :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \ncollision_mask :: [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) or array of [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) (optional)"
          }
        }
      },
      "find_units": {
        "name": "find_units",
        "type": "function",
        "doc": "Find units of a given force and force condition within a given area    \n\n**Parameters**  \nTable with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): Box to find units within.  \nforce :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Force performing the search.  \ncondition :: [ForceCondition](http://lua-api.factorio.com/latest/Concepts.html#ForceCondition): Only forces which meet the condition will be included in the search.  \n\n**Note: ** This is more efficient than [LuaSurface::find_entities](http://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.find_entities).  \n\n**Example**  \nFind friendly units to \"player\" for    \n````\nlocal friendly_units = game.player.surface.find_units({area = {{-10, -10},{10, 10}}, force = \"player\", condition = \"friend\")````  \n\n**Example**  \nFind units of \"player\" for    \n````\nlocal units = game.player.surface.find_units({area = {{-10, -10},{10, 10}}, force = \"player\", condition = \"same\")````",
        "returns": "array of LuaEntity",
        "args": {
          "area": {
            "name": "area",
            "type": "BoundingBox",
            "doc": "Table with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): Box to find units within.  \nforce :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): Force performing the search.  \ncondition :: [ForceCondition](http://lua-api.factorio.com/latest/Concepts.html#ForceCondition): Only forces which meet the condition will be included in the search."
          }
        }
      },
      "force_generate_chunk_requests": {
        "name": "force_generate_chunk_requests",
        "doc": "Blocks and generates all chunks that have been requested using all available threads.",
        "type": "function"
      },
      "freeze_daytime": {
        "name": "freeze_daytime",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "True if daytime is currently froze"
      },
      "get_chunks": {
        "name": "get_chunks",
        "type": "function",
        "doc": "Get an iterator going over every chunk on this surface.",
        "returns": "LuaChunkIterator"
      },
      "get_closest": {
        "name": "get_closest",
        "type": "function",
        "doc": "Gets the closest entity in the list to this positio    \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \nentities :: array of [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The Entities to check",
        "returns": "LuaEntity",
        "args": {
          "entities": {
            "name": "entities",
            "type": "array of LuaEntity",
            "doc": "entities :: array of [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html): The Entities to check"
          },
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)"
          }
        }
      },
      "get_connected_tiles": {
        "name": "get_connected_tiles",
        "type": "function",
        "doc": "Gets all tiles of the given types that are connected horizontally or vertically to the given tile position including the given tile positio    \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The tile position to start at.  \ntiles :: array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The tiles to search for.  \n\n**Return value**  \nThe resulting set of tiles.  \n\n**Note: ** This won't find tiles in non-generated chunks.",
        "returns": "array of Position",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): The tile position to start at."
          },
          "tiles": {
            "name": "tiles",
            "type": "array of string",
            "doc": "tiles :: array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string): The tiles to search for."
          }
        }
      },
      "get_hidden_tile": {
        "name": "get_hidden_tile",
        "type": "function",
        "doc": "The hidden tile name or ````\nnil````\nif there isn't one for the given position.  \n\n**Parameters**  \nposition :: [TilePosition](http://lua-api.factorio.com/latest/Concepts.html#TilePosition): The tile position.",
        "returns": "string",
        "args": {
          "position": {
            "name": "position",
            "type": "TilePosition",
            "doc": "position :: [TilePosition](http://lua-api.factorio.com/latest/Concepts.html#TilePosition): The tile position."
          }
        }
      },
      "get_map_exchange_string": {
        "name": "get_map_exchange_string",
        "type": "function",
        "doc": "Gets the map exchange string for the current map generation settings of this surfac",
        "returns": "string"
      },
      "get_pollution": {
        "name": "get_pollution",
        "type": "function",
        "doc": "Get the pollution for a given positio    \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \n\n**Note: ** Pollution is stored per chunk, so this will return the same value for all positions in one chunk.  \n\n**Example**  \n````\ngame.surfaces[1].get_pollution({1,2})````",
        "returns": "double",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)"
          }
        }
      },
      "get_random_chunk": {
        "name": "get_random_chunk",
        "type": "function",
        "doc": "Gets a random generated chunk position or 0,0 if no chunks have been generated on this surfac",
        "returns": "ChunkPosition"
      },
      "get_resource_counts": {
        "name": "get_resource_counts",
        "type": "function",
        "doc": "Gets the resource amount of all resources on this surfa",
        "returns": "dictionary string → uint"
      },
      "get_script_areas": {
        "name": "get_script_areas",
        "type": "function",
        "doc": "Gets the script areas that match the given name or if no name is given all areas are returne    \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)",
        "returns": "array of ScriptArea",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)"
          }
        }
      },
      "get_script_positions": {
        "name": "get_script_positions",
        "type": "function",
        "doc": "Gets the script positions that match the given name or if no name is given all positions are returne    \n\n**Parameters**  \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)",
        "returns": "array of ScriptPosition",
        "args": {
          "name": {
            "name": "name",
            "type": "string",
            "doc": "name :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)"
          }
        }
      },
      "get_starting_area_radius": {
        "name": "get_starting_area_radius",
        "type": "function",
        "doc": "Gets the starting area radius of this surfac",
        "returns": "double"
      },
      "get_tile": {
        "name": "get_tile",
        "type": "function",
        "doc": "Get the tile at a given position.   \n\n**Parameters**  \nx :: [int](http://lua-api.factorio.com/latest/Builtin-Types.html#int)  \ny :: [int](http://lua-api.factorio.com/latest/Builtin-Types.html#int)  \n\n**Note: ** The input position params can also be a single tile position.",
        "returns": "LuaTile",
        "args": {
          "x": {
            "name": "x",
            "type": "int",
            "doc": "x :: [int](http://lua-api.factorio.com/latest/Builtin-Types.html#int)"
          },
          "y": {
            "name": "y",
            "type": "int",
            "doc": "y :: [int](http://lua-api.factorio.com/latest/Builtin-Types.html#int)"
          }
        }
      },
      "get_total_pollution": {
        "name": "get_total_pollution",
        "type": "function",
        "doc": "Gets the total amount of pollution on the surface by iterating over all of the chunks containing pollutio",
        "returns": "double"
      },
      "get_train_stops": {
        "name": "get_train_stops",
        "type": "function",
        "doc": "Gets train stops matching the given filter    \n\n**Parameters**  \nopts (optional): Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)",
        "returns": "array of LuaEntity",
        "args": {
          "opts": {
            "name": "opts",
            "type": "string or array of string",
            "doc": "opts (optional): Table with the following fields:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)"
          }
        }
      },
      "get_trains": {
        "name": "get_trains",
        "type": "function",
        "returns": "array of LuaTrain",
        "args": {
          "force": {
            "name": "force",
            "type": "ForceSpecification",
            "doc": "force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): If given only trains matching this force are returned."
          }
        },
        "doc": "**Parameters**  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): If given only trains matching this force are returned."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "index": {
        "name": "index",
        "type": "uint",
        "mode": "[R]",
        "doc": "Unique ID associated with this surface."
      },
      "is_chunk_generated": {
        "name": "is_chunk_generated",
        "type": "function",
        "doc": "Is a given chunk generated?   \n\n**Parameters**  \nposition :: [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition): The chunk's position.",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "ChunkPosition",
            "doc": "position :: [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition): The chunk's position."
          }
        }
      },
      "map_gen_settings": {
        "name": "map_gen_settings",
        "type": "MapGenSettings",
        "mode": "[RW]",
        "doc": "The generation settings for the surfac  \ncan be used to adjust the surface after changing generation settings.  \n\n**Note: ** When changing settings runtime the game will not retroactively change anything.  \n\n**Note: ** [LuaSurface::regenerate_entity](http://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.regenerate_entity), [LuaSurface::regenerate_decorative](http://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.regenerate_decorative), and [LuaSurface::delete_chunk](http://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.delete_chunk)"
      },
      "min_brightness": {
        "name": "min_brightness",
        "type": "double",
        "mode": "[RW]",
        "doc": "The minimal brightness during the night. Default is ````\n0.15````"
      },
      "morning": {
        "name": "morning",
        "type": "double",
        "mode": "[RW]",
        "doc": "The daytime when morning start"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[RW]",
        "doc": "The name of this surface. Names are unique among surface    \n\n**Note: ** the default surface can't be renamed."
      },
      "peaceful_mode": {
        "name": "peaceful_mode",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Is peaceful mode enabled on this surface?"
      },
      "play_sound": {
        "name": "play_sound",
        "type": "function",
        "doc": "Plays a sound on this surface    \n\n**Parameters**  \nTable with the following fields:   \npath :: [SoundPath](http://lua-api.factorio.com/latest/Concepts.html#SoundPath): The sound to play  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Where the sound should be played. If not given it's played 'everywhere'.  \nvolume_modifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Must be between 0 and 1 inclusive.",
        "returns": "boolean",
        "args": {
          "path": {
            "name": "path",
            "type": "SoundPath",
            "doc": "Table with the following fields:   \npath :: [SoundPath](http://lua-api.factorio.com/latest/Concepts.html#SoundPath): The sound to play  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position) (optional): Where the sound should be played. If not given it's played 'everywhere'.  \nvolume_modifier :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): Must be between 0 and 1 inclusive."
          }
        }
      },
      "pollute": {
        "name": "pollute",
        "doc": "Spawn pollution at the given position.   \n\n**Parameters**  \nsource :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to spawn the pollution.  \namount :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): How much pollution to add.",
        "type": "function",
        "args": {
          "amount": {
            "name": "amount",
            "type": "double",
            "doc": "amount :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): How much pollution to add."
          },
          "source": {
            "name": "source",
            "type": "Position",
            "doc": "source :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to spawn the pollution."
          }
        }
      },
      "print": {
        "name": "print",
        "doc": "Print text to the chat console of all players on this surface.   \n\n**Parameters**  \nmessage :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \ncolor :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)",
        "type": "function",
        "args": {
          "color": {
            "name": "color",
            "type": "Color",
            "doc": "color :: [Color](http://lua-api.factorio.com/latest/Concepts.html#Color) (optional)"
          },
          "message": {
            "name": "message",
            "type": "LocalisedString",
            "doc": "message :: [LocalisedString](http://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
          }
        }
      },
      "regenerate_decorative": {
        "name": "regenerate_decorative",
        "doc": "Regenerate autoplacement of some decoratives on this surface. This can be used to autoplace newly-added decoratives    \n\n**Parameters**  \ndecoratives :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nPrototype names of decorative or decoratives to autoplace. When ````\nnil````\nall decoratives with an autoplace are used.  \nchunks :: array of [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) (optional)  \nThe chunk positions to regenerate the entities on. If not given all chunks are regenerated. Note chunks with status &lt; entities are ignored.  \n\n**Note: ** All specified decorative prototypes must be autoplacable. If nothing is given all decoratives are generated on all chunks.",
        "type": "function",
        "args": {
          "chunks": {
            "name": "chunks",
            "type": "array of ChunkPosition",
            "doc": "chunks :: array of [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) (optional)  \nThe chunk positions to regenerate the entities on. If not given all chunks are regenerated. Note chunks with status &lt; entities are ignored."
          },
          "decoratives": {
            "name": "decoratives",
            "type": "string or array of string",
            "doc": "decoratives :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nPrototype names of decorative or decoratives to autoplace. When ````\nnil````\nall decoratives with an autoplace are used."
          }
        }
      },
      "regenerate_entity": {
        "name": "regenerate_entity",
        "doc": "Regenerate autoplacement of some entities on this surface. This can be used to autoplace newly-added entities    \n\n**Parameters**  \nentities :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nPrototype names of entity or entities to autoplace. When ````\nnil````\nall entities with an autoplace are used.  \nchunks :: array of [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) (optional)  \nThe chunk positions to regenerate the entities on. If not given all chunks are regenerated. Note chunks with status &lt; entities are ignored.  \n\n**Note: ** All specified entity prototypes must be autoplacable. If nothing is given all entities are generated on all chunks.",
        "type": "function",
        "args": {
          "chunks": {
            "name": "chunks",
            "type": "array of ChunkPosition",
            "doc": "chunks :: array of [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) (optional)  \nThe chunk positions to regenerate the entities on. If not given all chunks are regenerated. Note chunks with status &lt; entities are ignored."
          },
          "entities": {
            "name": "entities",
            "type": "string or array of string",
            "doc": "entities :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \nPrototype names of entity or entities to autoplace. When ````\nnil````\nall entities with an autoplace are used."
          }
        }
      },
      "request_path": {
        "name": "request_path",
        "type": "function",
        "doc": "Starts a path find request without actually ordering a unit to mov  \nResult is ultimately returned asynchronously via [defines.events.on_script_path_request_finished](http://lua-api.factorio.com/latest/defines.html#defines.events.on_script_path_request_finished    \n\n**Parameters**  \nTable with the following fields:   \nbounding_box :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox)  \ncollision_mask :: [CollisionMask](http://lua-api.factorio.com/latest/Concepts.html#CollisionMask) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \nstart :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \ngoal :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \nforce :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \nradius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): How close we need to get to the goal. Default 1.  \npathfind_flags :: [PathFindFlags](http://lua-api.factorio.com/latest/Concepts.html#PathFindFlags) (optional): Flags to affect the pathfinder.  \ncan_open_gates :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the path request can open gates. Default false.  \npath_resolution_modifier :: [int](http://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional): The resolution modifier of the pathing. Defaults to 0.  \n\n**Return value**  \nA unique handle to identify this call when [defines.events.on_script_path_request_finished](http://lua-api.factorio.com/latest/defines.html#defines.events.on_script_path_request_finished) fires.",
        "returns": "uint",
        "args": {
          "bounding_box": {
            "name": "bounding_box",
            "type": "BoundingBox",
            "doc": "Table with the following fields:   \nbounding_box :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox)  \ncollision_mask :: [CollisionMask](http://lua-api.factorio.com/latest/Concepts.html#CollisionMask) or array of [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \nstart :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \ngoal :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \nforce :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \nradius :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional): How close we need to get to the goal. Default 1.  \npathfind_flags :: [PathFindFlags](http://lua-api.factorio.com/latest/Concepts.html#PathFindFlags) (optional): Flags to affect the pathfinder.  \ncan_open_gates :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If the path request can open gates. Default false.  \npath_resolution_modifier :: [int](http://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional): The resolution modifier of the pathing. Defaults to 0."
          }
        }
      },
      "request_to_generate_chunks": {
        "name": "request_to_generate_chunks",
        "doc": "Request that the game's map generator generate chunks at the given positi  \nfor the given radius on this surface.   \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to generate the new chunks.  \nradius :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The chunk radius from ````\nposition````\nto generate new chunks in.",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Where to generate the new chunks."
          },
          "radius": {
            "name": "radius",
            "type": "uint",
            "doc": "radius :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): The chunk radius from ````\nposition````\nto generate new chunks in."
          }
        }
      },
      "set_chunk_generated_status": {
        "name": "set_chunk_generated_status",
        "doc": "Set generated status of a chunk. Useful when copying chunks.   \n\n**Parameters**  \nposition :: [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition): The chunk's position.  \nstatus :: [defines.chunk_generated_status](http://lua-api.factorio.com/latest/defines.html#defines.chunk_generated_status): The chunk's new status.",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "ChunkPosition",
            "doc": "position :: [ChunkPosition](http://lua-api.factorio.com/latest/Concepts.html#ChunkPosition): The chunk's position."
          },
          "status": {
            "name": "status",
            "type": "defines.chunk_generated_status",
            "doc": "status :: [defines.chunk_generated_status](http://lua-api.factorio.com/latest/defines.html#defines.chunk_generated_status): The chunk's new status."
          }
        }
      },
      "set_hidden_tile": {
        "name": "set_hidden_tile",
        "type": "function",
        "args": {
          "position": {
            "name": "position",
            "type": "TilePosition",
            "doc": "position :: [TilePosition](http://lua-api.factorio.com/latest/Concepts.html#TilePosition): The tile position."
          },
          "tile": {
            "name": "tile",
            "type": "string or LuaTilePrototype",
            "doc": "tile :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaTilePrototype](http://lua-api.factorio.com/latest/LuaTilePrototype.html): The new hidden tile or ````\nnil````\nto clear the hidden tile."
          }
        },
        "doc": "**Parameters**  \nposition :: [TilePosition](http://lua-api.factorio.com/latest/Concepts.html#TilePosition): The tile position.  \ntile :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaTilePrototype](http://lua-api.factorio.com/latest/LuaTilePrototype.html): The new hidden tile or ````\nnil````\nto clear the hidden tile."
      },
      "set_multi_command": {
        "name": "set_multi_command",
        "type": "function",
        "doc": "Give a command to multiple units. This will automatically select suitable units for t  \ntask    \n\n**Parameters**  \nTable with the following fields:   \ncommand :: [Command](http://lua-api.factorio.com/latest/Concepts.html#Command)  \nunit_count :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Number of units to give the command to.  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): Force of the units this command is to be given t  \nIf not specified, uses the enemy force.  \nunit_search_distance :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): Radius to search for units. The search area is centered   \nthe destination of the command.  \n\n**Return value**  \nNumber of units actually sent. May be less than ````\ncount````\nif not enough units we  \navailable.",
        "returns": "uint",
        "args": {
          "command": {
            "name": "command",
            "type": "Command",
            "doc": "Table with the following fields:   \ncommand :: [Command](http://lua-api.factorio.com/latest/Concepts.html#Command)  \nunit_count :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint): Number of units to give the command to.  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional): Force of the units this command is to be given t  \nIf not specified, uses the enemy force.  \nunit_search_distance :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional): Radius to search for units. The search area is centered   \nthe destination of the command."
          }
        }
      },
      "set_tiles": {
        "name": "set_tiles",
        "doc": "Set tiles at specified locations. Automatically corrects the edges around modified tiles.   \n\n**Parameters**  \ntiles :: array of Tile: Each Tile is a table:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)  \ncorrect_tiles :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If ````\nfalse````\n, the correction logic is not done on the changed tile  \nDefaults to ````\ntrue````\n.  \n\n**Note: ** It is recommended to call this method once for all the tiles you want to change rath  \nthan calling it individually for every tile. As the tile correction is used after eve  \nstep, calling it one by one could cause the tile correction logic to redo some of t  \nchanges, and it is also much performance heavy.",
        "type": "function",
        "args": {
          "correct_tiles": {
            "name": "correct_tiles",
            "type": "boolean",
            "doc": "correct_tiles :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If ````\nfalse````\n, the correction logic is not done on the changed tile  \nDefaults to ````\ntrue````\n."
          },
          "tiles": {
            "name": "tiles",
            "type": "array of Tile",
            "doc": "tiles :: array of Tile: Each Tile is a table:   \nname :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string)  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position)"
          }
        }
      },
      "solar_power_multiplier": {
        "name": "solar_power_multiplier",
        "type": "double",
        "mode": "[RW]",
        "doc": "The multiplier of solar power on this surface. Cannot be less than     \n\n**Note: ** Solar equipment is still limited to its maximum power output."
      },
      "spill_item_stack": {
        "name": "spill_item_stack",
        "doc": "Spill items on the ground centered at a given location.   \n\n**Parameters**  \nposition :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Center of the spillage  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to spill  \nenable_looted :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, each created item will be flagged with the [LuaEntity::to_be_looted](http://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.to_be_looted) flag.  \nforce :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): When provided (and not ````\nnil````\n) the items will be marked for deconstruction by this force.  \nallow_belts :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Whether items can be spilled onto belts. Defaults to ````\ntrue````\n.",
        "type": "function",
        "args": {
          "allow_belts": {
            "name": "allow_belts",
            "type": "boolean",
            "doc": "allow_belts :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Whether items can be spilled onto belts. Defaults to ````\ntrue````\n."
          },
          "enable_looted": {
            "name": "enable_looted",
            "type": "boolean",
            "doc": "enable_looted :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): When true, each created item will be flagged with the [LuaEntity::to_be_looted](http://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.to_be_looted) flag."
          },
          "force": {
            "name": "force",
            "type": "LuaForce or string",
            "doc": "force :: [LuaForce](http://lua-api.factorio.com/latest/LuaForce.html) or [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): When provided (and not ````\nnil````\n) the items will be marked for deconstruction by this force."
          },
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to spill"
          },
          "position": {
            "name": "position",
            "type": "Position",
            "doc": "position :: [Position](http://lua-api.factorio.com/latest/Concepts.html#Position): Center of the spillage"
          }
        }
      },
      "ticks_per_day": {
        "name": "ticks_per_day",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The number of ticks per day for this surfac"
      },
      "upgrade_area": {
        "name": "upgrade_area",
        "doc": "Place an upgrade reques    \n\n**Parameters**  \nTable with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area to mark for upgrade.  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force whose bots should perform the upgrade.  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any.  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nitem :: [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html): The upgrade item to use.",
        "type": "function",
        "args": {
          "area": {
            "name": "area",
            "type": "BoundingBox",
            "doc": "Table with the following fields:   \narea :: [BoundingBox](http://lua-api.factorio.com/latest/Concepts.html#BoundingBox): The area to mark for upgrade.  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force whose bots should perform the upgrade.  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any.  \nskip_fog_of_war :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): If chunks covered by fog-of-war are skipped.  \nitem :: [LuaItemStack](http://lua-api.factorio.com/latest/LuaItemStack.html): The upgrade item to use."
          }
        }
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "wind_orientation": {
        "name": "wind_orientation",
        "type": "float",
        "mode": "[RW]",
        "doc": "Current wind direction."
      },
      "wind_orientation_change": {
        "name": "wind_orientation_change",
        "type": "float",
        "mode": "[RW]",
        "doc": "Change in wind orientation per tick."
      },
      "wind_speed": {
        "name": "wind_speed",
        "type": "float",
        "mode": "[RW]",
        "doc": "Current wind speed."
      }
    },
    "doc": "A \"domain\" of the world. Surfaces can only be created and deleted through the API. Surfaces\n are uniquely identified by their name. Every game contains at least the surface \"nauvis\"."
  },
  "LuaTechnology": {
    "name": "LuaTechnology",
    "type": "LuaTechnology",
    "inherits": [],
    "properties": {
      "effects": {
        "name": "effects",
        "type": "array of Modifier",
        "mode": "[R]",
        "doc": "Effects applied when this technology is researched."
      },
      "enabled": {
        "name": "enabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Can this technology be researched?"
      },
      "force": {
        "name": "force",
        "type": "LuaForce",
        "mode": "[R]",
        "doc": "The force this technology belongs to."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "level": {
        "name": "level",
        "type": "uint",
        "mode": "[RW]",
        "doc": "The current level of this technology. For level-based technology writing to this is the same as researching the technology to the *previous* level. Writing the level will set [LuaTechnology::enabled](http://lua-api.factorio.com/latest/LuaTechnology.html#LuaTechnology.enabled) to ````\ntrue````"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]",
        "doc": "Localised name of this technology."
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this technology."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string for this prototype."
      },
      "prerequisites": {
        "name": "prerequisites",
        "type": "dictionary string → LuaTechnology",
        "mode": "[R]",
        "doc": "Prerequisites of this technology. The result maps technology name to the [LuaTechnology](http://lua-api.factorio.com/latest/LuaTechnology.htm  \nobject."
      },
      "prototype": {
        "name": "prototype",
        "type": "LuaTechnologyPrototype",
        "mode": "[R]",
        "doc": "The prototype of this technolog"
      },
      "reload": {
        "name": "reload",
        "doc": "Reload this technology from its prototype.",
        "type": "function"
      },
      "research_unit_count": {
        "name": "research_unit_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of research units required for this technolog    \nSee also  \n[LuaTechnology::research_unit_ingredients](http://lua-api.factorio.com/latest/LuaTechnology.html#LuaTechnology.research_unit_ingredients)"
      },
      "research_unit_count_formula": {
        "name": "research_unit_count_formula",
        "type": "string",
        "mode": "[R]",
        "doc": "The count formula used for this infinite research or nil if this isn't an infinite researc"
      },
      "research_unit_energy": {
        "name": "research_unit_energy",
        "type": "double",
        "mode": "[R]",
        "doc": "Amount of energy required to finish a unit of research."
      },
      "research_unit_ingredients": {
        "name": "research_unit_ingredients",
        "type": "array of Ingredient",
        "mode": "[R]",
        "doc": "Ingredients labs will require to research this technolog    \nSee also  \n[LuaTechnology::research_unit_count](http://lua-api.factorio.com/latest/LuaTechnology.html#LuaTechnology.research_unit_count)"
      },
      "researched": {
        "name": "researched",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "Has this technology been researched? Switching from ````\nfalse````\nto ````\ntrue````\nwill trigger the technolo  \nadvancement perks; switching from ````\ntrue````\nto ````\nfalse````\nwill reverse them."
      },
      "upgrade": {
        "name": "upgrade",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this an upgrade-type research?"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "visible_when_disabled": {
        "name": "visible_when_disabled",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If this technology will be visible in the research GUI even though it is disabled."
      }
    },
    "doc": "One research item."
  },
  "LuaTechnologyPrototype": {
    "name": "LuaTechnologyPrototype",
    "type": "LuaTechnologyPrototype",
    "inherits": [],
    "properties": {
      "effects": {
        "name": "effects",
        "type": "array of Modifier",
        "mode": "[R]",
        "doc": "Effects applied when this technology is researched."
      },
      "enabled": {
        "name": "enabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this technology prototype is enabled by default (enabled at the beginning of a game"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "hidden": {
        "name": "hidden",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this technology prototype is hidde"
      },
      "level": {
        "name": "level",
        "type": "uint",
        "mode": "[R]",
        "doc": "The level of this research."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]",
        "doc": "Localised name of this technology."
      },
      "max_level": {
        "name": "max_level",
        "type": "uint",
        "mode": "[R]",
        "doc": "The max level of this research."
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this technology."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string for this prototype."
      },
      "prerequisites": {
        "name": "prerequisites",
        "type": "dictionary string → LuaTechnologyPrototype",
        "mode": "[R]",
        "doc": "Prerequisites of this technology. The result maps technology name to the [LuaTechnologyPrototype](http://lua-api.factorio.com/latest/LuaTechnologyPrototype.html) object."
      },
      "research_unit_count": {
        "name": "research_unit_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "Number of research units required for this technolog    \nSee also  \n[LuaTechnologyPrototype::research_unit_ingredients](http://lua-api.factorio.com/latest/LuaTechnologyPrototype.html#LuaTechnologyPrototype.research_unit_ingredients)"
      },
      "research_unit_count_formula": {
        "name": "research_unit_count_formula",
        "type": "string",
        "mode": "[R]",
        "doc": "The count formula used for this infinite research or nil if this isn't an infinite researc"
      },
      "research_unit_energy": {
        "name": "research_unit_energy",
        "type": "double",
        "mode": "[R]",
        "doc": "Amount of energy required to finish a unit of research."
      },
      "research_unit_ingredients": {
        "name": "research_unit_ingredients",
        "type": "array of Ingredient",
        "mode": "[R]",
        "doc": "Ingredients labs will require to research this technolog    \nSee also  \n[LuaTechnologyPrototype::research_unit_count](http://lua-api.factorio.com/latest/LuaTechnologyPrototype.html#LuaTechnologyPrototype.research_unit_count)"
      },
      "upgrade": {
        "name": "upgrade",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the is technology prototype is an upgrade to some other technolog"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "visible_when_disabled": {
        "name": "visible_when_disabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this technology will be visible in the research GUI even though it is disable"
      }
    },
    "doc": "A Technology prototype."
  },
  "LuaTile": {
    "name": "LuaTile",
    "type": "LuaTile",
    "inherits": [],
    "properties": {
      "cancel_deconstruction": {
        "name": "cancel_deconstruction",
        "doc": "Cancels deconstruction if it is scheduled, does nothing otherwis    \n\n**Parameters**  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force who did the deconstruction order.  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any.",
        "type": "function",
        "args": {
          "force": {
            "name": "force",
            "type": "ForceSpecification",
            "doc": "force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force who did the deconstruction order."
          },
          "player": {
            "name": "player",
            "type": "PlayerSpecification",
            "doc": "player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any."
          }
        }
      },
      "collides_with": {
        "name": "collides_with",
        "type": "function",
        "doc": "What type of things can collide with this tile    \n\n**Parameters**  \nlayer :: [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer)  \n\n**Example**  \nCheck if the character would collide with a ti    \n````\ngame.player.print(tostring(game.player.surface.get_tile(1, 1).collides_with(\"player-layer\")))````",
        "returns": "boolean",
        "args": {
          "layer": {
            "name": "layer",
            "type": "CollisionMaskLayer",
            "doc": "layer :: [CollisionMaskLayer](http://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer)"
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "hidden_tile": {
        "name": "hidden_tile",
        "type": "string",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Prototype name of this tile. E.g. ````\n\"sand-3\"````\nor ````\n\"grass-2\"````\n."
      },
      "order_deconstruction": {
        "name": "order_deconstruction",
        "type": "function",
        "doc": "Orders deconstruction of this tile by the given forc    \n\n**Parameters**  \nforce :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force whose robots are supposed to do the deconstruction.  \nplayer :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any.  \n\n**Return value**  \nThe deconstructible tile proxy created if any or ````\nnil````\n.",
        "returns": "LuaEntity",
        "args": {
          "force": {
            "name": "force",
            "type": "ForceSpecification",
            "doc": "force :: [ForceSpecification](http://lua-api.factorio.com/latest/Concepts.html#ForceSpecification): The force whose robots are supposed to do the deconstruction."
          },
          "player": {
            "name": "player",
            "type": "PlayerSpecification",
            "doc": "player :: [PlayerSpecification](http://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional): The player to set the last_user to if any."
          }
        }
      },
      "position": {
        "name": "position",
        "type": "Position",
        "mode": "[R]",
        "doc": "The position this tile reference"
      },
      "prototype": {
        "name": "prototype",
        "type": "LuaTilePrototype",
        "mode": "[R]"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "A single \"square\" on the map."
  },
  "LuaTilePrototype": {
    "name": "LuaTilePrototype",
    "type": "LuaTilePrototype",
    "inherits": [],
    "properties": {
      "allowed_neighbors": {
        "name": "allowed_neighbors",
        "type": "dictionary string → LuaTilePrototype",
        "mode": "[R]"
      },
      "automatic_neighbors": {
        "name": "automatic_neighbors",
        "type": "boolean",
        "mode": "[R]"
      },
      "autoplace_specification": {
        "name": "autoplace_specification",
        "type": "AutoplaceSpecification",
        "mode": "[R]",
        "doc": "Autoplace specification for this prototype. ````\nnil````\nif non"
      },
      "can_be_part_of_blueprint": {
        "name": "can_be_part_of_blueprint",
        "type": "boolean",
        "mode": "[R]",
        "doc": "False if this tile is not allowed in blueprints regardless of the ability to build it."
      },
      "collision_mask": {
        "name": "collision_mask",
        "type": "dictionary string → boolean",
        "mode": "[R]",
        "doc": "The collision mask this tile us  \nThe boolean values for each item are meaningless and will always be ````\ntrue````\n.  \n\n**Note: ** This is a dictionary of the collision masks this tile uses to allow quick lookup of any value."
      },
      "decorative_removal_probability": {
        "name": "decorative_removal_probability",
        "type": "float",
        "mode": "[R]",
        "doc": "The probability that decorative entities will be removed from on top of this tile when this tile is generated."
      },
      "emissions_per_second": {
        "name": "emissions_per_second",
        "type": "double",
        "mode": "[R]",
        "doc": "Amount of pollution emissions per tick this tile will absorb."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "items_to_place_this": {
        "name": "items_to_place_this",
        "type": "array of SimpleItemStack",
        "mode": "[R]",
        "doc": "Items that when placed will produce this tile. It is a dictionary indexed by the item prototype name."
      },
      "layer": {
        "name": "layer",
        "type": "uint",
        "mode": "[R]"
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "map_color": {
        "name": "map_color",
        "type": "Color",
        "mode": "[R]"
      },
      "mineable_properties": {
        "name": "mineable_properties",
        "type": "table",
        "mode": "[R]",
        "doc": "It is a table:   \nminable :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean): Is this tile mineable at all?  \nminingtime :: [double](http://lua-api.factorio.com/latest/Builtin-Types.html#double): Energy required to mine a tile.  \nminingparticle :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the particle produced when mining this til  \nWill only be present if this tile produces any particle during mining.  \nproducts :: array of [Product](http://lua-api.factorio.com/latest/Concepts.html#Product): Products obtained by mining this tile."
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "needs_correction": {
        "name": "needs_correction",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this tile needs correction logic applied when it's generated in the world"
      },
      "next_direction": {
        "name": "next_direction",
        "type": "LuaTilePrototype",
        "mode": "[R]",
        "doc": "The next direction of this tile or ````\nnil````\n- used when a tile has multiple directions (such as hazard concret"
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "vehicle_friction_modifier": {
        "name": "vehicle_friction_modifier",
        "type": "float",
        "mode": "[R]"
      },
      "walking_speed_modifier": {
        "name": "walking_speed_modifier",
        "type": "float",
        "mode": "[R]"
      }
    },
    "doc": "Prototype of a tile."
  },
  "LuaTrain": {
    "name": "LuaTrain",
    "type": "LuaTrain",
    "inherits": [],
    "properties": {
      "back_rail": {
        "name": "back_rail",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The rail at the back end of the train, possibly ````\nnil````\n."
      },
      "back_stock": {
        "name": "back_stock",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The back stock of this train or ````\nnil````\n."
      },
      "cargo_wagons": {
        "name": "cargo_wagons",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "The cargo carriages the train contains."
      },
      "carriages": {
        "name": "carriages",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "Rolling stocks the train is composed of."
      },
      "clear_fluids_inside": {
        "name": "clear_fluids_inside",
        "doc": "Clears all fluids in this train.",
        "type": "function"
      },
      "clear_items_inside": {
        "name": "clear_items_inside",
        "doc": "Clear all items in this train.",
        "type": "function"
      },
      "fluid_wagons": {
        "name": "fluid_wagons",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "The fluid carriages the train contains."
      },
      "front_rail": {
        "name": "front_rail",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The rail at the front end of the train, possibly ````\nnil````\n."
      },
      "front_stock": {
        "name": "front_stock",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The front stock of this train or ````\nnil````\n."
      },
      "get_contents": {
        "name": "get_contents",
        "type": "function",
        "doc": "Get a mapping of the train's inventory.   \n\n**Return value**  \nThe counts, indexed by item names.",
        "returns": "dictionary string → uint"
      },
      "get_fluid_contents": {
        "name": "get_fluid_contents",
        "type": "function",
        "doc": "Gets a mapping of the train's fluid inventor    \n\n**Return value**  \nThe counts, indexed by fluid names.",
        "returns": "dictionary string → double"
      },
      "get_fluid_count": {
        "name": "get_fluid_count",
        "type": "function",
        "doc": "Get the amount of a particular fluid stored in the trai    \n\n**Parameters**  \nfluid :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Fluid name to count. If not given, counts all fluids.",
        "returns": "double",
        "args": {
          "fluid": {
            "name": "fluid",
            "type": "string",
            "doc": "fluid :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Fluid name to count. If not given, counts all fluids."
          }
        }
      },
      "get_item_count": {
        "name": "get_item_count",
        "type": "function",
        "doc": "Get the amount of a particular item stored in the train.   \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Item name to count. If not given, counts all items.",
        "returns": "uint",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Item name to count. If not given, counts all items."
          }
        }
      },
      "get_rails": {
        "name": "get_rails",
        "type": "function",
        "doc": "Gets all rails under the trai",
        "returns": "array of LuaEntity"
      },
      "go_to_station": {
        "name": "go_to_station",
        "doc": "Go to the station specified by the index in the train's schedul    \n\n**Parameters**  \nindex :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
        "type": "function",
        "args": {
          "index": {
            "name": "index",
            "type": "uint",
            "doc": "index :: [uint](http://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
          }
        }
      },
      "has_path": {
        "name": "has_path",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this train has a pat"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "id": {
        "name": "id",
        "type": "uint",
        "mode": "[R]",
        "doc": "The unique train I"
      },
      "insert": {
        "name": "insert",
        "doc": "Insert a stack into the train.   \n\n**Parameters**  \nstack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification)",
        "type": "function",
        "args": {
          "stack": {
            "name": "stack",
            "type": "ItemStackSpecification",
            "doc": "stack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification)"
          }
        }
      },
      "insert_fluid": {
        "name": "insert_fluid",
        "type": "function",
        "doc": "Inserts the given fluid into the first available location in this trai    \n\n**Parameters**  \n\n**Return value**  \nThe amount inserted.",
        "returns": "double",
        "args": {
          "undefined": {
            "doc": ""
          }
        }
      },
      "kill_count": {
        "name": "kill_count",
        "type": "uint",
        "mode": "[R]",
        "doc": "The total number of kills by this trai"
      },
      "killed_players": {
        "name": "killed_players",
        "type": "dictionary uint → uint",
        "mode": "[R]",
        "doc": "The players killed by this trai    \nThe keys are the player indexes, the values are how often this train killed that player."
      },
      "locomotives": {
        "name": "locomotives",
        "type": "dictionary string → array of LuaEntity",
        "mode": "[R]",
        "doc": "Arrays of locomotives. The result is two arrays, indexed by ````\n\"front_movers\"````\nand ````\n\"back_movers\"````  \ncontaining the locomotives. E.g. ````\n{front_movers={loco1, loco2}, back_movers={loco3}}````\n."
      },
      "manual_mode": {
        "name": "manual_mode",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "When ````\ntrue````\n, the train is explicitly controlled by the player or script. When ````\nfalse````\n, t  \ntrain moves autonomously according to its schedule."
      },
      "max_backward_speed": {
        "name": "max_backward_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "Current max speed when moving backwards, depends on locomotive prototype and fuel."
      },
      "max_forward_speed": {
        "name": "max_forward_speed",
        "type": "double",
        "mode": "[R]",
        "doc": "Current max speed when moving forward, depends on locomotive prototype and fuel."
      },
      "passengers": {
        "name": "passengers",
        "type": "array of LuaPlayer",
        "mode": "[R]",
        "doc": "The player passengers on the tra    \n\n**Note: ** This does *not* index using player index. See [LuaPlayer::index](http://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.index) on each player instance for the player index."
      },
      "path": {
        "name": "path",
        "type": "LuaRailPath",
        "mode": "[R]",
        "doc": "The path this train is using or ````\nnil````\nif non"
      },
      "path_end_rail": {
        "name": "path_end_rail",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The destination rail this train is currently pathing to or ````\nnil````"
      },
      "path_end_stop": {
        "name": "path_end_stop",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The destination train stop this train is currently pathing to or ````\nnil````"
      },
      "rail_direction_from_back_rail": {
        "name": "rail_direction_from_back_rail",
        "type": "defines.rail_direction",
        "mode": "[R]"
      },
      "rail_direction_from_front_rail": {
        "name": "rail_direction_from_front_rail",
        "type": "defines.rail_direction",
        "mode": "[R]"
      },
      "recalculate_path": {
        "name": "recalculate_path",
        "type": "function",
        "doc": "Checks if the path is invalid and tries to re-path if it isn'    \n\n**Parameters**  \nforce :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Forces the train to re-path regardless of the current path being valid or not.  \n\n**Return value**  \nIf the train has a path after the repath attempt.",
        "returns": "boolean",
        "args": {
          "force": {
            "name": "force",
            "type": "boolean",
            "doc": "force :: [boolean](http://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional): Forces the train to re-path regardless of the current path being valid or not."
          }
        }
      },
      "remove_fluid": {
        "name": "remove_fluid",
        "type": "function",
        "doc": "Remove some fluid from the trai    \n\n**Parameters**  \nfluid: A table with type and amount  \n\n**Return value**  \nThe amount of fluid actually removed.",
        "returns": "double",
        "args": {
          "fluid": {
            "name": "fluid",
            "doc": "fluid: A table with type and amount",
            "type": "fluid"
          }
        }
      },
      "remove_item": {
        "name": "remove_item",
        "type": "function",
        "doc": "Remove some items from the train.   \n\n**Parameters**  \nstack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): The amount and type of items to remove  \n\n**Return value**  \nNumber of items actually removed.",
        "returns": "uint",
        "args": {
          "stack": {
            "name": "stack",
            "type": "ItemStackSpecification",
            "doc": "stack :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): The amount and type of items to remove"
          }
        }
      },
      "riding_state": {
        "name": "riding_state",
        "type": "RidingState",
        "mode": "[R]",
        "doc": "The riding state of this trai"
      },
      "schedule": {
        "name": "schedule",
        "type": "TrainSchedule",
        "mode": "[RW]",
        "doc": "The trains current schedule. Set to ````\nnil````\nto clea    \n\n**Note: ** The schedule can't be changed by modifying the returned table. Instead, changes mu  \nbe made by assigning a new table to this attribute."
      },
      "signal": {
        "name": "signal",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The signal this train is arriving or waiting at or ````\nnil````\nif non"
      },
      "speed": {
        "name": "speed",
        "type": "double",
        "mode": "[RW]",
        "doc": "Current spee    \n\n**Note: ** Changing the speed of the train is potentially an unsafe operation because tra  \nuses the speed for its internal calculations of break distances, etc."
      },
      "state": {
        "name": "state",
        "type": "defines.train_state",
        "mode": "[R]",
        "doc": "This train's current state."
      },
      "station": {
        "name": "station",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The train stop this train is stopped at or ````\nnil````"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      },
      "weight": {
        "name": "weight",
        "type": "double",
        "mode": "[R]",
        "doc": "The weight of this train."
      }
    },
    "doc": "A train. Trains are a sequence of connected rolling stocks -- locomotives and wagons."
  },
  "LuaTrainStopControlBehavior": {
    "name": "LuaTrainStopControlBehavior",
    "type": "LuaTrainStopControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity",
      "Inherited from LuaGenericOnOffControlBehavior: disabled, circuit_condition, logistic_condition, connect_to_logistic_network"
    ],
    "properties": {
      "circuit_condition": {
        "name": "circuit_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The circuit condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the circuit condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 cha  \nsignal    \n````\na_behavior.circuit_condition = {condition={comparator=\"&gt;\",  \n                                           first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                           constant=4}}````"
      },
      "connect_to_logistic_network": {
        "name": "connect_to_logistic_network",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif this should connect to the logistic network."
      },
      "disabled": {
        "name": "disabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the entity is currently disabled because of the control behavior."
      },
      "enable_disable": {
        "name": "enable_disable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the train stop is enabled/disabled through the circuit network."
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "logistic_condition": {
        "name": "logistic_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The logistic condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the logistic condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more th  \n4 chain signal    \n````\na_behavior.logistic_condition = {condition={comparator=\"&gt;\",  \n                                            first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                            constant=4}}````"
      },
      "read_from_train": {
        "name": "read_from_train",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the train stop should send the train contents to the circuit network."
      },
      "read_stopped_train": {
        "name": "read_stopped_train",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the train stop should send the stopped train id to the circuit network."
      },
      "send_to_train": {
        "name": "send_to_train",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif the train stop should send the circuit network contents to the train to use."
      },
      "stopped_train_signal": {
        "name": "stopped_train_signal",
        "type": "SignalID",
        "mode": "[RW]",
        "doc": "The signal that will be sent when using the send-train-id optio"
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for train stops."
  },
  "LuaTransportBeltControlBehavior": {
    "name": "LuaTransportBeltControlBehavior",
    "type": "LuaTransportBeltControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity",
      "Inherited from LuaGenericOnOffControlBehavior: disabled, circuit_condition, logistic_condition, connect_to_logistic_network"
    ],
    "properties": {
      "circuit_condition": {
        "name": "circuit_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The circuit condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the circuit condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 cha  \nsignal    \n````\na_behavior.circuit_condition = {condition={comparator=\"&gt;\",  \n                                           first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                           constant=4}}````"
      },
      "connect_to_logistic_network": {
        "name": "connect_to_logistic_network",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "````\ntrue````\nif this should connect to the logistic network."
      },
      "disabled": {
        "name": "disabled",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If the entity is currently disabled because of the control behavior."
      },
      "enable_disable": {
        "name": "enable_disable",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If the belt will be enabled/disabled based off the circuit networ"
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "logistic_condition": {
        "name": "logistic_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The logistic condition    \n\n**Note: ** ````\ncondition````\nmay be ````\nnil````\nin order to clear the logistic condition.  \n\n**Example**  \nTell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more th  \n4 chain signal    \n````\na_behavior.logistic_condition = {condition={comparator=\"&gt;\",  \n                                            first_signal={type=\"item\", name=\"rail-chain-signal\"},  \n                                            constant=4}}````"
      },
      "read_contents": {
        "name": "read_contents",
        "type": "boolean",
        "mode": "[RW]",
        "doc": "If the belt will read the contents and send them to the circuit networ"
      },
      "read_contents_mode": {
        "name": "read_contents_mode",
        "type": "defines.control_behavior.transport_belt.content_read_mode",
        "mode": "[RW]",
        "doc": "The read mode for the belt."
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for transport belts."
  },
  "LuaTransportLine": {
    "name": "LuaTransportLine",
    "type": "LuaTransportLine",
    "inherits": [],
    "properties": {
      "can_insert_at": {
        "name": "can_insert_at",
        "type": "function",
        "doc": "Can an item be inserted at a given position?   \n\n**Parameters**  \nposition :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): Where to insert an item.",
        "returns": "boolean",
        "args": {
          "position": {
            "name": "position",
            "type": "float",
            "doc": "position :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): Where to insert an item."
          }
        }
      },
      "can_insert_at_back": {
        "name": "can_insert_at_back",
        "type": "function",
        "doc": "Can an item be inserted at the back of this line?",
        "returns": "boolean"
      },
      "clear": {
        "name": "clear",
        "doc": "Remove all items from this transport line.",
        "type": "function"
      },
      "get_contents": {
        "name": "get_contents",
        "type": "function",
        "doc": "Get counts of all items on this line.   \n\n**Return value**  \nThe counts, indexed by item names.  \nSee also  \n[LuaInventory::get_contents](http://lua-api.factorio.com/latest/LuaInventory.html#LuaInventory.get_contents)",
        "returns": "dictionary string → uint"
      },
      "get_item_count": {
        "name": "get_item_count",
        "type": "function",
        "doc": "Count some or all items on this line    \n\n**Parameters**  \nitem :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items.  \nSee also  \n[LuaInventory::get_item_count](http://lua-api.factorio.com/latest/LuaInventory.html#LuaInventory.get_item_count)",
        "returns": "uint",
        "args": {
          "item": {
            "name": "item",
            "type": "string",
            "doc": "item :: [string](http://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional): Prototype name of the item to count. If not specified, count all items."
          }
        }
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "input_lines": {
        "name": "input_lines",
        "type": "array of LuaTransportLine",
        "mode": "[R]",
        "doc": "The transport lines that this transport line is fed by or an empty table if none."
      },
      "insert_at": {
        "name": "insert_at",
        "type": "function",
        "doc": "Insert items at a given position.   \n\n**Parameters**  \nposition :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): Where on the line to insert the items.  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert.  \n\n**Return value**  \nWere the items inserted successfully?",
        "returns": "boolean",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to insert."
          },
          "position": {
            "name": "position",
            "type": "float",
            "doc": "position :: [float](http://lua-api.factorio.com/latest/Builtin-Types.html#float): Where on the line to insert the items."
          }
        }
      },
      "insert_at_back": {
        "name": "insert_at_back",
        "type": "function",
        "doc": "Insert items at the back of this line.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification)  \n\n**Return value**  \nWere the items inserted successfully?",
        "returns": "boolean",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification)"
          }
        }
      },
      "line_equals": {
        "name": "line_equals",
        "type": "function",
        "doc": "Returns whether the associated internal transport line of this line is the same as the others associated internal transport lin    \n\n**Parameters**  \nother :: [LuaTransportLine](http://lua-api.factorio.com/latest/LuaTransportLine.html)  \n\n**Note: ** This can return true even when the [LuaTransportLine::owner](http://lua-api.factorio.com/latest/LuaTransportLine.html#LuaTransportLine.owner)s are different (so ````\nthis == other````\nis false), because the internal transport lines can span multiple tiles.",
        "returns": "boolean",
        "args": {
          "other": {
            "name": "other",
            "type": "LuaTransportLine",
            "doc": "other :: [LuaTransportLine](http://lua-api.factorio.com/latest/LuaTransportLine.html)"
          }
        }
      },
      "operator []": {
        "name": "operator []",
        "type": "LuaItemStack",
        "mode": "[R]",
        "doc": "The indexing operator."
      },
      "operator #": {
        "name": "operator #",
        "type": "uint",
        "mode": "[R]",
        "doc": "Get the number of items on this transport line."
      },
      "output_lines": {
        "name": "output_lines",
        "type": "array of LuaTransportLine",
        "mode": "[R]",
        "doc": "The transport lines that this transport line outputs items to or an empty table if none."
      },
      "owner": {
        "name": "owner",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this transport line belongs to."
      },
      "remove_item": {
        "name": "remove_item",
        "type": "function",
        "doc": "Remove some items from this line.   \n\n**Parameters**  \nitems :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove.  \n\n**Return value**  \nNumber of items actually removed.",
        "returns": "uint",
        "args": {
          "items": {
            "name": "items",
            "type": "ItemStackSpecification",
            "doc": "items :: [ItemStackSpecification](http://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification): Items to remove."
          }
        }
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "One line on a transport belt."
  },
  "LuaUnitGroup": {
    "name": "LuaUnitGroup",
    "type": "LuaUnitGroup",
    "inherits": [],
    "properties": {
      "add_member": {
        "name": "add_member",
        "doc": "Make a unit a member of this group. Has the same effect as giving a ````\ngroup_command````\nwith th  \ngroup to the unit    \n\n**Parameters**  \nunit :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)  \n\n**Note: ** The member must have the same force as the unit group.",
        "type": "function",
        "args": {
          "unit": {
            "name": "unit",
            "type": "LuaEntity",
            "doc": "unit :: [LuaEntity](http://lua-api.factorio.com/latest/LuaEntity.html)"
          }
        }
      },
      "destroy": {
        "name": "destroy",
        "doc": "Dissolve this group. Its members won't be destroyed, they will be merely unlinked fr  \nthis group.",
        "type": "function"
      },
      "force": {
        "name": "force",
        "type": "LuaForce",
        "mode": "[R]",
        "doc": "The force of this unit group."
      },
      "group_number": {
        "name": "group_number",
        "type": "uint",
        "mode": "[R]",
        "doc": "The group number for this unit grou"
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "members": {
        "name": "members",
        "type": "array of LuaEntity",
        "mode": "[R]",
        "doc": "Members of this group."
      },
      "position": {
        "name": "position",
        "type": "Position",
        "mode": "[R]",
        "doc": "Group position. This can have different meanings depending on the group state. When the gro  \nis gathering, the position is the place of gathering. When the group is moving, the position   \nthe expected position of its members along the path. When the group is attacking, it is t  \naverage position of its members."
      },
      "set_autonomous": {
        "name": "set_autonomous",
        "doc": "Make this group autonomous. Autonomous groups will automatically attack polluted areas.",
        "type": "function"
      },
      "set_command": {
        "name": "set_command",
        "doc": "Give this group a command.   \n\n**Parameters**  \ncommand :: [Command](http://lua-api.factorio.com/latest/Concepts.html#Command)  \nSee also  \n[LuaEntity::set_command](http://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.set_command)",
        "type": "function",
        "args": {
          "command": {
            "name": "command",
            "type": "Command",
            "doc": "command :: [Command](http://lua-api.factorio.com/latest/Concepts.html#Command)"
          }
        }
      },
      "start_moving": {
        "name": "start_moving",
        "doc": "Make the group start moving even if some of its members haven't yet arrived.",
        "type": "function"
      },
      "state": {
        "name": "state",
        "type": "defines.group_state",
        "mode": "[R]",
        "doc": "Whether this group is gathering, moving or attacking."
      },
      "surface": {
        "name": "surface",
        "type": "LuaSurface",
        "mode": "[R]",
        "doc": "The surface of this unit group."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "A collection of units moving and attacking together. The engine creates autonomous unit groups to attack\n polluted areas. The script can create and control such groups as well. Groups can accept commands in the\n same manner as regular units."
  },
  "LuaVirtualSignalPrototype": {
    "name": "LuaVirtualSignalPrototype",
    "type": "LuaVirtualSignalPrototype",
    "inherits": [],
    "properties": {
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "localised_description": {
        "name": "localised_description",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "localised_name": {
        "name": "localised_name",
        "type": "LocalisedString",
        "mode": "[R]"
      },
      "name": {
        "name": "name",
        "type": "string",
        "mode": "[R]",
        "doc": "Name of this prototype."
      },
      "order": {
        "name": "order",
        "type": "string",
        "mode": "[R]",
        "doc": "Order string of this prototype."
      },
      "special": {
        "name": "special",
        "type": "boolean",
        "mode": "[R]",
        "doc": "If this is a special sign"
      },
      "subgroup": {
        "name": "subgroup",
        "type": "LuaGroup",
        "mode": "[R]"
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Prototype of a virtual signal."
  },
  "LuaWallControlBehavior": {
    "name": "LuaWallControlBehavior",
    "type": "LuaWallControlBehavior",
    "inherits": [
      "Inherited from LuaControlBehavior: get_circuit_network, type, entity"
    ],
    "properties": {
      "circuit_condition": {
        "name": "circuit_condition",
        "type": "CircuitConditionSpecification",
        "mode": "[RW]",
        "doc": "The circuit condition."
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "mode": "[R]",
        "doc": "The entity this control behavior belongs to."
      },
      "get_circuit_network": {
        "name": "get_circuit_network",
        "type": "function",
        "returns": "LuaCircuitNetwork",
        "args": {
          "circuit_connector": {
            "name": "circuit_connector",
            "type": "defines.circuit_connector_id",
            "doc": "circuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector."
          },
          "wire": {
            "name": "wire",
            "type": "defines.wire_type",
            "doc": "wire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity."
          }
        },
        "doc": "**Parameters**  \nwire :: [defines.wire_type](http://lua-api.factorio.com/latest/defines.html#defines.wire_type): Wire color of the network connected to this entity.  \ncircuit_connector :: [defines.circuit_connector_id](http://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional): The connector to get circuit network fo  \nMust be specified for entities with more than one circuit network connector.  \n\n**Return value**  \nThe circuit network or nil."
      },
      "help": {
        "name": "help",
        "type": "string",
        "doc": "All methods, and properties that this object supports."
      },
      "open_gate": {
        "name": "open_gate",
        "type": "boolean",
        "mode": "[RW]"
      },
      "output_signal": {
        "name": "output_signal",
        "type": "SignalID",
        "mode": "[RW]"
      },
      "read_sensor": {
        "name": "read_sensor",
        "type": "boolean",
        "mode": "[RW]"
      },
      "type": {
        "name": "type",
        "type": "defines.control_behavior.type",
        "mode": "[R]",
        "doc": "The concrete type of this control behavior."
      },
      "valid": {
        "name": "valid",
        "type": "boolean",
        "mode": "[R]",
        "doc": "Is this object valid?"
      }
    },
    "doc": "Control behavior for walls."
  }
}